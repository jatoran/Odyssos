// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"components/Utilities/break_eternity.min.js":[function(require,module,exports) {
var define;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).Decimal = e();
}(this, function () {
  "use strict";

  function t(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }
  function e(t, e) {
    for (var i = 0; i < e.length; i++) {
      var r = e[i];
      r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r);
    }
  }
  function i(t, i, r) {
    return i && e(t.prototype, i), r && e(t, r), Object.defineProperty(t, "prototype", {
      writable: !1
    }), t;
  }
  var r = function () {
      function e(i) {
        t(this, e), this.map = new Map(), this.first = void 0, this.last = void 0, this.maxSize = i;
      }
      return i(e, [{
        key: "size",
        get: function get() {
          return this.map.size;
        }
      }, {
        key: "get",
        value: function value(t) {
          var e = this.map.get(t);
          if (void 0 !== e) return e !== this.first && (e === this.last ? (this.last = e.prev, this.last.next = void 0) : (e.prev.next = e.next, e.next.prev = e.prev), e.next = this.first, this.first.prev = e, this.first = e), e.value;
        }
      }, {
        key: "set",
        value: function value(t, e) {
          if (!(this.maxSize < 1)) {
            if (this.map.has(t)) throw new Error("Cannot update existing keys in the cache");
            var i = new n(t, e);
            for (void 0 === this.first ? (this.first = i, this.last = i) : (i.next = this.first, this.first.prev = i, this.first = i), this.map.set(t, i); this.map.size > this.maxSize;) {
              var r = this.last;
              this.map.delete(r.key), this.last = r.prev, this.last.next = void 0;
            }
          }
        }
      }]), e;
    }(),
    n = i(function e(i, r) {
      t(this, e), this.next = void 0, this.prev = void 0, this.key = i, this.value = r;
    }),
    a = Math.log10(9e15),
    s = function () {
      for (var t = [], e = -323; e <= 308; e++) t.push(Number("1e" + e));
      return function (e) {
        return t[e + 323];
      };
    }(),
    u = [2, Math.E, 3, 4, 5, 6, 7, 8, 9, 10],
    h = [[1, 1.0891180521811203, 1.1789767925673957, 1.2701455431742086, 1.3632090180450092, 1.4587818160364217, 1.5575237916251419, 1.6601571006859253, 1.767485818836978, 1.8804192098842727, 2], [1, 1.1121114330934079, 1.231038924931609, 1.3583836963111375, 1.4960519303993531, 1.6463542337511945, 1.8121385357018724, 1.996971324618307, 2.2053895545527546, 2.4432574483385254, Math.E], [1, 1.1187738849693603, 1.2464963939368214, 1.38527004705667, 1.5376664685821402, 1.7068895236551784, 1.897001227148399, 2.1132403089001035, 2.362480153784171, 2.6539010333870774, 3], [1, 1.1367350847096405, 1.2889510672956703, 1.4606478703324786, 1.6570295196661111, 1.8850062585672889, 2.1539465047453485, 2.476829779693097, 2.872061932789197, 3.3664204535587183, 4], [1, 1.1494592900767588, 1.319708228183931, 1.5166291280087583, 1.748171114438024, 2.0253263297298045, 2.3636668498288547, 2.7858359149579424, 3.3257226212448145, 4.035730287722532, 5], [1, 1.159225940787673, 1.343712473580932, 1.5611293155111927, 1.8221199554561318, 2.14183924486326, 2.542468319282638, 3.0574682501653316, 3.7390572020926873, 4.6719550537360774, 6], [1, 1.1670905356972596, 1.3632807444991446, 1.5979222279405536, 1.8842640123816674, 2.2416069644878687, 2.69893426559423, 3.3012632110403577, 4.121250340630164, 5.281493033448316, 7], [1, 1.1736630594087796, 1.379783782386201, 1.6292821855668218, 1.9378971836180754, 2.3289975651071977, 2.8384347394720835, 3.5232708454565906, 4.478242031114584, 5.868592169644505, 8], [1, 1.1793017514670474, 1.394054150657457, 1.65664127441059, 1.985170999970283, 2.4069682290577457, 2.9647310119960752, 3.7278665320924946, 4.814462547283592, 6.436522247411611, 9], [1, 1.1840100246247336, 1.4061375836156955, 1.6802272208863964, 2.026757028388619, 2.4770056063449646, 3.080525271755482, 3.9191964192627284, 5.135152840833187, 6.989961179534715, 10]],
    o = [[-1, -.9194161097107025, -.8335625019330468, -.7425599821143978, -.6466611521029437, -.5462617907227869, -.4419033816638769, -.3342645487554494, -.224140440909962, -.11241087890006762, 0], [-1, -.90603157029014, -.80786507256596, -.7064666939634, -.60294836853664, -.49849837513117, -.39430303318768, -.29147201034755, -.19097820800866, -.09361896280296, 0], [-1, -.9021579584316141, -.8005762598234203, -.6964780623319391, -.5911906810998454, -.486050182576545, -.3823089430815083, -.28106046722897615, -.1831906535795894, -.08935809204418144, 0], [-1, -.8917227442365535, -.781258746326964, -.6705130326902455, -.5612813129406509, -.4551067709033134, -.35319256652135966, -.2563741554088552, -.1651412821106526, -.0796919581982668, 0], [-1, -.8843387974366064, -.7678744063886243, -.6529563724510552, -.5415870994657841, -.4352842206588936, -.33504449124791424, -.24138853420685147, -.15445285440944467, -.07409659641336663, 0], [-1, -.8786709358426346, -.7577735191184886, -.6399546189952064, -.527284921869926, -.4211627631006314, -.3223479611761232, -.23107655627789858, -.1472057700818259, -.07035171210706326, 0], [-1, -.8740862815291583, -.7497032990976209, -.6297119746181752, -.5161838335958787, -.41036238255751956, -.31277212146489963, -.2233976621705518, -.1418697367979619, -.06762117662323441, 0], [-1, -.8702632331800649, -.7430366914122081, -.6213373075161548, -.5072025698095242, -.40171437727184167, -.30517930701410456, -.21736343968190863, -.137710238299109, -.06550774483471955, 0], [-1, -.8670016295947213, -.7373984232432306, -.6143173985094293, -.49973884395492807, -.394584953527678, -.2989649949848695, -.21245647317021688, -.13434688362382652, -.0638072667348083, 0], [-1, -.8641642839543857, -.732534623168535, -.6083127477059322, -.4934049257184696, -.3885773075899922, -.29376029055315767, -.2083678561173622, -.13155653399373268, -.062401588652553186, 0]],
    l = function l(t) {
      return k.fromValue_noAlloc(t);
    },
    m = function m(t, e, i) {
      return k.fromComponents(t, e, i);
    },
    g = function g(t, e, i) {
      return k.fromComponents_noNormalize(t, e, i);
    },
    f = function f(t, e) {
      var i = e + 1,
        r = Math.ceil(Math.log10(Math.abs(t))),
        n = Math.round(t * Math.pow(10, i - r)) * Math.pow(10, r - i);
      return parseFloat(n.toFixed(Math.max(i - r, 0)));
    },
    c = function c(t) {
      return Math.sign(t) * Math.log10(Math.abs(t));
    },
    y = .5671432904097838,
    v = function v(t) {
      var e,
        i,
        r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e-10;
      if (!Number.isFinite(t)) return t;
      if (0 === t) return t;
      if (1 === t) return y;
      e = t < 10 ? 0 : Math.log(t) - Math.log(Math.log(t));
      for (var n = 0; n < 100; ++n) {
        if (i = (t * Math.exp(-e) + e * e) / (e + 1), Math.abs(i - e) < r * Math.abs(i)) return i;
        e = i;
      }
      throw Error("Iteration failed to converge: ".concat(t.toString()));
    };
  function d(t) {
    var e,
      i,
      r,
      n,
      a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e-10;
    if (!Number.isFinite(t.mag)) return t;
    if (t.eq(k.dZero)) return t;
    if (t.eq(k.dOne)) return k.fromNumber(y);
    e = k.ln(t);
    for (var s = 0; s < 100; ++s) {
      if (i = e.neg().exp(), r = e.sub(t.mul(i)), n = e.sub(r.div(e.add(1).sub(e.add(2).mul(r).div(k.mul(2, e).add(2))))), k.abs(n.sub(e)).lt(k.abs(n).mul(a))) return n;
      e = n;
    }
    throw Error("Iteration failed to converge: ".concat(t.toString()));
  }
  var k = function () {
    function e(i) {
      t(this, e), this.sign = 0, this.mag = 0, this.layer = 0, i instanceof e ? this.fromDecimal(i) : "number" == typeof i ? this.fromNumber(i) : "string" == typeof i && this.fromString(i);
    }
    return i(e, [{
      key: "m",
      get: function get() {
        if (0 === this.sign) return 0;
        if (0 === this.layer) {
          var t,
            e = Math.floor(Math.log10(this.mag));
          return t = 5e-324 === this.mag ? 5 : this.mag / s(e), this.sign * t;
        }
        if (1 === this.layer) {
          var i = this.mag - Math.floor(this.mag);
          return this.sign * Math.pow(10, i);
        }
        return this.sign;
      },
      set: function set(t) {
        this.layer <= 2 ? this.fromMantissaExponent(t, this.e) : (this.sign = Math.sign(t), 0 === this.sign && (this.layer = 0, this.exponent = 0));
      }
    }, {
      key: "e",
      get: function get() {
        return 0 === this.sign ? 0 : 0 === this.layer ? Math.floor(Math.log10(this.mag)) : 1 === this.layer ? Math.floor(this.mag) : 2 === this.layer ? Math.floor(Math.sign(this.mag) * Math.pow(10, Math.abs(this.mag))) : this.mag * Number.POSITIVE_INFINITY;
      },
      set: function set(t) {
        this.fromMantissaExponent(this.m, t);
      }
    }, {
      key: "s",
      get: function get() {
        return this.sign;
      },
      set: function set(t) {
        0 === t ? (this.sign = 0, this.layer = 0, this.mag = 0) : this.sign = t;
      }
    }, {
      key: "mantissa",
      get: function get() {
        return this.m;
      },
      set: function set(t) {
        this.m = t;
      }
    }, {
      key: "exponent",
      get: function get() {
        return this.e;
      },
      set: function set(t) {
        this.e = t;
      }
    }, {
      key: "normalize",
      value: function value() {
        if (0 === this.sign || 0 === this.mag && 0 === this.layer) return this.sign = 0, this.mag = 0, this.layer = 0, this;
        if (0 === this.layer && this.mag < 0 && (this.mag = -this.mag, this.sign = -this.sign), 0 === this.layer && this.mag < 1 / 9e15) return this.layer += 1, this.mag = Math.log10(this.mag), this;
        var t = Math.abs(this.mag),
          e = Math.sign(this.mag);
        if (t >= 9e15) return this.layer += 1, this.mag = e * Math.log10(t), this;
        for (; t < a && this.layer > 0;) this.layer -= 1, 0 === this.layer ? this.mag = Math.pow(10, this.mag) : (this.mag = e * Math.pow(10, t), t = Math.abs(this.mag), e = Math.sign(this.mag));
        return 0 === this.layer && (this.mag < 0 ? (this.mag = -this.mag, this.sign = -this.sign) : 0 === this.mag && (this.sign = 0)), this;
      }
    }, {
      key: "fromComponents",
      value: function value(t, e, i) {
        return this.sign = t, this.layer = e, this.mag = i, this.normalize(), this;
      }
    }, {
      key: "fromComponents_noNormalize",
      value: function value(t, e, i) {
        return this.sign = t, this.layer = e, this.mag = i, this;
      }
    }, {
      key: "fromMantissaExponent",
      value: function value(t, e) {
        return this.layer = 1, this.sign = Math.sign(t), t = Math.abs(t), this.mag = e + Math.log10(t), this.normalize(), this;
      }
    }, {
      key: "fromMantissaExponent_noNormalize",
      value: function value(t, e) {
        return this.fromMantissaExponent(t, e), this;
      }
    }, {
      key: "fromDecimal",
      value: function value(t) {
        return this.sign = t.sign, this.layer = t.layer, this.mag = t.mag, this;
      }
    }, {
      key: "fromNumber",
      value: function value(t) {
        return this.mag = Math.abs(t), this.sign = Math.sign(t), this.layer = 0, this.normalize(), this;
      }
    }, {
      key: "fromString",
      value: function value(t) {
        var i = t,
          r = e.fromStringCache.get(i);
        if (void 0 !== r) return this.fromDecimal(r);
        var n = (t = t.replace(",", "")).split("^^^");
        if (2 === n.length) {
          var a = parseFloat(n[0]),
            s = parseFloat(n[1]),
            u = n[1].split(";"),
            h = 1;
          if (2 === u.length && (h = parseFloat(u[1]), isFinite(h) || (h = 1)), isFinite(a) && isFinite(s)) {
            var o = e.pentate(a, s, h);
            return this.sign = o.sign, this.layer = o.layer, this.mag = o.mag, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
          }
        }
        var g = t.split("^^");
        if (2 === g.length) {
          var f = parseFloat(g[0]),
            y = parseFloat(g[1]),
            v = g[1].split(";"),
            d = 1;
          if (2 === v.length && (d = parseFloat(v[1]), isFinite(d) || (d = 1)), isFinite(f) && isFinite(y)) {
            var k = e.tetrate(f, y, d);
            return this.sign = k.sign, this.layer = k.layer, this.mag = k.mag, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
          }
        }
        var p,
          N,
          b = t.split("^");
        if (2 === b.length) {
          var M = parseFloat(b[0]),
            _ = parseFloat(b[1]);
          if (isFinite(M) && isFinite(_)) {
            var x = e.pow(M, _);
            return this.sign = x.sign, this.layer = x.layer, this.mag = x.mag, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
          }
        }
        var F = (t = t.trim().toLowerCase()).split("pt");
        if (2 === F.length) {
          p = 10, N = parseFloat(F[0]), F[1] = F[1].replace("(", ""), F[1] = F[1].replace(")", "");
          var S = parseFloat(F[1]);
          if (isFinite(S) || (S = 1), isFinite(p) && isFinite(N)) {
            var w = e.tetrate(p, N, S);
            return this.sign = w.sign, this.layer = w.layer, this.mag = w.mag, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
          }
        }
        if (2 === (F = t.split("p")).length) {
          p = 10, N = parseFloat(F[0]), F[1] = F[1].replace("(", ""), F[1] = F[1].replace(")", "");
          var q = parseFloat(F[1]);
          if (isFinite(q) || (q = 1), isFinite(p) && isFinite(N)) {
            var I = e.tetrate(p, N, q);
            return this.sign = I.sign, this.layer = I.layer, this.mag = I.mag, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
          }
        }
        var E = t.split("e"),
          C = E.length - 1;
        if (0 === C) {
          var z = parseFloat(t);
          if (isFinite(z)) return this.fromNumber(z), e.fromStringCache.size >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
        } else if (1 === C) {
          var T = parseFloat(t);
          if (isFinite(T) && 0 !== T) return this.fromNumber(T), e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
        }
        var O = t.split("e^");
        if (2 === O.length) {
          this.sign = 1, "-" == O[0].charAt(0) && (this.sign = -1);
          for (var D = "", V = 0; V < O[1].length; ++V) {
            var A = O[1].charCodeAt(V);
            if (!(A >= 43 && A <= 57 || 101 === A)) return this.layer = parseFloat(D), this.mag = parseFloat(O[1].substr(V + 1)), this.normalize(), e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
            D += O[1].charAt(V);
          }
        }
        if (C < 1) return this.sign = 0, this.layer = 0, this.mag = 0, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
        var P = parseFloat(E[0]);
        if (0 === P) return this.sign = 0, this.layer = 0, this.mag = 0, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
        var Z = parseFloat(E[E.length - 1]);
        if (C >= 2) {
          var Y = parseFloat(E[E.length - 2]);
          isFinite(Y) && (Z *= Math.sign(Y), Z += c(Y));
        }
        if (isFinite(P)) {
          if (1 === C) this.sign = Math.sign(P), this.layer = 1, this.mag = Z + Math.log10(Math.abs(P));else {
            if (this.sign = Math.sign(P), this.layer = C, 2 === C) {
              var G = e.mul(m(1, 2, Z), l(P));
              return this.sign = G.sign, this.layer = G.layer, this.mag = G.mag, e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
            }
            this.mag = Z;
          }
        } else this.sign = "-" === E[0] ? -1 : 1, this.layer = C, this.mag = Z;
        return this.normalize(), e.fromStringCache.maxSize >= 1 && e.fromStringCache.set(i, e.fromDecimal(this)), this;
      }
    }, {
      key: "fromValue",
      value: function value(t) {
        return t instanceof e ? this.fromDecimal(t) : "number" == typeof t ? this.fromNumber(t) : "string" == typeof t ? this.fromString(t) : (this.sign = 0, this.layer = 0, this.mag = 0, this);
      }
    }, {
      key: "toNumber",
      value: function value() {
        return Number.isFinite(this.layer) ? 0 === this.layer ? this.sign * this.mag : 1 === this.layer ? this.sign * Math.pow(10, this.mag) : this.mag > 0 ? this.sign > 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY : 0 : Number.NaN;
      }
    }, {
      key: "mantissaWithDecimalPlaces",
      value: function value(t) {
        return isNaN(this.m) ? Number.NaN : 0 === this.m ? 0 : f(this.m, t);
      }
    }, {
      key: "magnitudeWithDecimalPlaces",
      value: function value(t) {
        return isNaN(this.mag) ? Number.NaN : 0 === this.mag ? 0 : f(this.mag, t);
      }
    }, {
      key: "toString",
      value: function value() {
        return isNaN(this.layer) || isNaN(this.sign) || isNaN(this.mag) ? "NaN" : this.mag === Number.POSITIVE_INFINITY || this.layer === Number.POSITIVE_INFINITY ? 1 === this.sign ? "Infinity" : "-Infinity" : 0 === this.layer ? this.mag < 1e21 && this.mag > 1e-7 || 0 === this.mag ? (this.sign * this.mag).toString() : this.m + "e" + this.e : 1 === this.layer ? this.m + "e" + this.e : this.layer <= 5 ? (-1 === this.sign ? "-" : "") + "e".repeat(this.layer) + this.mag : (-1 === this.sign ? "-" : "") + "(e^" + this.layer + ")" + this.mag;
      }
    }, {
      key: "toExponential",
      value: function value(t) {
        return 0 === this.layer ? (this.sign * this.mag).toExponential(t) : this.toStringWithDecimalPlaces(t);
      }
    }, {
      key: "toFixed",
      value: function value(t) {
        return 0 === this.layer ? (this.sign * this.mag).toFixed(t) : this.toStringWithDecimalPlaces(t);
      }
    }, {
      key: "toPrecision",
      value: function value(t) {
        return this.e <= -7 ? this.toExponential(t - 1) : t > this.e ? this.toFixed(t - this.exponent - 1) : this.toExponential(t - 1);
      }
    }, {
      key: "valueOf",
      value: function value() {
        return this.toString();
      }
    }, {
      key: "toJSON",
      value: function value() {
        return this.toString();
      }
    }, {
      key: "toStringWithDecimalPlaces",
      value: function value(t) {
        return 0 === this.layer ? this.mag < 1e21 && this.mag > 1e-7 || 0 === this.mag ? (this.sign * this.mag).toFixed(t) : f(this.m, t) + "e" + f(this.e, t) : 1 === this.layer ? f(this.m, t) + "e" + f(this.e, t) : this.layer <= 5 ? (-1 === this.sign ? "-" : "") + "e".repeat(this.layer) + f(this.mag, t) : (-1 === this.sign ? "-" : "") + "(e^" + this.layer + ")" + f(this.mag, t);
      }
    }, {
      key: "abs",
      value: function value() {
        return g(0 === this.sign ? 0 : 1, this.layer, this.mag);
      }
    }, {
      key: "neg",
      value: function value() {
        return g(-this.sign, this.layer, this.mag);
      }
    }, {
      key: "negate",
      value: function value() {
        return this.neg();
      }
    }, {
      key: "negated",
      value: function value() {
        return this.neg();
      }
    }, {
      key: "sgn",
      value: function value() {
        return this.sign;
      }
    }, {
      key: "round",
      value: function value() {
        return this.mag < 0 ? e.dZero : 0 === this.layer ? m(this.sign, 0, Math.round(this.mag)) : this;
      }
    }, {
      key: "floor",
      value: function value() {
        return this.mag < 0 ? e.dZero : 0 === this.layer ? m(this.sign, 0, Math.floor(this.mag)) : this;
      }
    }, {
      key: "ceil",
      value: function value() {
        return this.mag < 0 ? e.dZero : 0 === this.layer ? m(this.sign, 0, Math.ceil(this.mag)) : this;
      }
    }, {
      key: "trunc",
      value: function value() {
        return this.mag < 0 ? e.dZero : 0 === this.layer ? m(this.sign, 0, Math.trunc(this.mag)) : this;
      }
    }, {
      key: "add",
      value: function value(t) {
        var i,
          r,
          n = l(t);
        if (!Number.isFinite(this.layer)) return this;
        if (!Number.isFinite(n.layer)) return n;
        if (0 === this.sign) return n;
        if (0 === n.sign) return this;
        if (this.sign === -n.sign && this.layer === n.layer && this.mag === n.mag) return g(0, 0, 0);
        if (this.layer >= 2 || n.layer >= 2) return this.maxabs(n);
        if (e.cmpabs(this, n) > 0 ? (i = this, r = n) : (i = n, r = this), 0 === i.layer && 0 === r.layer) return e.fromNumber(i.sign * i.mag + r.sign * r.mag);
        var a = i.layer * Math.sign(i.mag),
          s = r.layer * Math.sign(r.mag);
        if (a - s >= 2) return i;
        if (0 === a && -1 === s) {
          if (Math.abs(r.mag - Math.log10(i.mag)) > 17) return i;
          var u = Math.pow(10, Math.log10(i.mag) - r.mag),
            h = r.sign + i.sign * u;
          return m(Math.sign(h), 1, r.mag + Math.log10(Math.abs(h)));
        }
        if (1 === a && 0 === s) {
          if (Math.abs(i.mag - Math.log10(r.mag)) > 17) return i;
          var o = Math.pow(10, i.mag - Math.log10(r.mag)),
            f = r.sign + i.sign * o;
          return m(Math.sign(f), 1, Math.log10(r.mag) + Math.log10(Math.abs(f)));
        }
        if (Math.abs(i.mag - r.mag) > 17) return i;
        var c = Math.pow(10, i.mag - r.mag),
          y = r.sign + i.sign * c;
        return m(Math.sign(y), 1, r.mag + Math.log10(Math.abs(y)));
      }
    }, {
      key: "plus",
      value: function value(t) {
        return this.add(t);
      }
    }, {
      key: "sub",
      value: function value(t) {
        return this.add(l(t).neg());
      }
    }, {
      key: "subtract",
      value: function value(t) {
        return this.sub(t);
      }
    }, {
      key: "minus",
      value: function value(t) {
        return this.sub(t);
      }
    }, {
      key: "mul",
      value: function value(t) {
        var i,
          r,
          n = l(t);
        if (!Number.isFinite(this.layer)) return this;
        if (!Number.isFinite(n.layer)) return n;
        if (0 === this.sign || 0 === n.sign) return g(0, 0, 0);
        if (this.layer === n.layer && this.mag === -n.mag) return g(this.sign * n.sign, 0, 1);
        if (this.layer > n.layer || this.layer == n.layer && Math.abs(this.mag) > Math.abs(n.mag) ? (i = this, r = n) : (i = n, r = this), 0 === i.layer && 0 === r.layer) return e.fromNumber(i.sign * r.sign * i.mag * r.mag);
        if (i.layer >= 3 || i.layer - r.layer >= 2) return m(i.sign * r.sign, i.layer, i.mag);
        if (1 === i.layer && 0 === r.layer) return m(i.sign * r.sign, 1, i.mag + Math.log10(r.mag));
        if (1 === i.layer && 1 === r.layer) return m(i.sign * r.sign, 1, i.mag + r.mag);
        if (2 === i.layer && 1 === r.layer) {
          var a = m(Math.sign(i.mag), i.layer - 1, Math.abs(i.mag)).add(m(Math.sign(r.mag), r.layer - 1, Math.abs(r.mag)));
          return m(i.sign * r.sign, a.layer + 1, a.sign * a.mag);
        }
        if (2 === i.layer && 2 === r.layer) {
          var s = m(Math.sign(i.mag), i.layer - 1, Math.abs(i.mag)).add(m(Math.sign(r.mag), r.layer - 1, Math.abs(r.mag)));
          return m(i.sign * r.sign, s.layer + 1, s.sign * s.mag);
        }
        throw Error("Bad arguments to mul: " + this + ", " + t);
      }
    }, {
      key: "multiply",
      value: function value(t) {
        return this.mul(t);
      }
    }, {
      key: "times",
      value: function value(t) {
        return this.mul(t);
      }
    }, {
      key: "div",
      value: function value(t) {
        var e = l(t);
        return this.mul(e.recip());
      }
    }, {
      key: "divide",
      value: function value(t) {
        return this.div(t);
      }
    }, {
      key: "divideBy",
      value: function value(t) {
        return this.div(t);
      }
    }, {
      key: "dividedBy",
      value: function value(t) {
        return this.div(t);
      }
    }, {
      key: "recip",
      value: function value() {
        return 0 === this.mag ? e.dNaN : 0 === this.layer ? m(this.sign, 0, 1 / this.mag) : m(this.sign, this.layer, -this.mag);
      }
    }, {
      key: "reciprocal",
      value: function value() {
        return this.recip();
      }
    }, {
      key: "reciprocate",
      value: function value() {
        return this.recip();
      }
    }, {
      key: "cmp",
      value: function value(t) {
        var e = l(t);
        return this.sign > e.sign ? 1 : this.sign < e.sign ? -1 : this.sign * this.cmpabs(t);
      }
    }, {
      key: "cmpabs",
      value: function value(t) {
        var e = l(t),
          i = this.mag > 0 ? this.layer : -this.layer,
          r = e.mag > 0 ? e.layer : -e.layer;
        return i > r ? 1 : i < r ? -1 : this.mag > e.mag ? 1 : this.mag < e.mag ? -1 : 0;
      }
    }, {
      key: "compare",
      value: function value(t) {
        return this.cmp(t);
      }
    }, {
      key: "isNan",
      value: function value() {
        return isNaN(this.sign) || isNaN(this.layer) || isNaN(this.mag);
      }
    }, {
      key: "isFinite",
      value: function (t) {
        function e() {
          return t.apply(this, arguments);
        }
        return e.toString = function () {
          return t.toString();
        }, e;
      }(function () {
        return isFinite(this.sign) && isFinite(this.layer) && isFinite(this.mag);
      })
    }, {
      key: "eq",
      value: function value(t) {
        var e = l(t);
        return this.sign === e.sign && this.layer === e.layer && this.mag === e.mag;
      }
    }, {
      key: "equals",
      value: function value(t) {
        return this.eq(t);
      }
    }, {
      key: "neq",
      value: function value(t) {
        return !this.eq(t);
      }
    }, {
      key: "notEquals",
      value: function value(t) {
        return this.neq(t);
      }
    }, {
      key: "lt",
      value: function value(t) {
        return -1 === this.cmp(t);
      }
    }, {
      key: "lte",
      value: function value(t) {
        return !this.gt(t);
      }
    }, {
      key: "gt",
      value: function value(t) {
        return 1 === this.cmp(t);
      }
    }, {
      key: "gte",
      value: function value(t) {
        return !this.lt(t);
      }
    }, {
      key: "max",
      value: function value(t) {
        var e = l(t);
        return this.lt(e) ? e : this;
      }
    }, {
      key: "min",
      value: function value(t) {
        var e = l(t);
        return this.gt(e) ? e : this;
      }
    }, {
      key: "maxabs",
      value: function value(t) {
        var e = l(t);
        return this.cmpabs(e) < 0 ? e : this;
      }
    }, {
      key: "minabs",
      value: function value(t) {
        var e = l(t);
        return this.cmpabs(e) > 0 ? e : this;
      }
    }, {
      key: "clamp",
      value: function value(t, e) {
        return this.max(t).min(e);
      }
    }, {
      key: "clampMin",
      value: function value(t) {
        return this.max(t);
      }
    }, {
      key: "clampMax",
      value: function value(t) {
        return this.min(t);
      }
    }, {
      key: "cmp_tolerance",
      value: function value(t, e) {
        var i = l(t);
        return this.eq_tolerance(i, e) ? 0 : this.cmp(i);
      }
    }, {
      key: "compare_tolerance",
      value: function value(t, e) {
        return this.cmp_tolerance(t, e);
      }
    }, {
      key: "eq_tolerance",
      value: function value(t, e) {
        var i = l(t);
        if (null == e && (e = 1e-7), this.sign !== i.sign) return !1;
        if (Math.abs(this.layer - i.layer) > 1) return !1;
        var r = this.mag,
          n = i.mag;
        return this.layer > i.layer && (n = c(n)), this.layer < i.layer && (r = c(r)), Math.abs(r - n) <= e * Math.max(Math.abs(r), Math.abs(n));
      }
    }, {
      key: "equals_tolerance",
      value: function value(t, e) {
        return this.eq_tolerance(t, e);
      }
    }, {
      key: "neq_tolerance",
      value: function value(t, e) {
        return !this.eq_tolerance(t, e);
      }
    }, {
      key: "notEquals_tolerance",
      value: function value(t, e) {
        return this.neq_tolerance(t, e);
      }
    }, {
      key: "lt_tolerance",
      value: function value(t, e) {
        var i = l(t);
        return !this.eq_tolerance(i, e) && this.lt(i);
      }
    }, {
      key: "lte_tolerance",
      value: function value(t, e) {
        var i = l(t);
        return this.eq_tolerance(i, e) || this.lt(i);
      }
    }, {
      key: "gt_tolerance",
      value: function value(t, e) {
        var i = l(t);
        return !this.eq_tolerance(i, e) && this.gt(i);
      }
    }, {
      key: "gte_tolerance",
      value: function value(t, e) {
        var i = l(t);
        return this.eq_tolerance(i, e) || this.gt(i);
      }
    }, {
      key: "pLog10",
      value: function value() {
        return this.lt(e.dZero) ? e.dZero : this.log10();
      }
    }, {
      key: "absLog10",
      value: function value() {
        return 0 === this.sign ? e.dNaN : this.layer > 0 ? m(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag)) : m(1, 0, Math.log10(this.mag));
      }
    }, {
      key: "log10",
      value: function value() {
        return this.sign <= 0 ? e.dNaN : this.layer > 0 ? m(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag)) : m(this.sign, 0, Math.log10(this.mag));
      }
    }, {
      key: "log",
      value: function value(t) {
        return t = l(t), this.sign <= 0 || t.sign <= 0 || 1 === t.sign && 0 === t.layer && 1 === t.mag ? e.dNaN : 0 === this.layer && 0 === t.layer ? m(this.sign, 0, Math.log(this.mag) / Math.log(t.mag)) : e.div(this.log10(), t.log10());
      }
    }, {
      key: "log2",
      value: function value() {
        return this.sign <= 0 ? e.dNaN : 0 === this.layer ? m(this.sign, 0, Math.log2(this.mag)) : 1 === this.layer ? m(Math.sign(this.mag), 0, 3.321928094887362 * Math.abs(this.mag)) : 2 === this.layer ? m(Math.sign(this.mag), 1, Math.abs(this.mag) + .5213902276543247) : m(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag));
      }
    }, {
      key: "ln",
      value: function value() {
        return this.sign <= 0 ? e.dNaN : 0 === this.layer ? m(this.sign, 0, Math.log(this.mag)) : 1 === this.layer ? m(Math.sign(this.mag), 0, 2.302585092994046 * Math.abs(this.mag)) : 2 === this.layer ? m(Math.sign(this.mag), 1, Math.abs(this.mag) + .36221568869946325) : m(Math.sign(this.mag), this.layer - 1, Math.abs(this.mag));
      }
    }, {
      key: "logarithm",
      value: function value(t) {
        return this.log(t);
      }
    }, {
      key: "pow",
      value: function value(t) {
        var i = this,
          r = l(t);
        if (0 === i.sign) return r.eq(0) ? g(1, 0, 1) : i;
        if (1 === i.sign && 0 === i.layer && 1 === i.mag) return i;
        if (0 === r.sign) return g(1, 0, 1);
        if (1 === r.sign && 0 === r.layer && 1 === r.mag) return i;
        var n = i.absLog10().mul(r).pow10();
        return -1 === this.sign ? Math.abs(r.toNumber() % 2) % 2 == 1 ? n.neg() : Math.abs(r.toNumber() % 2) % 2 == 0 ? n : e.dNaN : n;
      }
    }, {
      key: "pow10",
      value: function value() {
        if (!Number.isFinite(this.layer) || !Number.isFinite(this.mag)) return e.dNaN;
        var t = this;
        if (0 === t.layer) {
          var i = Math.pow(10, t.sign * t.mag);
          if (Number.isFinite(i) && Math.abs(i) >= .1) return m(1, 0, i);
          if (0 === t.sign) return e.dOne;
          t = g(t.sign, t.layer + 1, Math.log10(t.mag));
        }
        return t.sign > 0 && t.mag >= 0 ? m(t.sign, t.layer + 1, t.mag) : t.sign < 0 && t.mag >= 0 ? m(-t.sign, t.layer + 1, -t.mag) : e.dOne;
      }
    }, {
      key: "pow_base",
      value: function value(t) {
        return l(t).pow(this);
      }
    }, {
      key: "root",
      value: function value(t) {
        var e = l(t);
        return this.pow(e.recip());
      }
    }, {
      key: "factorial",
      value: function value() {
        return this.mag < 0 || 0 === this.layer ? this.add(1).gamma() : 1 === this.layer ? e.exp(e.mul(this, e.ln(this).sub(1))) : e.exp(this);
      }
    }, {
      key: "gamma",
      value: function value() {
        if (this.mag < 0) return this.recip();
        if (0 === this.layer) {
          if (this.lt(g(1, 0, 24))) return e.fromNumber(function (t) {
            if (!isFinite(t)) return t;
            if (t < -50) return t === Math.trunc(t) ? Number.NEGATIVE_INFINITY : 0;
            for (var e = 1; t < 10;) e *= t, ++t;
            var i = .9189385332046727;
            i += ((t -= 1) + .5) * Math.log(t), i -= t;
            var r = t * t,
              n = t;
            return i += 1 / (12 * n), i += 1 / (360 * (n *= r)), i += 1 / (1260 * (n *= r)), i += 1 / (1680 * (n *= r)), i += 1 / (1188 * (n *= r)), i += 691 / (360360 * (n *= r)), i += 7 / (1092 * (n *= r)), i += 3617 / (122400 * (n *= r)), Math.exp(i) / e;
          }(this.sign * this.mag));
          var t = this.mag - 1,
            i = .9189385332046727;
          i += (t + .5) * Math.log(t);
          var r = t * t,
            n = t,
            a = 12 * n,
            s = 1 / a,
            u = (i -= t) + s;
          if (u === i) return e.exp(i);
          if ((u = (i = u) - (s = 1 / (a = 360 * (n *= r)))) === i) return e.exp(i);
          i = u;
          var h = 1 / (a = 1260 * (n *= r));
          return i += h, i -= h = 1 / (a = 1680 * (n *= r)), e.exp(i);
        }
        return 1 === this.layer ? e.exp(e.mul(this, e.ln(this).sub(1))) : e.exp(this);
      }
    }, {
      key: "lngamma",
      value: function value() {
        return this.gamma().ln();
      }
    }, {
      key: "exp",
      value: function value() {
        return this.mag < 0 ? e.dOne : 0 === this.layer && this.mag <= 709.7 ? e.fromNumber(Math.exp(this.sign * this.mag)) : 0 === this.layer ? m(1, 1, this.sign * Math.log10(Math.E) * this.mag) : 1 === this.layer ? m(1, 2, this.sign * (Math.log10(.4342944819032518) + this.mag)) : m(1, this.layer + 1, this.sign * this.mag);
      }
    }, {
      key: "sqr",
      value: function value() {
        return this.pow(2);
      }
    }, {
      key: "sqrt",
      value: function value() {
        if (0 === this.layer) return e.fromNumber(Math.sqrt(this.sign * this.mag));
        if (1 === this.layer) return m(1, 2, Math.log10(this.mag) - .3010299956639812);
        var t = e.div(g(this.sign, this.layer - 1, this.mag), g(1, 0, 2));
        return t.layer += 1, t.normalize(), t;
      }
    }, {
      key: "cube",
      value: function value() {
        return this.pow(3);
      }
    }, {
      key: "cbrt",
      value: function value() {
        return this.pow(1 / 3);
      }
    }, {
      key: "tetrate",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2,
          i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : g(1, 0, 1);
        if (1 === t) return e.pow(this, i);
        if (0 === t) return new e(i);
        if (this.eq(e.dOne)) return e.dOne;
        if (this.eq(-1)) return e.pow(this, i);
        if (t === Number.POSITIVE_INFINITY) {
          var r = this.toNumber();
          if (r <= 1.444667861009766 && r >= .06598803584531254) {
            if (r > 1.444667861009099) return e.fromNumber(Math.E);
            var n = e.ln(this).neg();
            return n.lambertw().div(n);
          }
          return r > 1.444667861009766 ? e.fromNumber(Number.POSITIVE_INFINITY) : e.dNaN;
        }
        if (this.eq(e.dZero)) {
          var a = Math.abs((t + 1) % 2);
          return a > 1 && (a = 2 - a), e.fromNumber(a);
        }
        if (t < 0) return e.iteratedlog(i, this, -t);
        i = l(i);
        var s = t,
          u = s - (t = Math.trunc(t));
        if (this.gt(e.dZero) && this.lte(1.444667861009766)) {
          t = Math.min(1e4, t);
          for (var h = 0; h < t; ++h) {
            var o = i;
            if (i = this.pow(i), o.eq(i)) return i;
          }
          if (0 != u) {
            var m = this.pow(i);
            return i.mul(1 - u).add(m.mul(u));
          }
          return i;
        }
        0 !== u && (i.eq(e.dOne) ? this.gt(10) ? i = this.pow(u) : (i = e.fromNumber(e.tetrate_critical(this.toNumber(), u)), this.lt(2) && (i = i.sub(1).mul(this.minus(1)).plus(1))) : i = this.eq(10) ? i.layeradd10(u) : i.layeradd(u, this));
        for (var f = 0; f < t; ++f) {
          if (i = this.pow(i), !isFinite(i.layer) || !isFinite(i.mag)) return i.normalize();
          if (i.layer - this.layer > 3) return g(i.sign, i.layer + (t - f - 1), i.mag);
          if (f > 1e4) return i;
        }
        return i;
      }
    }, {
      key: "iteratedexp",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2,
          e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : g(1, 0, 1);
        return this.tetrate(t, e);
      }
    }, {
      key: "iteratedlog",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10,
          i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
        if (i < 0) return e.tetrate(t, -i, this);
        t = l(t);
        var r = e.fromDecimal(this),
          n = i,
          a = n - (i = Math.trunc(i));
        if (r.layer - t.layer > 3) {
          var s = Math.min(i, r.layer - t.layer - 3);
          i -= s, r.layer -= s;
        }
        for (var u = 0; u < i; ++u) {
          if (r = r.log(t), !isFinite(r.layer) || !isFinite(r.mag)) return r.normalize();
          if (u > 1e4) return r;
        }
        return a > 0 && a < 1 && (r = t.eq(10) ? r.layeradd10(-a) : r.layeradd(-a, t)), r;
      }
    }, {
      key: "slog",
      value: function value() {
        for (var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 100, r = .001, n = !1, a = !1, s = this.slog_internal(t).toNumber(), u = 1; u < i; ++u) {
          var h = new e(t).tetrate(s),
            o = h.gt(this);
          if (u > 1 && a != o && (n = !0), a = o, n ? r /= 2 : r *= 2, s += r = Math.abs(r) * (o ? -1 : 1), 0 === r) break;
        }
        return e.fromNumber(s);
      }
    }, {
      key: "slog_internal",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10;
        if ((t = l(t)).lte(e.dZero)) return e.dNaN;
        if (t.eq(e.dOne)) return e.dNaN;
        if (t.lt(e.dOne)) return this.eq(e.dOne) ? e.dZero : this.eq(e.dZero) ? e.dNegOne : e.dNaN;
        if (this.mag < 0 || this.eq(e.dZero)) return e.dNegOne;
        var i = 0,
          r = e.fromDecimal(this);
        if (r.layer - t.layer > 3) {
          var n = r.layer - t.layer - 3;
          i += n, r.layer -= n;
        }
        for (var a = 0; a < 100; ++a) if (r.lt(e.dZero)) r = e.pow(t, r), i -= 1;else {
          if (r.lte(e.dOne)) return e.fromNumber(i + e.slog_critical(t.toNumber(), r.toNumber()));
          i += 1, r = e.log(r, t);
        }
        return e.fromNumber(i);
      }
    }, {
      key: "layeradd10",
      value: function value(t) {
        t = e.fromValue_noAlloc(t).toNumber();
        var i = e.fromDecimal(this);
        if (t >= 1) {
          i.mag < 0 && i.layer > 0 ? (i.sign = 0, i.mag = 0, i.layer = 0) : -1 === i.sign && 0 == i.layer && (i.sign = 1, i.mag = -i.mag);
          var r = Math.trunc(t);
          t -= r, i.layer += r;
        }
        if (t <= -1) {
          var n = Math.trunc(t);
          if (t -= n, i.layer += n, i.layer < 0) for (var a = 0; a < 100; ++a) {
            if (i.layer++, i.mag = Math.log10(i.mag), !isFinite(i.mag)) return 0 === i.sign && (i.sign = 1), i.layer < 0 && (i.layer = 0), i.normalize();
            if (i.layer >= 0) break;
          }
        }
        for (; i.layer < 0;) i.layer++, i.mag = Math.log10(i.mag);
        return 0 === i.sign && (i.sign = 1, 0 === i.mag && i.layer >= 1 && (i.layer -= 1, i.mag = 1)), i.normalize(), 0 !== t ? i.layeradd(t, 10) : i;
      }
    }, {
      key: "layeradd",
      value: function value(t, i) {
        var r = this.slog(i).toNumber() + t;
        return r >= 0 ? e.tetrate(i, r) : Number.isFinite(r) ? r >= -1 ? e.log(e.tetrate(i, r + 1), i) : e.log(e.log(e.tetrate(i, r + 2), i), i) : e.dNaN;
      }
    }, {
      key: "lambertw",
      value: function value() {
        if (this.lt(-.3678794411710499)) throw Error("lambertw is unimplemented for results less than -1, sorry!");
        if (this.mag < 0) return e.fromNumber(v(this.toNumber()));
        if (0 === this.layer) return e.fromNumber(v(this.sign * this.mag));
        if (1 === this.layer) return d(this);
        if (2 === this.layer) return d(this);
        if (this.layer >= 3) return g(this.sign, this.layer - 1, this.mag);
        throw "Unhandled behavior in lambertw()";
      }
    }, {
      key: "ssqrt",
      value: function value() {
        if (1 == this.sign && this.layer >= 3) return g(this.sign, this.layer - 1, this.mag);
        var t = this.ln();
        return t.div(t.lambertw());
      }
    }, {
      key: "pentate",
      value: function value() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2,
          i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : g(1, 0, 1);
        i = l(i);
        var r = t,
          n = r - (t = Math.trunc(t));
        0 !== n && (i.eq(e.dOne) ? (++t, i = e.fromNumber(n)) : i = this.eq(10) ? i.layeradd10(n) : i.layeradd(n, this));
        for (var a = 0; a < t; ++a) {
          if (i = this.tetrate(i.toNumber()), !isFinite(i.layer) || !isFinite(i.mag)) return i.normalize();
          if (a > 10) return i;
        }
        return i;
      }
    }, {
      key: "sin",
      value: function value() {
        return this.mag < 0 ? this : 0 === this.layer ? e.fromNumber(Math.sin(this.sign * this.mag)) : g(0, 0, 0);
      }
    }, {
      key: "cos",
      value: function value() {
        return this.mag < 0 ? e.dOne : 0 === this.layer ? e.fromNumber(Math.cos(this.sign * this.mag)) : g(0, 0, 0);
      }
    }, {
      key: "tan",
      value: function value() {
        return this.mag < 0 ? this : 0 === this.layer ? e.fromNumber(Math.tan(this.sign * this.mag)) : g(0, 0, 0);
      }
    }, {
      key: "asin",
      value: function value() {
        return this.mag < 0 ? this : 0 === this.layer ? e.fromNumber(Math.asin(this.sign * this.mag)) : g(Number.NaN, Number.NaN, Number.NaN);
      }
    }, {
      key: "acos",
      value: function value() {
        return this.mag < 0 ? e.fromNumber(Math.acos(this.toNumber())) : 0 === this.layer ? e.fromNumber(Math.acos(this.sign * this.mag)) : g(Number.NaN, Number.NaN, Number.NaN);
      }
    }, {
      key: "atan",
      value: function value() {
        return this.mag < 0 ? this : 0 === this.layer ? e.fromNumber(Math.atan(this.sign * this.mag)) : e.fromNumber(Math.atan(Infinity * this.sign));
      }
    }, {
      key: "sinh",
      value: function value() {
        return this.exp().sub(this.negate().exp()).div(2);
      }
    }, {
      key: "cosh",
      value: function value() {
        return this.exp().add(this.negate().exp()).div(2);
      }
    }, {
      key: "tanh",
      value: function value() {
        return this.sinh().div(this.cosh());
      }
    }, {
      key: "asinh",
      value: function value() {
        return e.ln(this.add(this.sqr().add(1).sqrt()));
      }
    }, {
      key: "acosh",
      value: function value() {
        return e.ln(this.add(this.sqr().sub(1).sqrt()));
      }
    }, {
      key: "atanh",
      value: function value() {
        return this.abs().gte(1) ? g(Number.NaN, Number.NaN, Number.NaN) : e.ln(this.add(1).div(e.fromNumber(1).sub(this))).div(2);
      }
    }, {
      key: "ascensionPenalty",
      value: function value(t) {
        return 0 === t ? this : this.root(e.pow(10, t));
      }
    }, {
      key: "egg",
      value: function value() {
        return this.add(9);
      }
    }, {
      key: "lessThanOrEqualTo",
      value: function value(t) {
        return this.cmp(t) < 1;
      }
    }, {
      key: "lessThan",
      value: function value(t) {
        return this.cmp(t) < 0;
      }
    }, {
      key: "greaterThanOrEqualTo",
      value: function value(t) {
        return this.cmp(t) > -1;
      }
    }, {
      key: "greaterThan",
      value: function value(t) {
        return this.cmp(t) > 0;
      }
    }], [{
      key: "fromComponents",
      value: function value(t, i, r) {
        return new e().fromComponents(t, i, r);
      }
    }, {
      key: "fromComponents_noNormalize",
      value: function value(t, i, r) {
        return new e().fromComponents_noNormalize(t, i, r);
      }
    }, {
      key: "fromMantissaExponent",
      value: function value(t, i) {
        return new e().fromMantissaExponent(t, i);
      }
    }, {
      key: "fromMantissaExponent_noNormalize",
      value: function value(t, i) {
        return new e().fromMantissaExponent_noNormalize(t, i);
      }
    }, {
      key: "fromDecimal",
      value: function value(t) {
        return new e().fromDecimal(t);
      }
    }, {
      key: "fromNumber",
      value: function value(t) {
        return new e().fromNumber(t);
      }
    }, {
      key: "fromString",
      value: function value(t) {
        return new e().fromString(t);
      }
    }, {
      key: "fromValue",
      value: function value(t) {
        return new e().fromValue(t);
      }
    }, {
      key: "fromValue_noAlloc",
      value: function value(t) {
        if (t instanceof e) return t;
        if ("string" == typeof t) {
          var i = e.fromStringCache.get(t);
          return void 0 !== i ? i : e.fromString(t);
        }
        return "number" == typeof t ? e.fromNumber(t) : e.dZero;
      }
    }, {
      key: "abs",
      value: function value(t) {
        return l(t).abs();
      }
    }, {
      key: "neg",
      value: function value(t) {
        return l(t).neg();
      }
    }, {
      key: "negate",
      value: function value(t) {
        return l(t).neg();
      }
    }, {
      key: "negated",
      value: function value(t) {
        return l(t).neg();
      }
    }, {
      key: "sign",
      value: function value(t) {
        return l(t).sign;
      }
    }, {
      key: "sgn",
      value: function value(t) {
        return l(t).sign;
      }
    }, {
      key: "round",
      value: function value(t) {
        return l(t).round();
      }
    }, {
      key: "floor",
      value: function value(t) {
        return l(t).floor();
      }
    }, {
      key: "ceil",
      value: function value(t) {
        return l(t).ceil();
      }
    }, {
      key: "trunc",
      value: function value(t) {
        return l(t).trunc();
      }
    }, {
      key: "add",
      value: function value(t, e) {
        return l(t).add(e);
      }
    }, {
      key: "plus",
      value: function value(t, e) {
        return l(t).add(e);
      }
    }, {
      key: "sub",
      value: function value(t, e) {
        return l(t).sub(e);
      }
    }, {
      key: "subtract",
      value: function value(t, e) {
        return l(t).sub(e);
      }
    }, {
      key: "minus",
      value: function value(t, e) {
        return l(t).sub(e);
      }
    }, {
      key: "mul",
      value: function value(t, e) {
        return l(t).mul(e);
      }
    }, {
      key: "multiply",
      value: function value(t, e) {
        return l(t).mul(e);
      }
    }, {
      key: "times",
      value: function value(t, e) {
        return l(t).mul(e);
      }
    }, {
      key: "div",
      value: function value(t, e) {
        return l(t).div(e);
      }
    }, {
      key: "divide",
      value: function value(t, e) {
        return l(t).div(e);
      }
    }, {
      key: "recip",
      value: function value(t) {
        return l(t).recip();
      }
    }, {
      key: "reciprocal",
      value: function value(t) {
        return l(t).recip();
      }
    }, {
      key: "reciprocate",
      value: function value(t) {
        return l(t).reciprocate();
      }
    }, {
      key: "cmp",
      value: function value(t, e) {
        return l(t).cmp(e);
      }
    }, {
      key: "cmpabs",
      value: function value(t, e) {
        return l(t).cmpabs(e);
      }
    }, {
      key: "compare",
      value: function value(t, e) {
        return l(t).cmp(e);
      }
    }, {
      key: "isNaN",
      value: function (t) {
        function e(e) {
          return t.apply(this, arguments);
        }
        return e.toString = function () {
          return t.toString();
        }, e;
      }(function (t) {
        return t = l(t), isNaN(t.sign) || isNaN(t.layer) || isNaN(t.mag);
      })
    }, {
      key: "isFinite",
      value: function (t) {
        function e(e) {
          return t.apply(this, arguments);
        }
        return e.toString = function () {
          return t.toString();
        }, e;
      }(function (t) {
        return t = l(t), isFinite(t.sign) && isFinite(t.layer) && isFinite(t.mag);
      })
    }, {
      key: "eq",
      value: function value(t, e) {
        return l(t).eq(e);
      }
    }, {
      key: "equals",
      value: function value(t, e) {
        return l(t).eq(e);
      }
    }, {
      key: "neq",
      value: function value(t, e) {
        return l(t).neq(e);
      }
    }, {
      key: "notEquals",
      value: function value(t, e) {
        return l(t).notEquals(e);
      }
    }, {
      key: "lt",
      value: function value(t, e) {
        return l(t).lt(e);
      }
    }, {
      key: "lte",
      value: function value(t, e) {
        return l(t).lte(e);
      }
    }, {
      key: "gt",
      value: function value(t, e) {
        return l(t).gt(e);
      }
    }, {
      key: "gte",
      value: function value(t, e) {
        return l(t).gte(e);
      }
    }, {
      key: "max",
      value: function value(t, e) {
        return l(t).max(e);
      }
    }, {
      key: "min",
      value: function value(t, e) {
        return l(t).min(e);
      }
    }, {
      key: "minabs",
      value: function value(t, e) {
        return l(t).minabs(e);
      }
    }, {
      key: "maxabs",
      value: function value(t, e) {
        return l(t).maxabs(e);
      }
    }, {
      key: "clamp",
      value: function value(t, e, i) {
        return l(t).clamp(e, i);
      }
    }, {
      key: "clampMin",
      value: function value(t, e) {
        return l(t).clampMin(e);
      }
    }, {
      key: "clampMax",
      value: function value(t, e) {
        return l(t).clampMax(e);
      }
    }, {
      key: "cmp_tolerance",
      value: function value(t, e, i) {
        return l(t).cmp_tolerance(e, i);
      }
    }, {
      key: "compare_tolerance",
      value: function value(t, e, i) {
        return l(t).cmp_tolerance(e, i);
      }
    }, {
      key: "eq_tolerance",
      value: function value(t, e, i) {
        return l(t).eq_tolerance(e, i);
      }
    }, {
      key: "equals_tolerance",
      value: function value(t, e, i) {
        return l(t).eq_tolerance(e, i);
      }
    }, {
      key: "neq_tolerance",
      value: function value(t, e, i) {
        return l(t).neq_tolerance(e, i);
      }
    }, {
      key: "notEquals_tolerance",
      value: function value(t, e, i) {
        return l(t).notEquals_tolerance(e, i);
      }
    }, {
      key: "lt_tolerance",
      value: function value(t, e, i) {
        return l(t).lt_tolerance(e, i);
      }
    }, {
      key: "lte_tolerance",
      value: function value(t, e, i) {
        return l(t).lte_tolerance(e, i);
      }
    }, {
      key: "gt_tolerance",
      value: function value(t, e, i) {
        return l(t).gt_tolerance(e, i);
      }
    }, {
      key: "gte_tolerance",
      value: function value(t, e, i) {
        return l(t).gte_tolerance(e, i);
      }
    }, {
      key: "pLog10",
      value: function value(t) {
        return l(t).pLog10();
      }
    }, {
      key: "absLog10",
      value: function value(t) {
        return l(t).absLog10();
      }
    }, {
      key: "log10",
      value: function value(t) {
        return l(t).log10();
      }
    }, {
      key: "log",
      value: function value(t, e) {
        return l(t).log(e);
      }
    }, {
      key: "log2",
      value: function value(t) {
        return l(t).log2();
      }
    }, {
      key: "ln",
      value: function value(t) {
        return l(t).ln();
      }
    }, {
      key: "logarithm",
      value: function value(t, e) {
        return l(t).logarithm(e);
      }
    }, {
      key: "pow",
      value: function value(t, e) {
        return l(t).pow(e);
      }
    }, {
      key: "pow10",
      value: function value(t) {
        return l(t).pow10();
      }
    }, {
      key: "root",
      value: function value(t, e) {
        return l(t).root(e);
      }
    }, {
      key: "factorial",
      value: function value(t, e) {
        return l(t).factorial();
      }
    }, {
      key: "gamma",
      value: function value(t, e) {
        return l(t).gamma();
      }
    }, {
      key: "lngamma",
      value: function value(t, e) {
        return l(t).lngamma();
      }
    }, {
      key: "exp",
      value: function value(t) {
        return l(t).exp();
      }
    }, {
      key: "sqr",
      value: function value(t) {
        return l(t).sqr();
      }
    }, {
      key: "sqrt",
      value: function value(t) {
        return l(t).sqrt();
      }
    }, {
      key: "cube",
      value: function value(t) {
        return l(t).cube();
      }
    }, {
      key: "cbrt",
      value: function value(t) {
        return l(t).cbrt();
      }
    }, {
      key: "tetrate",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : g(1, 0, 1);
        return l(t).tetrate(e, i);
      }
    }, {
      key: "iteratedexp",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : g(1, 0, 1);
        return l(t).iteratedexp(e, i);
      }
    }, {
      key: "iteratedlog",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10,
          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
        return l(t).iteratedlog(e, i);
      }
    }, {
      key: "layeradd10",
      value: function value(t, e) {
        return l(t).layeradd10(e);
      }
    }, {
      key: "layeradd",
      value: function value(t, e) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10;
        return l(t).layeradd(e, i);
      }
    }, {
      key: "slog",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
        return l(t).slog(e);
      }
    }, {
      key: "lambertw",
      value: function value(t) {
        return l(t).lambertw();
      }
    }, {
      key: "ssqrt",
      value: function value(t) {
        return l(t).ssqrt();
      }
    }, {
      key: "pentate",
      value: function value(t) {
        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
          i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : g(1, 0, 1);
        return l(t).pentate(e, i);
      }
    }, {
      key: "affordGeometricSeries",
      value: function value(t, e, i, r) {
        return this.affordGeometricSeries_core(l(t), l(e), l(i), r);
      }
    }, {
      key: "sumGeometricSeries",
      value: function value(t, e, i, r) {
        return this.sumGeometricSeries_core(t, l(e), l(i), r);
      }
    }, {
      key: "affordArithmeticSeries",
      value: function value(t, e, i, r) {
        return this.affordArithmeticSeries_core(l(t), l(e), l(i), l(r));
      }
    }, {
      key: "sumArithmeticSeries",
      value: function value(t, e, i, r) {
        return this.sumArithmeticSeries_core(l(t), l(e), l(i), l(r));
      }
    }, {
      key: "efficiencyOfPurchase",
      value: function value(t, e, i) {
        return this.efficiencyOfPurchase_core(l(t), l(e), l(i));
      }
    }, {
      key: "randomDecimalForTesting",
      value: function value(t) {
        if (20 * Math.random() < 1) return g(0, 0, 0);
        var e = Math.random() > .5 ? 1 : -1;
        if (20 * Math.random() < 1) return g(e, 0, 1);
        var i = Math.floor(Math.random() * (t + 1)),
          r = 0 === i ? 616 * Math.random() - 308 : 16 * Math.random();
        Math.random() > .9 && (r = Math.trunc(r));
        var n = Math.pow(10, r);
        return Math.random() > .9 && (n = Math.trunc(n)), m(e, i, n);
      }
    }, {
      key: "affordGeometricSeries_core",
      value: function value(t, i, r, n) {
        var a = i.mul(r.pow(n));
        return e.floor(t.div(a).mul(r.sub(1)).add(1).log10().div(r.log10()));
      }
    }, {
      key: "sumGeometricSeries_core",
      value: function value(t, i, r, n) {
        return i.mul(r.pow(n)).mul(e.sub(1, r.pow(t))).div(e.sub(1, r));
      }
    }, {
      key: "affordArithmeticSeries_core",
      value: function value(t, e, i, r) {
        var n = e.add(r.mul(i)).sub(i.div(2)),
          a = n.pow(2);
        return n.neg().add(a.add(i.mul(t).mul(2)).sqrt()).div(i).floor();
      }
    }, {
      key: "sumArithmeticSeries_core",
      value: function value(t, e, i, r) {
        var n = e.add(r.mul(i));
        return t.div(2).mul(n.mul(2).plus(t.sub(1).mul(i)));
      }
    }, {
      key: "efficiencyOfPurchase_core",
      value: function value(t, e, i) {
        return t.div(e).add(t.div(i));
      }
    }, {
      key: "slog_critical",
      value: function value(t, i) {
        return t > 10 ? i - 1 : e.critical_section(t, i, o);
      }
    }, {
      key: "tetrate_critical",
      value: function value(t, i) {
        return e.critical_section(t, i, h);
      }
    }, {
      key: "critical_section",
      value: function value(t, e, i) {
        (e *= 10) < 0 && (e = 0), e > 10 && (e = 10), t < 2 && (t = 2), t > 10 && (t = 10);
        for (var r = 0, n = 0, a = 0; a < u.length; ++a) {
          if (u[a] == t) {
            r = i[a][Math.floor(e)], n = i[a][Math.ceil(e)];
            break;
          }
          if (u[a] < t && u[a + 1] > t) {
            var s = (t - u[a]) / (u[a + 1] - u[a]);
            r = i[a][Math.floor(e)] * (1 - s) + i[a + 1][Math.floor(e)] * s, n = i[a][Math.ceil(e)] * (1 - s) + i[a + 1][Math.ceil(e)] * s;
            break;
          }
        }
        var h = e - Math.floor(e);
        return r <= 0 || n <= 0 ? r * (1 - h) + n * h : Math.pow(t, Math.log(r) / Math.log(t) * (1 - h) + Math.log(n) / Math.log(t) * h);
      }
    }]), e;
  }();
  return k.dZero = g(0, 0, 0), k.dOne = g(1, 0, 1), k.dNegOne = g(-1, 0, 1), k.dTwo = g(1, 0, 2), k.dTen = g(1, 0, 10), k.dNaN = g(Number.NaN, Number.NaN, Number.NaN), k.dInf = g(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY), k.dNegInf = g(-1, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY), k.dNumberMax = m(1, 0, Number.MAX_VALUE), k.dNumberMin = m(1, 0, Number.MIN_VALUE), k.fromStringCache = new r(1023), l = k.fromValue_noAlloc, m = k.fromComponents, g = k.fromComponents_noNormalize, k.fromMantissaExponent, k.fromMantissaExponent_noNormalize, k;
});
},{}],"components/Utilities/decimal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEC = void 0;
var _break_eternityMin = _interopRequireDefault(require("./break_eternity.min.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// large number library
var DEC = exports.DEC = function DEC(num) {
  return new _break_eternityMin.default(num);
}; // shorten decimal declarations
},{"./break_eternity.min.js":"components/Utilities/break_eternity.min.js"}],"components/Core/_Tester.js":[function(require,module,exports) {
var define;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../Utilities/break_eternity.min.js"));
var _decimal = require("../Utilities/decimal.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // large number library
var Tester = exports.default = /*#__PURE__*/function () {
  function Tester(game) {
    _classCallCheck(this, Tester);
    this.game = game;
    this.gameManager = game.gameManager;
    this.gameContent = game.gameManager.gameContent;
    this.eventManager = this.game.eventManager;
    this.ui = game.ui;
    this.tabManager = game.ui.tabManager;
    this.passCount = 0;
    this.failCount = 0;
    this.testResults = {};
    this.featureMapping = {
      'fTrain1': 1001,
      'fTrain2': 1002,
      'fTrain3': 1003,
      'fTrain4': 1004,
      'fTrain5': 1005,
      'fUpgrade1': 1101,
      'fUpgrade2': 1102,
      'fUpgrade3': 1103,
      'fUpgrade4': 1104,
      'fUpgrade5': 1105,
      'achieve6240': 6240,
      'forgeForce1': 10001,
      'forgeForce2': 10002,
      'forgeForce3': 10003,
      'forgeForce4': 10004,
      'forgeForce5': 10005,
      'forgeCrystalUnspentWisdomToForce': 10411,
      'forgeCrystalAllTrainProd25%': 10414,
      'forgeCrystalAllTrainCostMinus25%': 10415,
      'forgeForceTrainAutobuy': 10401,
      'zone1': 90001,
      'zone2': 90002,
      'essence1BoostForceMult': 100001,
      'essenceBoostZoneProd': 100002,
      'essenceUnlockSkills': 100003,
      'essenceBoostBaseSkillpoints': 100004,
      'essenceBoostTrain1BaseLevel': 100005,
      'essenceReduceArtifactCosts': 100009
    };
    this.testSuite = {};
    this.currentTest = null;
    this.setupAndRunTestSuite();
  }

  // GETTERS
  // GET OBJECTS
  // getObjectByFeatureMapping(name)
  // getObjectById(id)

  // GET DOM ELEMENTS
  // FEATURE UN-SPECIFIC
  // getElementBySelector(selector)

  // FEATURE SPECIFIC
  // getTrainingButtonByFeatureMapping(name)
  // getAchievementButtonByFeatureMapping(name)
  // getZoneButtonByFeatureMapping(name)
  // getForgeButtonByFeatureMapping(name)
  // getEssenceButtonByFeatureMapping(name)

  // ACTIONS
  // FEATURE UN-SPECIFIC
  // clickElement(element)
  // clickElemenById(id,count=1,interval=0.1)
  // changeTab(tabName)
  // setCurrency(type,value)
  // wait(seconds)
  // fullReset

  // FEATURE SPECIFIC
  // purchaseTrainingByFeatureMapping(name,count=1,interval=0.1)
  // claimAchievementByFeatureMapping(name,count=1,interval=0.1)
  // startZoneByFeatureMapping(name,count=1,interval=0.1)
  // purchaseForgeByFeatureMapping(name,count = 1,interval=0.1)
  // purchaseEssenceUpgradeByFeatureMapping(name, count = 1, interval = 0.1)

  // ASSERTIONS
  // ELEMENTS
  // assertElementStyleEquals(element,property(string),expectation,tolerance=1e-5)
  // assertElementHasClass(element, className)

  // OBJECTS
  // assertObjectPropertyEquals(object,property(string),expectation)

  // RAW VALUES
  // assertValueEquals(value, expectation, tolerance = 1e-5)

  // ***************
  // Testing Suite
  return _createClass(Tester, [{
    key: "setupTestSuite",
    value: function setupTestSuite() {
      var _this = this;
      this.test('Game progress', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var object, element, extractRelevantProperties, testValue1Properties, checkValue1Properties, key;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              extractRelevantProperties = function _extractRelevantPrope(training) {
                return {
                  maxLevel: training.maxLevel.toString(),
                  autoLevel: training.autoLevel.toString(),
                  manualLevel: training.manualLevel.toString(),
                  baseLevel: training.baseLevel.toString(),
                  level: training.level.toString(),
                  maxAffLvl: training.maxAffLvl.toString(),
                  nextAffordableMilestoneLevel: training.nextAffordableMilestoneLevel.toString(),
                  nextMilestoneLevel: training.nextMilestoneLevel.toString(),
                  nextMilestoneMult: training.nextMilestoneMult.toString(),
                  nextLevelIncrement: training.nextLevelIncrement.toString(),
                  costType: training.costType,
                  costGrowthRate: training.costGrowthRate.toString(),
                  costMultBase: training.costMultBase.toString(),
                  costMult: training.costMult.toString(),
                  costBase: training.costBase.toString(),
                  costNextMultPurchase: training.costNextMultPurchase.toString(),
                  prodType: training.prodType,
                  prodGrowthRate: training.prodGrowthRate.toString(),
                  prodMultBase: training.prodMultBase.toString(),
                  prodMult: training.prodMult.toString(),
                  // prodPrevious: training.prodPrevious.toString(),
                  prodBase: training.prodBase.toString(),
                  prodCurrentGlobal: training.prodCurrentGlobal.toString(),
                  // prodNextMultPurchase: training.prodNextMultPurchase.toString(),
                  prodNextSingle: training.prodNextSingle.toString() // Assuming calcProdNextSingle() updates this value correctly
                };
              };
              _context.next = 3;
              return _this.fullReset();
            case 3:
              _context.next = 5;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 5:
              object = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(object, 'level', 1);
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', 0.5);
              _context.next = 10;
              return _this.addCurrency('force', 1000);
            case 10:
              _context.next = 12;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 10);
            case 12:
              object = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(object, 'level', 11);
              element = _this.getTrainingButtonByFeatureMapping('fTrain2');
              _this.assertElementHasClass(element, 'enabled');
              element = _this.getTrainingButtonByFeatureMapping('fUpgrade1');
              _this.assertElementHasClass(element, 'enabled');
              _context.next = 20;
              return _this.addCurrency('force', 15000);
            case 20:
              _context.next = 22;
              return _this.purchaseTrainingByFeatureMapping('fTrain2', 10);
            case 22:
              object = _this.getObjectByFeatureMapping('fTrain2');
              _this.assertObjectPropertyEquals(object, 'level', 10);
              _context.next = 26;
              return _this.addCurrency('force', 300000000);
            case 26:
              _context.next = 28;
              return _this.purchaseTrainingByFeatureMapping('fTrain3', 10);
            case 28:
              object = _this.getObjectByFeatureMapping('fTrain3');
              _this.assertObjectPropertyEquals(object, 'level', 10);
              _context.next = 32;
              return _this.changeTab('achievements');
            case 32:
              object = _this.getObjectByFeatureMapping('achieve6240');
              _this.assertObjectPropertyEquals(object, 'isClaimed', false);
              _context.next = 36;
              return _this.claimAchievementByFeatureMapping('achieve6240');
            case 36:
              _this.assertObjectPropertyEquals(object, 'isClaimed', true);
              _this.assertObjectPropertyEquals(object, 'isClaimable', false);
              object = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(object, 'prodMult', 4.5);
              _this.assertObjectPropertyEquals(_this.gameContent, 'radiance', 10);
              _context.next = 43;
              return _this.changeTab('settings');
            case 43:
              _context.next = 45;
              return _this.clickElementById('#save');
            case 45:
              _context.next = 47;
              return _this.wait(0.5);
            case 47:
              _context.next = 49;
              return _this.clickElementById('#load');
            case 49:
              _context.next = 51;
              return _this.wait(1);
            case 51:
              _this.removeOfflineModal();
              _this.reAttachGameObjects();
              _context.next = 55;
              return _this.changeTab('training');
            case 55:
              _context.next = 57;
              return _this.clickElementById('#forceMultContainer [id="10Mult"]');
            case 57:
              _context.next = 59;
              return _this.addCurrency('force', 312312300000000);
            case 59:
              _context.next = 61;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 61:
              object = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(object, 'level', 21);
              _context.next = 65;
              return _this.clickElementById('#forceMultContainer [id="100Mult"]');
            case 65:
              _context.next = 67;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 67:
              object = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(object, 'level', 121);
              element = _this.getTrainingButtonByFeatureMapping('fTrain1');
              _this.assertElementHasClass(element, 'disabled');
              _context.next = 73;
              return _this.changeTab('exploration');
            case 73:
              object = _this.getObjectByFeatureMapping('zone1');
              element = _this.getZoneButtonByFeatureMapping('zone1');
              _context.next = 77;
              return _this.wait(1);
            case 77:
              _this.assertElementHasClass(element, 'enabled');
              _context.next = 80;
              return _this.wait(1);
            case 80:
              _this.assertObjectPropertyEquals(object, 'isConquesting', false);
              _context.next = 83;
              return _this.startZoneByFeatureMapping('zone1');
            case 83:
              _this.assertObjectPropertyEquals(object, 'isConquesting', true);
              _context.next = 86;
              return _this.wait(5);
            case 86:
              _this.assertObjectPropertyEquals(object, 'isDefeated', true);
              _this.assertElementHasClass(element, 'disabled');
              object = _this.getObjectByFeatureMapping('zone2');
              element = _this.getZoneButtonByFeatureMapping('zone2');
              _this.assertElementHasClass(element, 'enabled');
              _this.assertObjectPropertyEquals(object, 'isConquesting', false);
              _context.next = 94;
              return _this.startZoneByFeatureMapping('zone2');
            case 94:
              _context.next = 96;
              return _this.wait(3);
            case 96:
              _this.assertObjectPropertyEquals(object, 'isDefeated', true);
              _this.assertElementHasClass(element, 'disabled');
              _context.next = 100;
              return _this.changeTab('settings');
            case 100:
              testValue1Properties = extractRelevantProperties(_this.gameContent.trainings[0]);
              _context.next = 103;
              return _this.clickElementById('#save');
            case 103:
              _context.next = 105;
              return _this.wait(0.5);
            case 105:
              _context.next = 107;
              return _this.clickElementById('#load');
            case 107:
              _context.next = 109;
              return _this.wait(1);
            case 109:
              _this.removeOfflineModal();
              _this.reAttachGameObjects();
              _context.next = 113;
              return _this.wait(1);
            case 113:
              _context.next = 115;
              return _this.changeTab('training');
            case 115:
              checkValue1Properties = extractRelevantProperties(_this.gameContent.trainings[0]); // Compare the properties and log the differences
              for (key in testValue1Properties) {
                if (testValue1Properties[key] !== checkValue1Properties[key]) {
                  console.error("Mismatch found at ".concat(key, ": before ").concat(testValue1Properties[key], ", after ").concat(checkValue1Properties[key]));
                }
              }
            case 117:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));
      this.test('Test Training GrowthRate and costRates', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var object, element, prodNextExpected, costNextExpected, costNextExpectedTwo;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _this.fullReset();
            case 2:
              _context2.next = 4;
              return _this.addCurrency('force', 1000);
            case 4:
              _context2.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 6:
              object = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(object, 'level', 1);
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', 0.5);
              _context2.next = 11;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 11:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', (0, _decimal.DEC)(object.prodPrevious).plus((0, _decimal.DEC)(object.prodBase).times(object.prodGrowthRate)));
              _context2.next = 14;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 14:
              prodNextExpected = object.calculateProdN((0, _decimal.DEC)(3), (0, _decimal.DEC)(0));
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);

              // just check if value has been set correctly
              costNextExpected = object.calculateCostN(1);
              costNextExpectedTwo = object.calculateCostN(2).minus(costNextExpected);
              _this.assertObjectPropertyEquals(object, 'costNextMultPurchase', costNextExpected);
              _context2.next = 21;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 21:
              _this.assertObjectPropertyEquals(object, 'costNextMultPurchase', costNextExpectedTwo);
            case 22:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      })));
      this.test('Test Training prodNextSingle calculation', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var prodNextExpected, object;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _this.fullReset();
            case 2:
              _context3.next = 4;
              return _this.addCurrency('force', 1000);
            case 4:
              _context3.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 6:
              object = _this.getObjectByFeatureMapping('fTrain1');
              prodNextExpected = object.calcProdNextSingle().plus(object.prodCurrentGlobal);
              _context3.next = 10;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 10:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
              prodNextExpected = object.calcProdNextSingle().plus(object.prodCurrentGlobal);
              _context3.next = 14;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 14:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      })));
      this.test('Test Milestone Mults and calculateProdN', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var object, prodNextExpected;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _this.fullReset();
            case 2:
              _context4.next = 4;
              return _this.addCurrency('force', 1e20);
            case 4:
              _context4.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 9);
            case 6:
              object = _this.getObjectByFeatureMapping('fTrain1');
              prodNextExpected = object.calcProdNextSingle().plus(object.prodCurrentGlobal).times(2);
              _context4.next = 10;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 10:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
              prodNextExpected = object.calculateProdN((0, _decimal.DEC)(24), (0, _decimal.DEC)(0));
              _context4.next = 14;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 14);
            case 14:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
              prodNextExpected = prodNextExpected.plus(object.calcProdNextSingle()).times(4);
              _context4.next = 18;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 1);
            case 18:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
            case 19:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      })));
      this.test('Force Upgrade Testing', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var object, prodNextExpected, costNextExpected;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return _this.fullReset();
            case 2:
              _context5.next = 4;
              return _this.addCurrency('force', 1e40);
            case 4:
              object = _this.getObjectByFeatureMapping('fTrain1');
              prodNextExpected = object.calculateProdN((0, _decimal.DEC)(10), (0, _decimal.DEC)(0)).times(2);
              _context5.next = 8;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 10);
            case 8:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
              _context5.next = 11;
              return _this.purchaseTrainingByFeatureMapping('fTrain2', 10);
            case 11:
              _context5.next = 13;
              return _this.purchaseTrainingByFeatureMapping('fTrain3', 10);
            case 13:
              _context5.next = 15;
              return _this.purchaseTrainingByFeatureMapping('fTrain4', 10);
            case 15:
              object = _this.getObjectByFeatureMapping('fTrain5');
              prodNextExpected = object.calculateProdN((0, _decimal.DEC)(10), (0, _decimal.DEC)(0)).times(2);
              _context5.next = 19;
              return _this.purchaseTrainingByFeatureMapping('fTrain5', 10);
            case 19:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);

              //prodmult mult upgrade
              object = _this.getObjectByFeatureMapping('fTrain1');
              prodNextExpected = object.prodCurrentGlobal.times(11);
              _context5.next = 24;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade1', 10);
            case 24:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);
              _context5.next = 27;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade2', 10);
            case 27:
              //costmult div upgrade
              object = _this.getObjectByFeatureMapping('fTrain3');
              costNextExpected = object.costNextMultPurchase.div(1.05 + 9);
              _context5.next = 31;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade3', 10);
            case 31:
              _this.assertObjectPropertyEquals(object, 'costNextMultPurchase', costNextExpected);
              _context5.next = 34;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade4', 10);
            case 34:
              _context5.next = 36;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade5', 10);
            case 36:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      })));
      this.test('Test Forge Basic Mult Upgrades', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var object, prodNextExpected, costNextExpected;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _this.fullReset();
            case 2:
              _context6.next = 4;
              return _this.addCurrency('force', 1e40);
            case 4:
              _context6.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 10);
            case 6:
              _context6.next = 8;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade1', 10);
            case 8:
              _context6.next = 10;
              return _this.changeTab('forge');
            case 10:
              // prod * 5
              object = _this.getObjectByFeatureMapping('fTrain1');
              prodNextExpected = object.prodCurrentGlobal.times(5);
              _context6.next = 14;
              return _this.purchaseForgeByFeatureMapping('forgeForce1', 1);
            case 14:
              _this.assertObjectPropertyEquals(object, 'prodCurrentGlobal', prodNextExpected);

              //power level boost contribution by 10x
              object = _this.gameContent;
              _context6.next = 18;
              return _this.purchaseForgeByFeatureMapping('forgeForce3', 1);
            case 18:
              _this.assertObjectPropertyEquals(object, 'forcePowerLevelMultiplier', 10);

              // cost / 2
              object = _this.getObjectByFeatureMapping('fTrain1');
              costNextExpected = object.costNextMultPurchase.div(2);
              _context6.next = 23;
              return _this.purchaseForgeByFeatureMapping('forgeForce4', 1);
            case 23:
              _this.assertObjectPropertyEquals(object, 'costNextSingle', costNextExpected);

              // just checking this returns the same value
              costNextExpected = object.calculateCostN(1);
              _this.assertObjectPropertyEquals(object, 'costNextSingle', costNextExpected);
            case 26:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      })));
      this.test('Test Crystal Add Percentage Upgrades', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        var forgeObject, trainObject, expectedNewForceIncome;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return _this.fullReset();
            case 2:
              _context7.next = 4;
              return _this.addCurrency('force', 1e40);
            case 4:
              _context7.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 10);
            case 6:
              _context7.next = 8;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade1', 10);
            case 8:
              _context7.next = 10;
              return _this.addCurrency('crystal', 1e40);
            case 10:
              _context7.next = 12;
              return _this.addCurrency('wisdom', 1e10);
            case 12:
              _context7.next = 14;
              return _this.changeTab('settings');
            case 14:
              _context7.next = 16;
              return _this.clickElementById('#adminButton8', 5, 0.2);
            case 16:
              _context7.next = 18;
              return _this.clickElementById('#adminButton9', 5, 0.2);
            case 18:
              _context7.next = 20;
              return _this.changeTab('forge');
            case 20:
              trainObject = _this.getObjectByFeatureMapping('fTrain1');
              expectedNewForceIncome = trainObject.prodCurrentGlobal.times(1.25);
              forgeObject = _this.getObjectByFeatureMapping('forgeCrystalAllTrainProd25%');
              _context7.next = 25;
              return _this.purchaseForgeByFeatureMapping('forgeCrystalAllTrainProd25%', 1);
            case 25:
              _this.assertValueEquals(_this.gameContent.forceIncome, expectedNewForceIncome);
            case 26:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      })));
      this.test('Test Crystal Subtract Percentage Upgrades', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var forgeObject, trainObject, expectedCostNextSingle;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this.fullReset();
            case 2:
              _context8.next = 4;
              return _this.addCurrency('force', 1e40);
            case 4:
              _context8.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 10);
            case 6:
              _context8.next = 8;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade1', 10);
            case 8:
              _context8.next = 10;
              return _this.addCurrency('crystal', 1e40);
            case 10:
              _context8.next = 12;
              return _this.addCurrency('wisdom', 1e10);
            case 12:
              _context8.next = 14;
              return _this.changeTab('settings');
            case 14:
              _context8.next = 16;
              return _this.clickElementById('#adminButton8', 5, 0.2);
            case 16:
              _context8.next = 18;
              return _this.clickElementById('#adminButton9', 5, 0.2);
            case 18:
              _context8.next = 20;
              return _this.changeTab('forge');
            case 20:
              trainObject = _this.getObjectByFeatureMapping('fTrain1');
              expectedCostNextSingle = trainObject.costNextSingle.times(0.75).div(2);
              forgeObject = _this.getObjectByFeatureMapping('forgeCrystalAllTrainCostMinus25%');
              _context8.next = 25;
              return _this.purchaseForgeByFeatureMapping('forgeCrystalAllTrainCostMinus25%', 1);
            case 25:
              _this.assertValueEquals(trainObject.costNextSingle, expectedCostNextSingle);
            case 26:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      })));
      this.test('Test Essence Upgrades', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        var trainingObject, zoneObject, element, zoneProdMultExpected;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return _this.fullReset();
            case 2:
              _this.gameContent.powerLevel = (0, _decimal.DEC)(1e80);
              _context9.next = 5;
              return _this.changeTab('essence');
            case 5:
              _context9.next = 7;
              return _this.clickElementById('#rebirth1Button', 1);
            case 7:
              //rebirth
              _this.reAttachGameObjects();
              _context9.next = 10;
              return _this.changeTab('essence');
            case 10:
              zoneObject = _this.getObjectByFeatureMapping('zone1');
              zoneProdMultExpected = zoneObject.prodMult.times(2);
              _context9.next = 14;
              return _this.purchaseEssenceUpgradeByFeatureMapping('essence1BoostForceMult');
            case 14:
              _context9.next = 16;
              return _this.purchaseEssenceUpgradeByFeatureMapping('essenceBoostZoneProd');
            case 16:
              _context9.next = 18;
              return _this.purchaseEssenceUpgradeByFeatureMapping('essenceUnlockSkills');
            case 18:
              _context9.next = 20;
              return _this.purchaseEssenceUpgradeByFeatureMapping('essenceBoostBaseSkillpoints');
            case 20:
              _context9.next = 22;
              return _this.purchaseEssenceUpgradeByFeatureMapping('essenceBoostTrain1BaseLevel');
            case 22:
              _context9.next = 24;
              return _this.purchaseEssenceUpgradeByFeatureMapping('essenceReduceArtifactCosts');
            case 24:
              trainingObject = _this.getObjectByFeatureMapping('fTrain1');
              _this.assertObjectPropertyEquals(trainingObject, 'level', 10);
              _this.assertObjectPropertyEquals(trainingObject, 'baseLevel', 10);
              _this.assertObjectPropertyEquals(trainingObject, 'autoLevel', 0);
              _this.assertObjectPropertyEquals(trainingObject, 'manualLevel', 10);
              _context9.next = 31;
              return _this.clickElementById('#adminButton1', 1);
            case 31:
              //ftrain/up x 40 - to unlock exploration

              _this.assertObjectPropertyEquals(zoneObject, 'prodMult', zoneProdMultExpected);
              _context9.next = 34;
              return _this.changeTab('settings');
            case 34:
              _context9.next = 36;
              return _this.clickElementById('#save');
            case 36:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      })));
      this.test('Test MinHeap node order', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var automationManager, forgeObject, forceHeap, i, currentNode, leftChildIndex, rightChildIndex, leftChild, rightChild;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return _this.fullReset();
            case 2:
              automationManager = _this.gameManager.automationManager;
              _context10.next = 5;
              return _this.addCurrency('crystal', 1e40);
            case 5:
              forgeObject = _this.getObjectByFeatureMapping('forgeForceTrainAutobuy');
              _context10.next = 8;
              return _this.purchaseForgeByFeatureMapping('forgeForceTrainAutobuy', 1);
            case 8:
              _context10.next = 10;
              return _this.wait(1);
            case 10:
              _context10.next = 12;
              return _this.addCurrency('force', 1e10);
            case 12:
              _context10.next = 14;
              return _this.wait(1);
            case 14:
              // Get the current state of the forceHeap
              forceHeap = automationManager.forceHeap; // Verify that the nodes in the forceHeap are in the correct order
              for (i = 0; i < forceHeap.heap.length; i++) {
                currentNode = forceHeap.heap[i];
                leftChildIndex = forceHeap.getLeftChildIndex(i);
                rightChildIndex = forceHeap.getRightChildIndex(i); // Check if left child exists and compare its costNextSingle with the current node
                if (leftChildIndex < forceHeap.heap.length) {
                  leftChild = forceHeap.heap[leftChildIndex];
                  _this.assert(currentNode.costNextSingle.lte(leftChild.costNextSingle), "Node at index ".concat(i, " should have a lower or equal costNextSingle than its left child"));
                }

                // Check if right child exists and compare its costNextSingle with the current node
                if (rightChildIndex < forceHeap.heap.length) {
                  rightChild = forceHeap.heap[rightChildIndex];
                  _this.assert(currentNode.costNextSingle.lte(rightChild.costNextSingle), "Node at index ".concat(i, " should have a lower or equal costNextSingle than its right child"));
                }
              }

              // Add more force currency to trigger further autobuy
              _context10.next = 18;
              return _this.addCurrency('force', 1e20);
            case 18:
              _context10.next = 20;
              return _this.wait(1);
            case 20:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      })));
      this.test('Test Crystal Synergy/Unspent Currency Mult Upgrades', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var forgeObject, trainObject, element, prodCurrentGlobal, currentWisdom, expectedForceSynergyMult, expectedNewForceIncome;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              _context11.next = 2;
              return _this.fullReset();
            case 2:
              _context11.next = 4;
              return _this.addCurrency('force', 1e40);
            case 4:
              _context11.next = 6;
              return _this.purchaseTrainingByFeatureMapping('fTrain1', 10);
            case 6:
              _context11.next = 8;
              return _this.purchaseTrainingByFeatureMapping('fUpgrade1', 10);
            case 8:
              _context11.next = 10;
              return _this.addCurrency('crystal', 1e40);
            case 10:
              _context11.next = 12;
              return _this.addCurrency('wisdom', 1e10);
            case 12:
              _context11.next = 14;
              return _this.changeTab('settings');
            case 14:
              _context11.next = 16;
              return _this.clickElementById('#adminButton8', 5, 0.2);
            case 16:
              _context11.next = 18;
              return _this.clickElementById('#adminButton9', 5, 0.2);
            case 18:
              _context11.next = 20;
              return _this.changeTab('forge');
            case 20:
              //unspent wisdom = force income - increase force prod by 1e-7 * current unspent wisdom
              trainObject = _this.getObjectByFeatureMapping('fTrain1');
              prodCurrentGlobal = trainObject.prodCurrentGlobal;
              currentWisdom = _this.gameContent.wisdom;
              expectedForceSynergyMult = currentWisdom.times(1e-7);
              expectedNewForceIncome = prodCurrentGlobal;
              forgeObject = _this.getObjectByFeatureMapping('forgeCrystalUnspentWisdomToForce');
              _context11.next = 28;
              return _this.purchaseForgeByFeatureMapping('forgeCrystalUnspentWisdomToForce', 1);
            case 28:
              _context11.next = 30;
              return _this.wait(1);
            case 30:
              _this.assertValueEquals(expectedForceSynergyMult, _this.gameContent.forceSynergyMult);
              _context11.next = 33;
              return _this.wait(1);
            case 33:
              _this.assertValueEquals(_this.gameContent.forceIncome, trainObject.prodCurrentGlobal);
            case 34:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      })));
      this.test('Test Achievement Set Bonuses', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        var object, element;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return _this.fullReset();
            case 2:
              _context12.next = 4;
              return _this.addCurrency('force', 1e40);
            case 4:
              _context12.next = 6;
              return _this.claimAchievementByFeatureMapping('achieve6240', 1);
            case 6:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      })));

      // this.test('Test asasdfdf', async () => {
      // 	let object, element;
      // 	await this.fullReset();

      // await this.addCurrency('force', 1e40);
      // });
    }
    // Testing Suite
    // ***************

    // ***************
    // Action Functions
  }, {
    key: "purchaseTrainingByFeatureMapping",
    value: function () {
      var _purchaseTrainingByFeatureMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(name) {
        var count,
          interval,
          element,
          _args13 = arguments;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              count = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : 1;
              interval = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : 0.1;
              element = this.getTrainingButtonByFeatureMapping(name);
              _context13.next = 5;
              return this.clickElement(element, count, interval);
            case 5:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function purchaseTrainingByFeatureMapping(_x) {
        return _purchaseTrainingByFeatureMapping.apply(this, arguments);
      }
      return purchaseTrainingByFeatureMapping;
    }()
  }, {
    key: "purchaseForgeByFeatureMapping",
    value: function () {
      var _purchaseForgeByFeatureMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(name) {
        var count,
          interval,
          element,
          _args14 = arguments;
        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              count = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : 1;
              interval = _args14.length > 2 && _args14[2] !== undefined ? _args14[2] : 0.1;
              element = this.getForgeButtonByFeatureMapping(name);
              _context14.next = 5;
              return this.clickElement(element, count, interval);
            case 5:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function purchaseForgeByFeatureMapping(_x2) {
        return _purchaseForgeByFeatureMapping.apply(this, arguments);
      }
      return purchaseForgeByFeatureMapping;
    }()
  }, {
    key: "claimAchievementByFeatureMapping",
    value: function () {
      var _claimAchievementByFeatureMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(name) {
        var count,
          interval,
          element,
          _args15 = arguments;
        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              count = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : 1;
              interval = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : 0.1;
              element = this.getAchievementButtonByFeatureMapping(name);
              _context15.next = 5;
              return this.clickElement(element, count, interval);
            case 5:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this);
      }));
      function claimAchievementByFeatureMapping(_x3) {
        return _claimAchievementByFeatureMapping.apply(this, arguments);
      }
      return claimAchievementByFeatureMapping;
    }()
  }, {
    key: "startZoneByFeatureMapping",
    value: function () {
      var _startZoneByFeatureMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(name) {
        var count,
          interval,
          element,
          _args16 = arguments;
        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              count = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : 1;
              interval = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : 0.1;
              element = this.getZoneButtonByFeatureMapping(name);
              _context16.next = 5;
              return this.clickElement(element, count, interval);
            case 5:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function startZoneByFeatureMapping(_x4) {
        return _startZoneByFeatureMapping.apply(this, arguments);
      }
      return startZoneByFeatureMapping;
    }()
  }, {
    key: "purchaseEssenceUpgradeByFeatureMapping",
    value: function () {
      var _purchaseEssenceUpgradeByFeatureMapping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(name) {
        var count,
          interval,
          element,
          _args17 = arguments;
        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) switch (_context17.prev = _context17.next) {
            case 0:
              count = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : 1;
              interval = _args17.length > 2 && _args17[2] !== undefined ? _args17[2] : 0.1;
              element = this.getEssenceButtonByFeatureMapping(name);
              _context17.next = 5;
              return this.clickElement(element, count, interval);
            case 5:
            case "end":
              return _context17.stop();
          }
        }, _callee17, this);
      }));
      function purchaseEssenceUpgradeByFeatureMapping(_x5) {
        return _purchaseEssenceUpgradeByFeatureMapping.apply(this, arguments);
      }
      return purchaseEssenceUpgradeByFeatureMapping;
    }()
  }, {
    key: "addCurrency",
    value: function () {
      var _addCurrency = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(currencyType, value) {
        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) switch (_context18.prev = _context18.next) {
            case 0:
              this.gameContent[currencyType] = this.gameContent[currencyType].plus((0, _decimal.DEC)(value));
              _context18.next = 3;
              return this.wait(0.1);
            case 3:
            case "end":
              return _context18.stop();
          }
        }, _callee18, this);
      }));
      function addCurrency(_x6, _x7) {
        return _addCurrency.apply(this, arguments);
      }
      return addCurrency;
    }()
  }, {
    key: "changeTab",
    value: function () {
      var _changeTab = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(tabName) {
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) switch (_context19.prev = _context19.next) {
            case 0:
              _context19.next = 2;
              return this.wait(0.1);
            case 2:
              this.tabManager.changeTab(tabName);
            case 3:
            case "end":
              return _context19.stop();
          }
        }, _callee19, this);
      }));
      function changeTab(_x8) {
        return _changeTab.apply(this, arguments);
      }
      return changeTab;
    }()
  }, {
    key: "clickElementById",
    value: function () {
      var _clickElementById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(id) {
        var count,
          interval,
          element,
          _args20 = arguments;
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) switch (_context20.prev = _context20.next) {
            case 0:
              count = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : 1;
              interval = _args20.length > 2 && _args20[2] !== undefined ? _args20[2] : 0.1;
              element = this.getElementBySelector(id);
              _context20.next = 5;
              return this.clickElement(element, count, interval);
            case 5:
            case "end":
              return _context20.stop();
          }
        }, _callee20, this);
      }));
      function clickElementById(_x9) {
        return _clickElementById.apply(this, arguments);
      }
      return clickElementById;
    }()
  }, {
    key: "clickElement",
    value: function () {
      var _clickElement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(element) {
        var count,
          interval,
          i,
          _args21 = arguments;
        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) switch (_context21.prev = _context21.next) {
            case 0:
              count = _args21.length > 1 && _args21[1] !== undefined ? _args21[1] : 1;
              interval = _args21.length > 2 && _args21[2] !== undefined ? _args21[2] : 0.1;
              _context21.next = 4;
              return this.wait(interval);
            case 4:
              i = 0;
            case 5:
              if (!(i < count)) {
                _context21.next = 12;
                break;
              }
              element.click();
              _context21.next = 9;
              return this.wait(interval);
            case 9:
              i++;
              _context21.next = 5;
              break;
            case 12:
              _context21.next = 14;
              return this.wait(interval);
            case 14:
            case "end":
              return _context21.stop();
          }
        }, _callee21, this);
      }));
      function clickElement(_x10) {
        return _clickElement.apply(this, arguments);
      }
      return clickElement;
    }()
  }, {
    key: "fullReset",
    value: function () {
      var _fullReset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
        return _regeneratorRuntime().wrap(function _callee22$(_context22) {
          while (1) switch (_context22.prev = _context22.next) {
            case 0:
              _context22.next = 2;
              return this.changeTab('settings');
            case 2:
              this.removeOfflineModal();
              _context22.next = 5;
              return this.clickElementById('#adminButton31');
            case 5:
              _context22.next = 7;
              return this.wait(1);
            case 7:
              this.reAttachGameObjects();
            case 8:
            case "end":
              return _context22.stop();
          }
        }, _callee22, this);
      }));
      function fullReset() {
        return _fullReset.apply(this, arguments);
      }
      return fullReset;
    }()
  }, {
    key: "removeOfflineModal",
    value: function removeOfflineModal() {
      var modal = document.getElementById("myModal");
      if (modal) {
        modal.style.display = "none";
      }
    }
  }, {
    key: "reAttachGameObjects",
    value: function reAttachGameObjects() {
      this.gameManager = this.game.gameManager;
      this.gameContent = this.game.gameManager.gameContent;
      this.eventManager = this.game.eventManager;
      this.ui = this.game.ui;
      this.tabManager = this.game.ui.tabManager;
    }
  }, {
    key: "wait",
    value: function wait(seconds) {
      return new Promise(function (resolve) {
        setTimeout(resolve, seconds * 1000);
      });
    }

    // Action Functions
    // ***************

    // ***************
    // Getter Functions
  }, {
    key: "getTrainingButtonByFeatureMapping",
    value: function getTrainingButtonByFeatureMapping(name) {
      var id = this.featureMapping[name];
      var buttonId = "#button-".concat(id);
      var element = this.getElementBySelector(buttonId);
      return element;
    }
  }, {
    key: "getForgeButtonByFeatureMapping",
    value: function getForgeButtonByFeatureMapping(name) {
      var id = this.featureMapping[name];
      var buttonId = "#button-".concat(id);
      var element = this.getElementBySelector(buttonId);
      return element;
    }
  }, {
    key: "getAchievementButtonByFeatureMapping",
    value: function getAchievementButtonByFeatureMapping(name) {
      var id = this.featureMapping[name];
      var buttonId = "#achievement-".concat(id);
      var element = this.getElementBySelector(buttonId);
      return element;
    }
  }, {
    key: "getZoneButtonByFeatureMapping",
    value: function getZoneButtonByFeatureMapping(name) {
      var id = this.featureMapping[name];
      var buttonId = "#conquest-button-".concat(id);
      var element = this.getElementBySelector(buttonId);
      return element;
    }
  }, {
    key: "getEssenceButtonByFeatureMapping",
    value: function getEssenceButtonByFeatureMapping(name) {
      var id = this.featureMapping[name];
      var buttonId = "#eUpgrade-".concat(id);
      var element = this.getElementBySelector(buttonId);
      return element;
    }
  }, {
    key: "getObjectByFeatureMapping",
    value: function getObjectByFeatureMapping(name) {
      var id = this.featureMapping[name];
      var object = this.getObjectById(id);
      return object;
    }
  }, {
    key: "getObjectById",
    value: function getObjectById(id) {
      return this.gameManager.findObjectById(id);
    }
  }, {
    key: "getElementBySelector",
    value: function getElementBySelector(selector) {
      return document.querySelector(selector);
    }

    // Getter Functions
    // ***************

    // ***************
    // Assertion Functions
  }, {
    key: "assertElementStyleEquals",
    value: function assertElementStyleEquals(element, property, expectation) {
      try {
        var value;
        if (property in element.style) {
          value = element.style[property];
        } else {
          value = window.getComputedStyle(element)[property];
        }
        this.assert(value === expectation, "Expected ".concat(property, " to be ").concat(expectation, ", but got ").concat(value));
        this.logTestResult(true, "".concat(property, " is ").concat(expectation));
      } catch (error) {
        this.logTestResult(false, error.message);
      }
    }
  }, {
    key: "assertValueEquals",
    value: function assertValueEquals(value, expectation) {
      var tolerance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-5;
      try {
        var isEqual;
        if (_typeof(value) === 'object' && value !== null && 'eq' in value) {
          // If the value is a Decimal object, use the 'sub' method to check if the difference is within the tolerance
          var difference = value.sub(expectation).abs();
          isEqual = difference.lte(tolerance);
        } else if (typeof value === 'number' && typeof expectation === 'number') {
          // If both value and expectation are numbers, use strict equality comparison
          isEqual = value === expectation;
        } else {
          // For all other cases (including strings), use strict equality comparison
          isEqual = value === expectation;
        }
        this.assert(isEqual, "Expected ".concat(value, " to be ").concat(expectation, ", but got ").concat(value));
        this.logTestResult(true, "".concat(value, " is ").concat(expectation));
      } catch (error) {
        this.logTestResult(false, error.message);
      }
    }
  }, {
    key: "assertObjectPropertyEquals",
    value: function assertObjectPropertyEquals(object, property, expectation) {
      var tolerance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e-5;
      try {
        var value = object[property];
        var isEqual;
        if (_typeof(value) === 'object' && value !== null && 'eq' in value) {
          // If the value is a Decimal object, use the 'sub' method to check if the difference is within the tolerance
          var difference = value.sub(expectation).abs();
          isEqual = difference.lte(tolerance);
        } else if (typeof value === 'number' && typeof expectation === 'number') {
          // If both value and expectation are numbers, use strict equality comparison
          isEqual = value === expectation;
        } else {
          // For all other cases (including strings), use strict equality comparison
          isEqual = value === expectation;
        }
        this.assert(isEqual, "Expected ".concat(property, " to be ").concat(expectation, ", but got ").concat(value));
        this.logTestResult(true, "".concat(property, " is ").concat(expectation));
      } catch (error) {
        this.logTestResult(false, error.message);
      }
    }
  }, {
    key: "assertElementHasClass",
    value: function assertElementHasClass(element, expectedClassName) {
      try {
        var hasClass = element.classList.contains(expectedClassName);
        this.assert(hasClass, "Expected element to have class \"".concat(expectedClassName, "\""));
        this.logTestResult(true, "Element has class \"".concat(expectedClassName, "\""));
      } catch (error) {
        var actualClassList = element.classList.value;
        this.logTestResult(false, "".concat(error.message, ", found class(es): \"").concat(actualClassList, "\""));
      }
    }

    // Assertion Functions
    // ******************

    // ******************
    // Testing Helper Functions
  }, {
    key: "setupAndRunTestSuite",
    value: function setupAndRunTestSuite() {
      this.setupTestSuite();
      this.runTestSuite();
    }
  }, {
    key: "runTestSuite",
    value: function () {
      var _runTestSuite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
        var testName;
        return _regeneratorRuntime().wrap(function _callee23$(_context23) {
          while (1) switch (_context23.prev = _context23.next) {
            case 0:
              _context23.t0 = _regeneratorRuntime().keys(this.testSuite);
            case 1:
              if ((_context23.t1 = _context23.t0()).done) {
                _context23.next = 15;
                break;
              }
              testName = _context23.t1.value;
              this.currentTest = testName;
              _context23.prev = 4;
              _context23.next = 7;
              return this.testSuite[testName]();
            case 7:
              _context23.next = 13;
              break;
            case 9:
              _context23.prev = 9;
              _context23.t2 = _context23["catch"](4);
              this.logTestResult(false, _context23.t2.message);
              this.logError(_context23.t2);
            case 13:
              _context23.next = 1;
              break;
            case 15:
              this.printCondensedTestResults();
              this.printTestSummary();
            case 17:
            case "end":
              return _context23.stop();
          }
        }, _callee23, this, [[4, 9]]);
      }));
      function runTestSuite() {
        return _runTestSuite.apply(this, arguments);
      }
      return runTestSuite;
    }()
  }, {
    key: "test",
    value: function test(description, testFunction) {
      this.testSuite[description] = testFunction;
    }
  }, {
    key: "logTestResult",
    value: function logTestResult(result, message) {
      var status = result ? 'PASS' : 'FAIL';
      console.log("[".concat(status, "] ").concat(this.currentTest, ": ").concat(message));
      if (result) {
        this.passCount++;
      } else {
        this.failCount++;
      }

      // Update test result counters
      if (!this.testResults[this.currentTest]) {
        this.testResults[this.currentTest] = {
          totalAssertions: 0,
          failedAssertions: 0
        };
      }
      this.testResults[this.currentTest].totalAssertions++;
      if (!result) {
        this.testResults[this.currentTest].failedAssertions++;
      }
    }
  }, {
    key: "printCondensedTestResults",
    value: function printCondensedTestResults() {
      console.log('');
      console.log('Condensed Test Results:');
      for (var testName in this.testResults) {
        var testResult = this.testResults[testName];
        var totalAssertions = testResult.totalAssertions;
        var failedAssertions = testResult.failedAssertions;
        var passedAssertions = totalAssertions - failedAssertions;
        var percentage = (passedAssertions / totalAssertions * 100).toFixed(2);
        console.log("Test: ".concat(testName, ", Passed: ").concat(passedAssertions, "/").concat(totalAssertions, " - ").concat(percentage, "%"));
      }
    }
  }, {
    key: "printTestSummary",
    value: function printTestSummary() {
      var totalTests = this.passCount + this.failCount;
      var passPercentage = (this.passCount / totalTests * 100).toFixed(2);
      console.log('');
      console.log('Test Suite Summary:');
      console.log("Total Tests: ".concat(totalTests));
      console.log("Passed: ".concat(this.passCount));
      console.log("Failed: ".concat(this.failCount));
      console.log("Pass Percentage: ".concat(passPercentage, "%"));
    }

    // assert(condition, message) {
    // 	if (!condition) {
    // 	  throw new Error(message);
    // 	}
    // }
  }, {
    key: "assert",
    value: function assert(condition, message) {
      if (condition) {
        console.log("[PASS] ".concat(message));
      } else {
        throw new Error("[FAIL] ".concat(message));
      }
    }
  }, {
    key: "logError",
    value: function logError(error) {
      console.error("[ERROR] ".concat(this.currentTest, ": ").concat(error.message));
      console.error(error.stack);
    }
  }, {
    key: "logCurrentTime",
    value: function logCurrentTime() {
      var currentTime = new Date();
      console.log('Current time:', currentTime.toLocaleString());
    }
  }, {
    key: "startTimer",
    value: function startTimer() {
      this.startTime = new Date();
      console.log('Timer started at:', this.startTime.toLocaleString());
    }
  }, {
    key: "endTimer",
    value: function endTimer() {
      this.endTime = new Date();
      console.log('Timer ended at:', this.endTime.toLocaleString());
    }
  }, {
    key: "calculateTimeDifference",
    value: function calculateTimeDifference() {
      if (this.startTime && this.endTime) {
        var timeDiff = this.endTime - this.startTime;
        var seconds = Math.floor(timeDiff / 1000);
        var milliseconds = timeDiff % 1000;
        console.log("Time difference: ".concat(seconds, " seconds ").concat(milliseconds, " milliseconds"));
        return timeDiff;
      } else {
        console.log('Start time or end time is missing.');
        return null;
      }
    }

    // Testing Helper Functions
    // ******************
  }]);
}();
},{"../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js","../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Core/ModTreeNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var ModTreeNode = exports.default = /*#__PURE__*/_createClass(function ModTreeNode(ref, parentTree) {
  _classCallCheck(this, ModTreeNode);
  this.ref = ref;
  this.priority = ref.priority;
  this.result = (0, _decimal.DEC)(0);
  this.runningResult = (0, _decimal.DEC)(0);
  this.parentTree = parentTree;
  this.previousNode = null;
  this.nextNode = null;
});
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Core/ModTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
var _ModTreeNode = _interopRequireDefault(require("./ModTreeNode.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ModTree = exports.default = /*#__PURE__*/function () {
  function ModTree(parent, type) {
    _classCallCheck(this, ModTree);
    this.nodes = [];
    this.parent = parent;
    this.type = type;
    this.currentRunningResult = (0, _decimal.DEC)(0);
  }
  return _createClass(ModTree, [{
    key: "buildTree",
    value: function buildTree() {
      // console.error("running buildtree for",this.parent.name);
      var firstActiveNode = this.setFirstActiveNode();
      if (!firstActiveNode) {
        // console.log("!firstActiveNode");
        if (this.type === "cost") {
          // console.log("cost");
          this.parent.costMult = this.parent.costMultBase;
        } else if (this.type === "production") {
          // console.log("prod");
          this.parent.prodMult = this.parent.prodMultBase;
        }
        return;
      } else {
        // console.log("updateDownStream");
        this.updateDownstreamNodes(firstActiveNode);
      }
      if (this.type === "cost") {
        this.parent.costMult = this.currentRunningResult;
      } else if (this.type === "production") {
        this.parent.prodMult = this.currentRunningResult;
      }

      // console.log("endBuildTree");
    }
  }, {
    key: "setFirstActiveNode",
    value: function setFirstActiveNode() {
      var currentNode = this.nodes[0];
      var baseMult = (0, _decimal.DEC)(0);
      if (this.type === "cost") {
        baseMult = this.parent.costMultBase;
      } else if (this.type === "production") {
        baseMult = this.parent.prodMultBase;
      }
      while (currentNode) {
        if (currentNode.ref.active && currentNode.ref.source.level.gt(0)) {
          currentNode.result = this.calcNodeResult(currentNode, currentNode.ref.source.level);
          currentNode.runningResult = this.calcNodeRunningResult(currentNode, baseMult);
          return currentNode;
        }
        currentNode = currentNode.nextNode;
      }
      return null;
    }
  }, {
    key: "updateDownstreamNodes",
    value: function updateDownstreamNodes(firstActiveNode) {
      var currentNode = firstActiveNode.nextNode;
      var lastActiveNode = firstActiveNode;
      while (currentNode) {
        if (currentNode.ref.active && currentNode.ref.source.level.gt(0)) {
          currentNode.result = this.calcNodeResult(currentNode, currentNode.ref.source.level);
          currentNode.runningResult = this.calcNodeRunningResult(currentNode, lastActiveNode.runningResult);
          lastActiveNode = currentNode;
        }
        currentNode = currentNode.nextNode;
      }
      this.currentRunningResult = lastActiveNode.runningResult;
    }
  }, {
    key: "calcNodeResult",
    value: function calcNodeResult(node, sourceLevel) {
      var calcType = node.ref.sourceCalcType;
      var nodeValue = (0, _decimal.DEC)(node.ref.value);
      sourceLevel = (0, _decimal.DEC)(sourceLevel);

      //for some reason i wanted to bypass the rest of the operations below if these conditions are met
      if (this.parent.featureType === "zone" && calcType === 'mult') {
        return this.performCalculation(calcType, nodeValue, sourceLevel);
      }
      if (node.ref.sourceCalcType === 'add' && this.type === "production") {
        sourceLevel = sourceLevel.minus(1);
      }
      if (node.ref.sourceCalcType === 'add' && this.type === "cost") {
        sourceLevel = sourceLevel.minus(1);
      }
      if (sourceLevel.eq(0)) {
        if (node.ref.sourceCalcType === 'sub') {
          sourceLevel = (0, _decimal.DEC)(0);
        } else if (node.ref.sourceCalcType === 'exp') {
          sourceLevel = (0, _decimal.DEC)(1);
        }
      }

      // if (node.ref.source.id === 10415 && this.parent.id === 1001){
      // 	console.error(node);
      // 	console.error(this.performCalculation(calcType,nodeValue,sourceLevel));
      // 	console.error("runResult:",this.currentRunningResult);
      // }

      return this.performCalculation(calcType, nodeValue, sourceLevel);
    }
  }, {
    key: "calcNodeRunningResult",
    value: function calcNodeRunningResult(node, prevRunningResult) {
      var res = (0, _decimal.DEC)(node.result);
      var prevRes = (0, _decimal.DEC)(prevRunningResult);

      // if (node.ref.source.id === 10415 && this.parent.id === 1001){
      // 	console.error(node);
      // 	console.error("runResult:",this.currentRunningResult);
      // 	console.error(this.performCalculation(node.ref.runningCalcType,res,prevRes));
      // }

      return this.performCalculation(node.ref.runningCalcType, res, prevRes);
    }
  }, {
    key: "performCalculation",
    value: function performCalculation(type, val1, val2) {
      var CALCULATION_TYPES = {
        'add': function add(val1, val2) {
          return val1.plus(val2);
        },
        'sub': function sub(val1, val2) {
          return val2.minus(val1);
        },
        'mult': function mult(val1, val2) {
          return val1.times(val2);
        },
        'div': function div(val1, val2) {
          return val2.dividedBy(val1);
        },
        'addPercent': function addPercent(val1, val2) {
          return val1.times(val2);
        },
        'subPercent': function subPercent(val1, val2) {
          return val2.times(val1);
        },
        'exp': function exp(val1, val2) {
          return val2.pow(val1);
        },
        'tetra': function tetra(val1, val2) {
          return val2.tetrate(val1);
        },
        'log': function log(val1, val2) {
          return val2.eq(0) ? (0, _decimal.DEC)(0) : val2.log((0, _decimal.DEC)(val1));
        }
      };
      var calculation = CALCULATION_TYPES[type];
      if (!calculation) {
        throw new Error('Unknown calculation type: ' + type);
      }
      return calculation(val1, val2);
    }
  }, {
    key: "addNode",
    value: function addNode(mod) {
      var newNode = new _ModTreeNode.default(mod, this);
      var insertIndex = this.nodes.length;
      for (var i = 0; i < this.nodes.length; i++) {
        if (this.nodes[i].priority > newNode.priority) {
          insertIndex = i;
          break;
        }
      }
      this.nodes.splice(insertIndex, 0, newNode);
      if (insertIndex > 0) {
        newNode.previousNode = this.nodes[insertIndex - 1];
        this.nodes[insertIndex - 1].nextNode = newNode;
      }
      if (insertIndex < this.nodes.length - 1) {
        newNode.nextNode = this.nodes[insertIndex + 1];
        this.nodes[insertIndex + 1].previousNode = newNode;
      }
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js","./ModTreeNode.js":"components/Core/ModTreeNode.js"}],"components/Core/Observable.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Observable = exports.default = /*#__PURE__*/function () {
  function Observable() {
    _classCallCheck(this, Observable);
    this.observers = [];
  }
  return _createClass(Observable, [{
    key: "registerObserver",
    value: function registerObserver(observer) {
      this.observers.push(observer);
    }
  }, {
    key: "unregisterObserver",
    value: function unregisterObserver(observer) {
      var index = this.observers.indexOf(observer);
      if (index > -1) {
        this.observers.splice(index, 1);
      }
    }
  }, {
    key: "notifyObservers",
    value: function notifyObservers(data) {
      this.observers.forEach(function (observer) {
        if (observer.active) {
          observer.update(data);
        }
      });
    }
  }, {
    key: "unlockObserver",
    value: function unlockObserver(observerID) {
      this.observers.find(function (observer) {
        return observer.id === observerID;
      }).active = true;
    }
  }]);
}();
},{}],"components/Core/Mod.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
var _Observable2 = _interopRequireDefault(require("./Observable.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Mod = exports.default = /*#__PURE__*/function (_Observable) {
  function Mod(eventManager, id, name, type, priority, sourceID, sourceCalcType, targetType, targetID, runningCalcType, baseValue, value, active, specialActivatorID) {
    var _this;
    _classCallCheck(this, Mod);
    _this = _callSuper(this, Mod);
    _this.eventManager = eventManager;
    _this.id = id;
    _this.name = name;
    _this.type = type;
    _this.priority = priority;
    _this.source = null;
    _this.sourceID = sourceID;
    _this.sourceCalcType = sourceCalcType;
    _this.target = null;
    _this.targetID = targetID;
    _this.runningCalcType = runningCalcType;
    _this.targetType = targetType;
    _this.baseValue = (0, _decimal.DEC)(baseValue);
    _this.value = (0, _decimal.DEC)(baseValue);
    _this.modTreeReferences = [];
    _this.active = active;
    _this.specialActivatorID = specialActivatorID;
    _this.specialActivator = null;
    return _this;
  }
  _inherits(Mod, _Observable);
  return _createClass(Mod, [{
    key: "setActive",
    value: function setActive() {
      this.active = true;

      //dont continue if this is a headband mod, as this will cause headband pseudo object to set all of its mods active
      if (this.name.includes("headband")) {
        return;
      }
      this.source.updateObservers();
    }
  }]);
}(_Observable2.default);
},{"../Utilities/decimal.js":"components/Utilities/decimal.js","./Observable.js":"components/Core/Observable.js"}],"components/Core/Unlock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var Unlock = exports.default = /*#__PURE__*/_createClass(function Unlock(id, category, type, dependentID, targetID, conditionType, conditionValue, triggerType, triggerValue) {
  _classCallCheck(this, Unlock);
  this.id = id;
  this.dependentID = dependentID;
  this.dependent = null;
  this.targetID = targetID;
  this.target = null;
  this.category = category;
  this.type = type;
  this.conditionType = conditionType;
  this.conditionValue = conditionValue;
  this.triggerType = triggerType;
  this.triggerValue = triggerValue;
});
},{}],"components/Core/GameFeature.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../Utilities/break_eternity.min.js"));
var _decimal = require("../Utilities/decimal.js");
var _Observable2 = _interopRequireDefault(require("./Observable.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); } // large number library
var GameFeature = exports.default = /*#__PURE__*/function (_Observable) {
  function GameFeature(eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate) {
    var _this;
    var active = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : false;
    _classCallCheck(this, GameFeature);
    _this = _callSuper(this, GameFeature);
    _this.eventManager = eventManager;
    _this.id = id;
    _this.featureType = null;
    _this.name = name;
    _this.note = note;
    _this.description = description;
    _this.maxLevel = (0, _decimal.DEC)(maxLevel);
    _this.autoLevel = (0, _decimal.DEC)(0);
    _this.manualLevel = (0, _decimal.DEC)(0);
    _this.baseLevel = (0, _decimal.DEC)(0);
    _this.level = (0, _decimal.DEC)(level);
    _this.maxAffLvl = (0, _decimal.DEC)(0);
    _this.nextAffordableMilestoneLevel = (0, _decimal.DEC)(0);
    _this.nextMilestoneLevel = (0, _decimal.DEC)(0);
    _this.nextMilestoneMult = (0, _decimal.DEC)(0);
    _this.nextLevelIncrement = (0, _decimal.DEC)(0);
    _this.costType = costType;
    _this.costGrowthRate = (0, _decimal.DEC)(costGrowthRate);
    _this.costMultBase = (0, _decimal.DEC)(1);
    _this.costMult = (0, _decimal.DEC)(1);
    _this.costBase = (0, _decimal.DEC)(costBase);
    _this.costNextMultPurchase = (0, _decimal.DEC)(0);
    _this.costNextSingle = _this.calcCostNextSingle();
    _this.prodType = prodType;
    _this.prodGrowthRate = (0, _decimal.DEC)(prodGrowthRate);
    _this.prodMultBase = (0, _decimal.DEC)(1);
    _this.prodMult = (0, _decimal.DEC)(1);
    _this.prodPrevious = (0, _decimal.DEC)(0);
    _this.prodBase = (0, _decimal.DEC)(prodBase);
    _this.prodCurrentGlobal = (0, _decimal.DEC)(0);
    _this.prodNextMultPurchase = (0, _decimal.DEC)(0);
    _this.prodNextSingle = _this.calcProdNextSingle();
    _this.prodCurrentGlobal = (0, _decimal.DEC)(0);
    _this.modTreesMap = new Map();
    _this.active = active;
    _this.autoUnlocked = false;
    _this.autoToggle = false;
    _this.currentAutoHeap = null;
    _this.milestonesAchieved = (0, _decimal.DEC)(0);
    _this.buttonStatusOption = 0;
    return _this;
  }
  _inherits(GameFeature, _Observable);
  return _createClass(GameFeature, [{
    key: "calcGeometricSum",
    value: function calcGeometricSum(a, r, n) {
      var a_dec = (0, _decimal.DEC)(a); // next single value (cost or prod)
      var r_dec = (0, _decimal.DEC)(r); // growth-rate
      var n_dec = (0, _decimal.DEC)(n); // count to calculate

      var numerator = _break_eternityMin.default.sub(1, _break_eternityMin.default.pow(r_dec, n_dec));
      var denominator = _break_eternityMin.default.sub(1, r_dec);
      var n = _break_eternityMin.default.div(_break_eternityMin.default.mul(a_dec, numerator), denominator);
      return n;
    }
  }, {
    key: "calcCostNextSingle",
    value: function calcCostNextSingle() {
      return (0, _decimal.DEC)(this.costBase).mul(this.costMult).mul(_break_eternityMin.default.pow(this.costGrowthRate, this.manualLevel === 0 ? (0, _decimal.DEC)(1) : this.manualLevel));
    }
  }, {
    key: "calcProdNextSingle",
    value: function calcProdNextSingle() {
      return (0, _decimal.DEC)(this.prodBase).mul(this.prodMult).mul(_break_eternityMin.default.pow(this.prodGrowthRate, this.level === 0 ? (0, _decimal.DEC)(0) : this.level));
    }
  }, {
    key: "calculateCostN",
    value: function calculateCostN(n) {
      return this.calcGeometricSum(this.costNextSingle, this.costGrowthRate, n);
    }
  }, {
    key: "calculateProdN",
    value: function calculateProdN(n) {
      var startLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.level;
      if (this.featureType === "generator") {
        return this.prodBase.times(n).times(this.prodGrowthRate).times(this.prodMult);
      } else {
        var nextPurchaseProduction = (0, _decimal.DEC)(this.prodBase).mul(this.prodMult).mul(_break_eternityMin.default.pow(this.prodGrowthRate, startLevel));
        return this.calcGeometricSum(nextPurchaseProduction, this.prodGrowthRate, n);
      }
    }
  }, {
    key: "updateValuesDigit",
    value: function updateValuesDigit(n) {
      // Adjust n if it would take the level above the max
      if (n.plus(this.level).gt(this.maxLevel)) {
        n = this.maxLevel.minus(this.level);
      }
      this.costNextMultPurchase = this.calculateCostN(n);
      if (this.prodType) {
        this.prodNextMultPurchase = this.calculateProdN(n);
      }
      this.nextLevelIncrement = n;
    }
  }, {
    key: "updateValuesMilestone",
    value: function updateValuesMilestone() {
      this.setNextAffordableMilestoneLevel();
      if (this.nextAffordableMilestoneLevel) {
        var levelDif = this.nextAffordableMilestoneLevel.minus(this.level);
        this.costNextMultPurchase = this.calculateCostN(levelDif);
        this.prodNextMultPurchase = this.calculateProdN(levelDif);
        this.nextLevelIncrement = levelDif;
      } else {
        var n = (0, _decimal.DEC)(1);
        this.nextLevelIncrement = n;
        this.costNextMultPurchase = this.calculateCostN(n);
        this.prodNextMultPurchase = this.calculateProdN(n);
      }
    }
  }, {
    key: "updateValuesMax",
    value: function updateValuesMax(resource) {
      if (resource.lt(this.costNextSingle)) {
        this.maxAffLvl = (0, _decimal.DEC)(0);
        this.nextLevelIncrement = (0, _decimal.DEC)(1);
        this.costNextMultPurchase = this.costNextSingle;
        this.prodNextMultPurchase = this.prodNextSingle;
      } else {
        this.maxAffLvl = this.calculateMaxAffordable(resource);
        this.nextLevelIncrement = this.maxAffLvl;
        this.costNextMultPurchase = this.calculateCostN(this.maxAffLvl);
        this.prodNextMultPurchase = this.calculateProdN(this.maxAffLvl);
      }
    }
  }, {
    key: "calculateMaxAffordable",
    value: function calculateMaxAffordable(resource) {
      var S_dec = (0, _decimal.DEC)(resource);
      var a_dec = this.costNextSingle;
      var r_dec = (0, _decimal.DEC)(this.costGrowthRate);
      if (!r_dec.gt(1) || !S_dec.gte(a_dec)) {
        console.error(this.name, 'Invalid inputs:', S_dec.toString(), a_dec.toString(), r_dec.toString());
        return (0, _decimal.DEC)(0);
      }
      var inner = _break_eternityMin.default.mul(S_dec, _break_eternityMin.default.sub(r_dec, 1));
      inner = _break_eternityMin.default.div(inner, a_dec);
      inner = _break_eternityMin.default.add(inner, 1);
      if (inner.lt(0)) {
        console.error(this.name, 'Negative inner:', inner.toString());
        return (0, _decimal.DEC)(0);
      }
      var n = _break_eternityMin.default.log(inner, r_dec).floor();
      if (n.gt(this.maxLevel)) {
        n = this.maxLevel.minus(this.level);
      }
      return n;
    }
  }, {
    key: "rebuildModTrees",
    value: function rebuildModTrees() {
      this.modTreesMap.forEach(function (targetModTree) {
        targetModTree.buildTree();
      });
    }
  }, {
    key: "applyGlobalMultsToMultBases",
    value: function applyGlobalMultsToMultBases(globalFeatureMult) {
      //dont update value if global mult is unchanged
      if (globalFeatureMult.neq(this.prodMultBase)) {
        this.prodMultBase = globalFeatureMult;
        this.rebuildModTrees();
        this.updateFeatureValues(false);
      }
    }
  }, {
    key: "setActive",
    value: function setActive() {
      this.active = true;
    }
  }, {
    key: "setInactive",
    value: function setInactive() {
      this.active = false;
    }
  }, {
    key: "deactivateObservers",
    value: function deactivateObservers() {
      var _iterator = _createForOfIteratorHelper(this.observers),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var observer = _step.value;
          if (observer.active) {
            observer.active = false;
            var _iterator2 = _createForOfIteratorHelper(observer.modTreeReferences),
              _step2;
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var targetTree = _step2.value;
                targetTree.buildTree();
                this.eventManager.dispatchEvent('updateFeatureValues', {
                  target: targetTree.parent,
                  isNewLvl: false
                });
                this.eventManager.dispatchEvent('updateNewMultiplierValues', {
                  feature: targetTree.parent
                });
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "levelUp",
    value: function levelUp(auto) {
      var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (this.level.eq(0)) {
        this.setActive();
      }
      if (auto === "manual") {
        var levelUpCount = this.nextLevelIncrement;
        if (count) {
          levelUpCount = (0, _decimal.DEC)(count);
        }
        this.manualLevel = this.manualLevel.plus(levelUpCount);
        this.level = this.level.plus(levelUpCount);
      } else if (auto === "auto") {
        this.autoLevel = this.autoLevel.plus(count);
        this.level = this.level.plus(count);
      }
      this.updateObservers();
      if (this.milestoneTiers && this.manualLevel.gte(this.nextMilestoneLevel)) {
        this.setNextMilestoneLevel();
        this.eventManager.dispatchEvent('milestoneAchieved', this);
      }
      if (this.featureType === "artifact" && this.level.gte(this.maxLevel)) {
        this.evolve();
      }
    }
  }, {
    key: "updateObservers",
    value: function updateObservers() {
      // console.error("uo",this.name);
      var _iterator3 = _createForOfIteratorHelper(this.observers),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var observer = _step3.value;
          // check if this mod needs special activation from another source, and if that source is active
          if (!observer.specialActivatorID && observer.source.active) {
            observer.active = true;
          } else if (observer.specialActivatorID === this.id) {
            observer.active = true;
          }
          // if it matched either of this, it skips this mod(observer), that mod is not activated yet
          if (!observer.active) continue;

          // Handle single target mods
          if (observer.source && observer.target && observer.target !== observer.source) {
            // ^ third condition is for essence upgrades to work
            observer.target.modTreesMap.forEach(function (targetModTree) {
              targetModTree.buildTree();
              // console.error(targetModTree);
            });
            observer.target.updateFeatureValues(false);
            // this.eventManager.dispatchEvent('updateFeatureValues', { target: observer.target, isNewLvl: false });
          }

          // Handle Type Target Mods
          else if (observer.targetType) {
            var _iterator4 = _createForOfIteratorHelper(observer.modTreeReferences),
              _step4;
            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var targetModTree = _step4.value;
                targetModTree.buildTree();
                if (targetModTree.parent.active) {
                  targetModTree.parent.updateFeatureValues(false);
                  // this.eventManager.dispatchEvent('updateFeatureValues', { target: targetModTree.parent, isNewLvl: false });
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "setNextMilestoneLevel",
    value: function setNextMilestoneLevel() {
      var _this2 = this;
      this.nextMilestoneLevel = this.milestoneTiers.find(function (tier) {
        return tier.gt(_this2.manualLevel);
      });
      if (this.nextMilestoneLevel) {
        this.nextMilestoneMult = this.modTreesMap.get("production").nodes.find(function (t) {
          return t.ref.name === _this2.id + "milestone" + _this2.nextMilestoneLevel.toString();
        }).ref.value;
      }

      //set milestonesAchieved equal to its index location in milestoneTiers
      this.milestonesAchieved = this.milestoneTiers.indexOf(this.nextMilestoneLevel);
    }
  }, {
    key: "setNextAffordableMilestoneLevel",
    value: function setNextAffordableMilestoneLevel() {
      for (var i = 0; i < this.milestoneTiers.length; i++) {
        var milestone = this.milestoneTiers[i];
        if (this.manualLevel.lt(milestone)) {
          this.nextAffordableMilestoneLevel = (0, _decimal.DEC)(milestone);
          return;
        }
      }
      this.nextAffordableMilestoneLevel = null;
    }
  }]);
}(_Observable2.default);
},{"../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js","../Utilities/decimal.js":"components/Utilities/decimal.js","./Observable.js":"components/Core/Observable.js"}],"components/Core/PseudoFeature.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _GameFeature2 = _interopRequireDefault(require("./GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var PseudoFeature = exports.default = /*#__PURE__*/function (_GameFeature) {
  function PseudoFeature(eventManager, id, name, note, description, level, maxLevel, active) {
    var _this;
    _classCallCheck(this, PseudoFeature);
    _this = _callSuper(this, PseudoFeature, [eventManager, id, name, note, description, level, maxLevel, null, null, null, null, null, null, active]);
    _this.featureType = "pseudoFeature";
    return _this;
  }
  _inherits(PseudoFeature, _GameFeature);
  return _createClass(PseudoFeature);
}(_GameFeature2.default);
},{"./GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Training/Realm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Realm = exports.default = /*#__PURE__*/function () {
  function Realm(eventManager, id, type, name, evolutionTierNames, description, active, startingResource) {
    _classCallCheck(this, Realm);
    this.eventManager = eventManager;
    this.id = id;
    this.type = type;
    this.name = name;
    this.displayName;
    this.description = description;
    this.active = active;
    this.trainings = [];
    this.realmUpgrades = [];
    this.generatorChains = [];
    this.evolutionTier = (0, _decimal.DEC)(1);
    this.evolutionTierNames = evolutionTierNames;
    this.startingResource = (0, _decimal.DEC)(startingResource);
  }
  return _createClass(Realm, [{
    key: "setActive",
    value: function setActive() {
      this.active = true;
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: this.type,
        value: this.startingResource,
        operation: 'add'
      });
    }
  }, {
    key: "evolve",
    value: function evolve() {
      this.evolutionTier = this.evolutionTier.plus(1);

      // Trigger tutorial on very first evolve
      if (this.type === "force") {
        if (this.evolutionTier.equals(2)) {
          // Check if this is the first evolution
          this.eventManager.dispatchEvent('realmEvolved', {
            realmId: this.id,
            realmType: this.type
          });
        }
      }
      if (this.type === "force" || this.type === "energy") {
        var _iterator = _createForOfIteratorHelper(this.trainings.concat(this.realmUpgrades)),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var feature = _step.value;
            feature.evolve();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (this.type === "wisdom" || this.type === "divine") {
        var _iterator2 = _createForOfIteratorHelper(this.generatorChains[0].generators.concat(this.realmUpgrades)),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _feature = _step2.value;
            _feature.evolve();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Features/Training/Training.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Training = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Training(eventManager, id, realmID, evolutionTier, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active) {
    var _this;
    _classCallCheck(this, Training);
    _this = _callSuper(this, Training, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "training";
    _this.realmID = realmID;
    _this.realm = null;
    _this.milestoneTiers = [];
    _this.evolutionTier = evolutionTier;
    _this.evolutions = [];
    return _this;
  }
  _inherits(Training, _GameFeature);
  return _createClass(Training, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
    }
  }, {
    key: "evolve",
    value: function evolve() {
      var _this2 = this;
      var evoTier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Find the evolution object with the next evolution tier
      var nextEvolution;
      if (!evoTier) {
        nextEvolution = this.evolutions.find(function (evo) {
          return evo.evolutionTier === _this2.evolutionTier + 1;
        });
      } else if (evoTier > 1) {
        nextEvolution = this.evolutions.find(function (evo) {
          return evo.evolutionTier === evoTier;
        });
      } else {
        return;
      }
      if (nextEvolution) {
        if (evoTier) {
          this.name = nextEvolution.name;
          this.description = nextEvolution.description;
          return;
        }
        this.evolutionTier = nextEvolution.evolutionTier;
        this.name = nextEvolution.name;
        this.description = nextEvolution.description;
        this.level = (0, _decimal.DEC)(this.baseLevel);
        this.manualLevel = (0, _decimal.DEC)(this.baseLevel);
        this.autoLevel = (0, _decimal.DEC)(0);
        this.costBase = (0, _decimal.DEC)(nextEvolution.costBase);
        this.costGrowthRate = (0, _decimal.DEC)(nextEvolution.costGrowthRate);
        this.prodBase = (0, _decimal.DEC)(nextEvolution.prodBase);
        this.prodGrowthRate = (0, _decimal.DEC)(nextEvolution.prodGrowthRate);
        this.nextMilestoneLevel = (0, _decimal.DEC)(0);
        this.resetMilestoneUnlocks();

        // this.resetRealmFeatureUnlocks();

        this.setNextMilestoneLevel();
        this.costNextSingle = this.calcCostNextSingle();
        this.eventManager.dispatchEvent('updateFeatureValues', {
          target: this,
          isNewLvl: false
        });
        this.eventManager.dispatchEvent('updateNewMultiplierValues', {
          feature: this
        });
        this.prodCurrentGlobal = (0, _decimal.DEC)(0);
      } else {
        console.log("Next evolution tier not found!");
      }
    }
  }, {
    key: "resetMilestoneUnlocks",
    value: function resetMilestoneUnlocks() {
      this.eventManager.dispatchEvent('reEngage-unlock', {
        detail: {
          id: this.id,
          type: "milestone"
        }
      });
    }
  }, {
    key: "resetRealmFeatureUnlocks",
    value: function resetRealmFeatureUnlocks() {
      this.eventManager.dispatchEvent('reEngage-unlock', {
        detail: {
          id: this.id,
          type: "realm-feature-unlock"
        }
      });
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Training/Generator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Generator = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Generator(eventManager, id, genChainID, evolutionTier, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active) {
    var _this;
    _classCallCheck(this, Generator);
    _this = _callSuper(this, Generator, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "generator";
    _this.genChainID = genChainID;
    _this.parentGenChain = null;
    _this.unspentProduction = (0, _decimal.DEC)(0);
    _this.milestoneTiers = [];
    _this.evolutionTier = evolutionTier;
    _this.evolutions = [];
    _this.realmID;
    return _this;
  }
  _inherits(Generator, _GameFeature);
  return _createClass(Generator, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }

      // PROCESS SYENRGY MULTIPLIER INTO TOTAL COMPUTED PRODUCTION
      // let currentSynergyMult = gameManager.gameContent[this.parentGenChain.realm.type + 'SynergyMult'];
      // this.prodCurrentGlobal = this.prodCurrentGlobal.times(currentSynergyMult);
    }
  }, {
    key: "evolve",
    value: function evolve() {
      var _this2 = this;
      var evoTier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Find the evolution object with the next evolution tier
      var nextEvolution;
      if (!evoTier) {
        nextEvolution = this.evolutions.find(function (evo) {
          return evo.evolutionTier === _this2.evolutionTier + 1;
        });
      } else if (evoTier > 1) {
        nextEvolution = this.evolutions.find(function (evo) {
          return evo.evolutionTier === evoTier;
        });
      } else {
        return;
      }
      if (nextEvolution) {
        if (evoTier) {
          this.name = nextEvolution.name;
          this.description = nextEvolution.description;
          return;
        }
        this.evolutionTier = nextEvolution.evolutionTier;
        this.name = nextEvolution.name;
        this.description = nextEvolution.description;
        this.level = (0, _decimal.DEC)(this.baseLevel);
        this.manualLevel = (0, _decimal.DEC)(this.baseLevel);
        this.autoLevel = (0, _decimal.DEC)(0);
        this.costBase = (0, _decimal.DEC)(nextEvolution.costBase);
        this.costGrowthRate = (0, _decimal.DEC)(nextEvolution.costGrowthRate);
        this.prodBase = (0, _decimal.DEC)(nextEvolution.prodBase);
        this.prodGrowthRate = (0, _decimal.DEC)(nextEvolution.prodGrowthRate);
        this.nextMilestoneLevel = (0, _decimal.DEC)(0);
        this.resetMilestoneUnlocks();

        // this.resetRealmFeatureUnlocks();

        this.setNextMilestoneLevel();
        this.costNextSingle = this.calcCostNextSingle();
        this.eventManager.dispatchEvent('updateFeatureValues', {
          target: this,
          isNewLvl: false
        });
        this.eventManager.dispatchEvent('updateNewMultiplierValues', {
          feature: this
        });
        this.prodCurrentGlobal = (0, _decimal.DEC)(0);
      } else {
        console.log("Next evolution tier not found!");
      }
    }
  }, {
    key: "resetMilestoneUnlocks",
    value: function resetMilestoneUnlocks() {
      this.eventManager.dispatchEvent('reEngage-unlock', {
        detail: {
          id: this.id,
          type: "milestone"
        }
      });
    }
  }, {
    key: "resetRealmFeatureUnlocks",
    value: function resetRealmFeatureUnlocks() {
      this.eventManager.dispatchEvent('reEngage-unlock', {
        detail: {
          id: this.id,
          type: "realm-feature-unlock"
        }
      });
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Training/GeneratorChain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GeneratorChain = exports.default = /*#__PURE__*/function () {
  function GeneratorChain(eventManager, id, name, realmID, active) {
    _classCallCheck(this, GeneratorChain);
    this.eventManager = eventManager;
    this.id = id;
    this.name = name;
    this.generators = [];
    this.realmID = realmID;
    this.realm = null;
    this.active = active;
  }

  // Processes each generator in the chain, starting from the top and working down
  return _createClass(GeneratorChain, [{
    key: "calculateChain",
    value: function calculateChain(gameManager, elapsedTime) {
      // console.log(`Calculating chain for ${this.name} with elapsedTime: ${elapsedTime}`);

      // Log the initial state of each generator
      // this.generators.forEach((gen, idx) => {
      // console.log(`Initial state of Generator ${gen.name} at index ${idx}:
      //     Level: ${gen.level.toString()},
      //     Unspent Production: ${gen.unspentProduction.toString()},
      //     Production Base: ${gen.prodBase.toString()},
      //     ProdCurrent: ${gen.prodCurrentGlobal.toString()},
      //     Production Multiplier: ${gen.prodMult.toString()},
      //     Cost Base: ${gen.costBase.toString()},
      //     Cost Multiplier: ${gen.costMult.toString()}`);
      // });

      // Iterate over the generators, excluding the top one
      for (var index = this.generators.length - 2; index >= 0; index--) {
        var currentGenerator = this.generators[index]; // The generator that's being produced
        var producingGenerator = this.generators[index + 1]; // The generator that produces the current one

        // console.log(`Processing Generator ${currentGenerator.name} produced by ${producingGenerator.name}`);

        if (currentGenerator.active && producingGenerator.active && currentGenerator.level.gt(0)) {
          // Calculate how much of the current generator would be produced by the producing generator in the elapsed time
          var productionForElapsedTime = producingGenerator.prodCurrentGlobal.times(elapsedTime);
          // console.log(`Production for elapsed time for ${producingGenerator.name}: ${productionForElapsedTime.toString()}`);

          // Add this to the running total of produced but not yet spent amount of the current generator
          producingGenerator.unspentProduction = producingGenerator.unspentProduction.plus(productionForElapsedTime);
          // console.log(`Updated unspent production for ${producingGenerator.name}: ${producingGenerator.unspentProduction.toString()}`);

          // If there's enough unspent production to level up the current generator at least once, do so
          if (producingGenerator.unspentProduction.floor().gte(1)) {
            // Level up the current generator by the number of whole levels we can afford
            var wholeLevels = (0, _decimal.DEC)(producingGenerator.unspentProduction.floor());
            // console.log(`Leveling up ${currentGenerator.name} by ${wholeLevels.toString()} levels from ${producingGenerator.name}'s production`);

            currentGenerator.levelUp("auto", wholeLevels);

            // Update the game state to reflect the leveling up of the current generator
            gameManager.updateFeatureValues(currentGenerator, true);

            // Subtract the spent production from the running total of unspent production
            producingGenerator.unspentProduction = producingGenerator.unspentProduction.minus(wholeLevels);
            // console.log(`Post-level-up unspent production for ${producingGenerator.name}: ${producingGenerator.unspentProduction.toString()}`);
          }
        } else {
          // console.log(`Skipping generator ${currentGenerator.name} as it is inactive or at level 0.`);
        }

        // console.log(`Current state of Generator ${currentGenerator.name}:
        //     Level: ${currentGenerator.level.toString()},
        //     Production Base: ${currentGenerator.prodBase.toString()},
        //     Production Multiplier: ${currentGenerator.prodMult.toString()},
        //     Cost Base: ${currentGenerator.costBase.toString()},
        //     Cost Multiplier: ${currentGenerator.costMult.toString()}`);
      }

      // Log the final state of each generator
      // this.generators.forEach((gen, idx) => {
      // console.log(`Final state of Generator ${gen.name} at index ${idx}:
      //     Level: ${gen.level.toString()},
      //     Unspent Production: ${gen.unspentProduction.toString()},
      //     Production Base: ${gen.prodBase.toString()},
      //     ProdCurrent: ${gen.prodCurrentGlobal.toString()},
      //     Production Multiplier: ${gen.prodMult.toString()},
      //     Cost Base: ${gen.costBase.toString()},
      //     Cost Multiplier: ${gen.costMult.toString()}`);
      // });
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Features/Upgrades/RealmUpgrade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var RealmUpgrade = exports.default = /*#__PURE__*/function (_GameFeature) {
  function RealmUpgrade(eventManager, id, realmID, evolutionTier, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active) {
    var _this;
    _classCallCheck(this, RealmUpgrade);
    _this = _callSuper(this, RealmUpgrade, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "realmUpgrade";
    _this.realmID = realmID;
    _this.evolutionTier = evolutionTier;
    _this.evolutions = [];
    return _this;
  }
  _inherits(RealmUpgrade, _GameFeature);
  return _createClass(RealmUpgrade, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      var gameContent = gameManager.gameContent;
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
    }
  }, {
    key: "evolve",
    value: function evolve() {
      var _this2 = this;
      var evoTier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Find the evolution object with the next evolution tier
      var nextEvolution;
      if (!evoTier) {
        nextEvolution = this.evolutions.find(function (evo) {
          return evo.evolutionTier === _this2.evolutionTier + 1;
        });
      } else if (evoTier > 1) {
        nextEvolution = this.evolutions.find(function (evo) {
          return evo.evolutionTier === evoTier;
        });
      } else {
        return;
      }
      if (nextEvolution) {
        if (evoTier) {
          this.name = nextEvolution.name;
          this.description = nextEvolution.description;
          return;
        }
        this.evolutionTier = nextEvolution.evolutionTier;
        this.name = nextEvolution.name;
        this.description = nextEvolution.description;
        this.level = (0, _decimal.DEC)(this.baseLevel);
        this.manualLevel = (0, _decimal.DEC)(this.baseLevel);
        this.autoLevel = (0, _decimal.DEC)(0);
        this.costBase = (0, _decimal.DEC)(nextEvolution.costBase);
        this.costGrowthRate = (0, _decimal.DEC)(nextEvolution.costGrowthRate);
        this.prodBase = (0, _decimal.DEC)(nextEvolution.prodBase);
        this.prodGrowthRate = (0, _decimal.DEC)(nextEvolution.prodGrowthRate);
        this.resetRealmFeatureUnlocks();
        this.costNextSingle = this.calcCostNextSingle();
        this.eventManager.dispatchEvent('updateFeatureValues', {
          target: this,
          isNewLvl: false
        });
        this.eventManager.dispatchEvent('updateNewMultiplierValues', {
          feature: this
        });
      } else {
        console.log("Next evolution tier not found!");
      }
    }
  }, {
    key: "resetRealmFeatureUnlocks",
    value: function resetRealmFeatureUnlocks() {
      this.eventManager.dispatchEvent('reEngage-unlock', {
        detail: {
          id: this.id,
          type: "realm-feature-unlock"
        }
      });
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Upgrades/ForgeUpgrade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var ForgeUpgrade = exports.default = /*#__PURE__*/function (_GameFeature) {
  function ForgeUpgrade(eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, specialVar1, specialVar2, specialVar3) {
    var _this;
    _classCallCheck(this, ForgeUpgrade);
    _this = _callSuper(this, ForgeUpgrade, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "forgeUpgrade";
    _this.specialVar1 = specialVar1;
    _this.specialVar2 = specialVar2;
    _this.specialVar3 = specialVar3;
    return _this;
  }
  _inherits(ForgeUpgrade, _GameFeature);
  return _createClass(ForgeUpgrade, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      var gameContent = gameManager.gameContent;
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      switch (this.prodType) {
        //AUTOMATION UPGRADE HANDLING
        case 'autoArtifact':
          var _iterator = _createForOfIteratorHelper(gameManager.gameContent.artifacts),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var artifact = _step.value;
              artifact.autoUnlocked = true;
              if (artifact.active) {
                artifact.autoToggle = true;
                gameManager.automationManager.artifactAutobuys.push(artifact);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          break;

        //Training Automation
        case 'autoForceTrain':
          var _iterator2 = _createForOfIteratorHelper(gameManager.gameContent.trainings.filter(function (training) {
              return training.realmID === 10;
            })),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var training = _step2.value;
              training.autoUnlocked = true;
              gameManager.automationManager.forceHeap.add(training);
              training.autoToggle = true;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          break;
        case 'autoWisdomTrain':
          var _iterator3 = _createForOfIteratorHelper(gameManager.gameContent.generators.filter(function (generator) {
              return generator.parentGenChain.realmID === 20;
            })),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var generator = _step3.value;
              generator.autoUnlocked = true;
              gameManager.automationManager.wisdomHeap.add(generator);
              generator.autoToggle = true;
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          break;
        case 'autoEnergyTrain':
          var _iterator4 = _createForOfIteratorHelper(gameManager.gameContent.trainings.filter(function (training) {
              return training.realmID === 30;
            })),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var _training = _step4.value;
              _training.autoUnlocked = true;
              gameManager.automationManager.energyHeap.add(_training);
              _training.autoToggle = true;
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          break;
        case 'autoDivineTrain':
          var _iterator5 = _createForOfIteratorHelper(gameManager.gameContent.generators.filter(function (generator) {
              return generator.parentGenChain.realmID === 40;
            })),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _generator = _step5.value;
              _generator.autoUnlocked = true;
              gameManager.automationManager.divineHeap.add(_generator);
              _generator.autoToggle = true;
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
          break;

        // Training Upgrade Automation
        case 'autoForceUpgrade':
          var _iterator6 = _createForOfIteratorHelper(gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
              return upgrade.realmID === 10;
            })),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var upgrade = _step6.value;
              upgrade.autoUnlocked = true;
              gameManager.automationManager.forceHeap.add(upgrade);
              upgrade.autoToggle = true;
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
          break;
        case 'autoWisdomUpgrade':
          var _iterator7 = _createForOfIteratorHelper(gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
              return upgrade.realmID === 20;
            })),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _upgrade = _step7.value;
              _upgrade.autoUnlocked = true;
              gameManager.automationManager.wisdomHeap.add(_upgrade);
              _upgrade.autoToggle = true;
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
          break;
        case 'autoEnergyUpgrade':
          var _iterator8 = _createForOfIteratorHelper(gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
              return upgrade.realmID === 30;
            })),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var _upgrade2 = _step8.value;
              _upgrade2.autoUnlocked = true;
              gameManager.automationManager.energyHeap.add(_upgrade2);
              _upgrade2.autoToggle = true;
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
          break;
        case 'autoDivineUpgrade':
          var _iterator9 = _createForOfIteratorHelper(gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
              return upgrade.realmID === 40;
            })),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var _upgrade3 = _step9.value;
              _upgrade3.autoUnlocked = true;
              gameManager.automationManager.divineHeap.add(_upgrade3);
              _upgrade3.autoToggle = true;
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
          break;

        //NON-AUTOMATION SUPER UPGRADE HANDLING
        case 'modifyGameContentValue':
          this.eventManager.dispatchEvent('updateCurrencyMult', {
            valueType: this.specialVar1,
            valueAmount: this.specialVar2
          });
          break;
        case 'unspentCurrency':
          gameManager.gameContent.synergyUpgrades[this.specialVar1] = (0, _decimal.DEC)(this.specialVar2);
          break;
        default:
        // console.error("Error - forgeUpgrade prodType not found");
      }
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Upgrades/RadianceUpgrade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var RadianceUpgrade = exports.default = /*#__PURE__*/function (_GameFeature) {
  function RadianceUpgrade(eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, specialTargetID) {
    var _this;
    _classCallCheck(this, RadianceUpgrade);
    _this = _callSuper(this, RadianceUpgrade, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.specialTargetID = specialTargetID;
    _this.target = null;
    _this.featureType = "radianceUpgrade";
    return _this;
  }
  _inherits(RadianceUpgrade, _GameFeature);
  return _createClass(RadianceUpgrade, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      var gameContent = gameManager.gameContent;
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      switch (this.prodType) {
        case 'timeMult':
          gameContent.timeModifierUpgrade = this.prodBase.plus(this.level.times(this.prodGrowthRate)).toNumber();
          break;
      }
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Upgrades/EssenceUpgrade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var EssenceUpgrade = exports.default = /*#__PURE__*/function (_GameFeature) {
  function EssenceUpgrade(eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, specialTargetID, parentID, angleFromParent, distanceFromParent, isUnlockedByConnection) {
    var _this;
    _classCallCheck(this, EssenceUpgrade);
    _this = _callSuper(this, EssenceUpgrade, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.specialTargetID = specialTargetID;
    _this.target = null;
    _this.featureType = "essenceUpgrade";
    _this.isUnlockedByConnection = isUnlockedByConnection;
    //graphical and connection properties
    _this.parentID = parentID;
    _this.parent = null;
    _this.angleFromParent = angleFromParent; // in degrees
    _this.distanceFromParent = distanceFromParent; // distance from parent node in pixels
    _this.children = [];
    _this.x;
    _this.y;
    return _this;
  }
  _inherits(EssenceUpgrade, _GameFeature);
  return _createClass(EssenceUpgrade, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      var gameContent = gameManager.gameContent;
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      switch (this.prodType) {
        case 'autoConquestProgression':
          gameContent.worldManager.autoUnlocked = true;
          break;
        case 'autoTournamentProgression':
          gameContent.tournament.autoUnlocked = true;
          break;
        case 'skillpoints':
          gameContent.skillpoints = gameContent.skillpoints.plus(this.prodBase);
          gameContent.baseSkillpoint = gameContent.baseSkillpoint.plus(this.prodBase);
          break;
        case 'baseFeatureLevel':
          this.target.baseLevel = this.target.baseLevel.plus(this.prodBase);
          this.target.updateValuesDigit(this.prodBase);
          this.target.levelUp("manual", this.prodBase);
          gameManager.updateFeatureValues(this.target, true);
          break;
        case 'zoneSkillpoint':
          //handle retroactive defeated zone skillpoints upgrades
          //also updated in stage.handleConquestComplete part of this solution
          var _iterator = _createForOfIteratorHelper(gameContent.zones),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var zone = _step.value;
              if (zone.active && zone.isDefeated) {
                zone.prodCurrentGlobal = zone.prodPrevious;
                zone.prodNextMultPurchase = zone.prodCurrentGlobal.times(zone.prodMult);
                var skillpointstoadd = zone.prodNextMultPurchase;
                gameContent.skillpoints = gameContent.skillpoints.plus(skillpointstoadd);
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          break;
        case 'unlock':
          // feature.target.setActive();
          break;
        // case 'skillTreeUnlock':
        // 	feature.target.setActive();
        // 	break;
      }
    }
  }, {
    key: "activateChildren",
    value: function activateChildren() {
      if (this.children.length > 0) {
        var _iterator2 = _createForOfIteratorHelper(this.children),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            if (child.isUnlockedByConnection) {
              child.setActive();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Odyssey/Artifact.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Artifact = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Artifact(eventManager, id, name, note, evolutionTier, gearType, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active) {
    var _this;
    _classCallCheck(this, Artifact);
    _this = _callSuper(this, Artifact, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "artifact";
    _this.unlocked = false;
    _this.gearType = gearType;
    _this.evolutionTier = (0, _decimal.DEC)(evolutionTier);
    _this.evolutions = [];
    return _this;
  }

  // Triggered in GameFeature based on max level attainment
  // This assumes there is a next evolution tier.  the max evolution max level is 1e100 so it should never be reached
  _inherits(Artifact, _GameFeature);
  return _createClass(Artifact, [{
    key: "evolve",
    value: function evolve() {
      var _this2 = this;
      var nextEvolution;
      this.evolutionTier = this.evolutionTier.plus(1);
      nextEvolution = this.evolutions.find(function (evo) {
        return evo.evolutionTier === Number(_this2.evolutionTier);
      });
      if (nextEvolution) {
        this.name = nextEvolution.name;
        this.description = nextEvolution.description;
        this.note = nextEvolution.note;
        this.level = (0, _decimal.DEC)(1);
        this.manualLevel = (0, _decimal.DEC)(1);
        this.maxLevel = (0, _decimal.DEC)(nextEvolution.maxLevel);
        this.observers[0].baseValue = nextEvolution.newModValue;
        this.observers[0].value = nextEvolution.newModValue;
        this.updateObservers();
      }
    }
  }, {
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Odyssey/Zone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Zone = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Zone(eventManager, id, regionID, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, baseConquestTime, active, zoneType, parentID, angleFromParent, distanceFromParent, isUnlockedByConnection) {
    var _this;
    var x = arguments.length > 21 && arguments[21] !== undefined ? arguments[21] : null;
    var y = arguments.length > 22 && arguments[22] !== undefined ? arguments[22] : null;
    var outsideRegionConnectionIDs = arguments.length > 23 ? arguments[23] : undefined;
    _classCallCheck(this, Zone);
    _this = _callSuper(this, Zone, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "zone";
    _this.regionID = regionID;
    _this.region = null;
    _this.zoneType = zoneType;
    _this.isDefeated = false;
    _this.defeatCount = (0, _decimal.DEC)(0);
    _this.baseConquestTime = (0, _decimal.DEC)(baseConquestTime);
    _this.conquestTime = (0, _decimal.DEC)(baseConquestTime);
    _this.isConquesting = false;
    _this.conquestTimeRemaining = 0;
    _this.unlockReqText = "";
    _this.progress = 0;
    _this.outsideRegionConnectionIDs = outsideRegionConnectionIDs;
    _this.unlocked;

    //graphical and connection properties
    _this.isUnlockedByConnection = isUnlockedByConnection;
    // this.node = null;
    _this.parentID = parentID;
    _this.parent = null;
    _this.angleFromParent = angleFromParent; // in degrees
    _this.distanceFromParent = distanceFromParent; // distance from parent node in pixels
    _this.children = [];
    _this.x = x;
    _this.y = y;
    _this.hasConnectionToNewRegion = null;
    _this.elements = {
      cell: null,
      button: null,
      data: null
    };
    return _this;
  }
  _inherits(Zone, _GameFeature);
  return _createClass(Zone, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
    }
  }, {
    key: "setActive",
    value: function setActive() {
      this.active = true;
    }
  }, {
    key: "setUnlocked",
    value: function setUnlocked() {
      this.unlocked = true;
    }
  }, {
    key: "startConquest",
    value: function startConquest() {
      var _this2 = this;
      var startTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (this.defeatCount.eq(0)) {
        this.eventManager.dispatchEvent('updatePropertyValue', {
          property: this.costType,
          value: this.costNextMultPurchase,
          operation: 'subtract'
        });
      }
      this.isConquesting = true;
      this.progress = startTime;
      this.timeRemaining = this.conquestTime * (1 - startTime);
      if (this.intervalId) {
        clearInterval(this.intervalId);
      }
      var startTimestamp = Date.now() - startTime * this.conquestTime * 1000;
      var initialConquestTime = this.conquestTime;
      this.intervalId = setInterval(function () {
        var elapsedTime = (Date.now() - startTimestamp) / 1000; // Elapsed time in seconds
        var currentConquestTime = _this2.conquestTime;
        if (currentConquestTime !== initialConquestTime) {
          // Conquest time has been updated
          _this2.progress = elapsedTime / currentConquestTime;
          _this2.timeRemaining = currentConquestTime - elapsedTime;
        } else {
          _this2.progress = startTime + elapsedTime / initialConquestTime;
          _this2.timeRemaining = initialConquestTime - elapsedTime;
        }
        if (_this2.progress >= 1) {
          _this2.progress = 0;
          _this2.timeRemaining = 0;
          clearInterval(_this2.intervalId);
          _this2.isConquesting = false;
          _this2.handleConquestComplete();
        }
        _this2.eventManager.dispatchEvent('zoneConquestProgress', {
          zoneID: _this2.id,
          progress: _this2.progress,
          timeRemaining: _this2.timeRemaining
        });
      }, 10); // Update every 10 milliseconds
    }
  }, {
    key: "stopConquest",
    value: function stopConquest() {
      this.eventManager.dispatchEvent('zoneConquestStopped', {
        zoneID: this.id
      });
      this.progress = 0;
      this.conquestTimeRemaining = 0;
      this.isConquesting = false;
      clearInterval(this.intervalId);
    }
  }, {
    key: "handleConquestComplete",
    value: function handleConquestComplete() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      if (!this.isDefeated) {
        this.isDefeated = true;
        this.progress = 0;
        this.conquestTimeRemaining = 0;
        this.activateConnections();
        this.region.zoneCompleted(this);
      }
      this.processRewards(count);
      this.defeatCount = this.defeatCount.plus(count);
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: "lifetimeZoneCompletions",
        value: (0, _decimal.DEC)(count),
        operation: 'add'
      });
    }
  }, {
    key: "processRewards",
    value: function processRewards() {
      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (this.zoneType === "boss") {
        this.eventManager.dispatchEvent('updatePropertyValue', {
          property: 'skillpoints',
          value: (0, _decimal.DEC)(1),
          operation: 'add'
        });
      } else if (this.zoneType === "legendaryBoss") {}

      // this deals only with the shard income from zones
      var rewardToAdd = this.prodNextMultPurchase.times(count);
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: this.prodType,
        value: rewardToAdd,
        operation: 'add'
      });
      this.prodPrevious = this.prodCurrentGlobal = this.prodNextMultPurchase;
    }
  }, {
    key: "activateConnections",
    value: function activateConnections() {
      if (this.children.length > 0) {
        var _iterator = _createForOfIteratorHelper(this.children),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            if (child.isUnlockedByConnection) {
              // if next zone is in a new world, set current world as progressed
              if (child.region.world !== this.region.world) {
                this.region.world.setProgressed();
              }
              child.setActive();
              if (child.region !== this.region) {
                child.region.setActive();
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (this.parent && this.parent.isUnlockedByConnection) {
        this.parent.setActive();
        if (this.parent.region !== this.region) {
          this.parent.region.setActive();
        }
      }
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Odyssey/Region.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Region = exports.default = /*#__PURE__*/function () {
  function Region(eventManager, id, worldID, name, mapFilename, note, shardType, zoneCostMin, zoneCostMax, topLeftCornerX, topLeftCornerY, active) {
    _classCallCheck(this, Region);
    this.eventManager = eventManager;
    this.id = id;
    this.worldID = worldID;
    this.world = null;
    this.name = name;
    this.mapFilename = mapFilename;
    this.note = note;
    this.featureType = "region";
    this.shardType = shardType;
    this.zoneCostMin = (0, _decimal.DEC)(zoneCostMin);
    this.zoneCostMax = (0, _decimal.DEC)(zoneCostMax);
    this.zones = [];
    this.active = active;
    this.isProgressed = false;
    this.isCompleted = false;
    this.totalZoneCount = 0;
    this.totalZonesCompleted = 0;
    this.progressPercentage = 0;
    this.currentlyViewing = false;
    this.topLeftCornerX = topLeftCornerX;
    this.topLeftCornerY = topLeftCornerY;
    this.image = null;
  }
  return _createClass(Region, [{
    key: "setCompleted",
    value: function setCompleted() {
      this.isCompleted = true;
      this.world.regionCompleted();
    }
  }, {
    key: "setProgressed",
    value: function setProgressed() {
      this.isProgressed = true;
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: "lifetimeRegionProgressions",
        value: (0, _decimal.DEC)(1),
        operation: 'add'
      });

      //is this needed - this breaks "complete next world" functionality
      // this.world.regionProgressed();
    }
  }, {
    key: "setActive",
    value: function setActive() {
      this.active = true;
      this.eventManager.dispatchEvent('regionCompleted');
      // if (this.zones[0]){
      // 	this.zones[0].setActive();
      // }
    }
  }, {
    key: "checkAllZonesCompleted",
    value: function checkAllZonesCompleted() {
      var allZonesDefeated = this.zones.every(function (zone) {
        return zone.isDefeated;
      });
      if (allZonesDefeated) {
        this.setCompleted();
      }
    }
  }, {
    key: "zoneCompleted",
    value: function zoneCompleted(zone) {
      this.totalZonesCompleted++;
      this.progressPercentage = this.totalZonesCompleted / this.totalZoneCount * 100;
      this.world.zoneCompleted();
      if (zone.zoneType === "boss" && !this.isProgressed) {
        this.setProgressed();
      }
      if (!this.isCompleted) {
        this.checkAllZonesCompleted();
      }
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Features/Odyssey/World.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var World = exports.default = /*#__PURE__*/function () {
  function World(eventManager, worldManager, id, name, note, zoneCostMin, zoneCostMax, zoneShardType, active) {
    _classCallCheck(this, World);
    this.eventManager = eventManager;
    this.id = id;
    this.name = name;
    this.note = note;
    this.worldManager = worldManager;
    this.featureType = "world";
    this.regions = [];
    this.zoneCostMin = (0, _decimal.DEC)(zoneCostMin);
    this.zoneCostMax = (0, _decimal.DEC)(zoneCostMax);
    this.zoneShardType = zoneShardType;
    this.active = active;
    this.isCompleted = false;
    this.isProgressed = false;
    this.regionsProgressedCount = (0, _decimal.DEC)(0);
    this.zonesProgressedCount = (0, _decimal.DEC)(0);
    this.worldsProgressedCount = (0, _decimal.DEC)(0);
    this.totalZoneCount = 0;
    this.totalZonesCompleted = 0;
    this.progressPercentage = 0;
    this.currentlyViewing = false;
  }
  return _createClass(World, [{
    key: "setCompleted",
    value: function setCompleted() {
      this.isCompleted = true;
      this.worldManager.worldCompleted();
    }
  }, {
    key: "setProgressed",
    value: function setProgressed() {
      this.isProgressed = true;
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: "lifetimeWorldProgressions",
        value: (0, _decimal.DEC)(1),
        operation: 'add'
      });
      this.worldManager.worldProgressed();
    }
  }, {
    key: "setActive",
    value: function setActive() {
      this.active = true;
      this.regions[0].setActive();
      // if (this.fighterTier){
      // 	this.fighterTier.worldSetActive();
      // }
    }
  }, {
    key: "regionCompleted",
    value: function regionCompleted() {
      var allRegionsCompleted = this.regions.every(function (region) {
        return region.isCompleted;
      });
      if (allRegionsCompleted) {
        this.setCompleted();
      }
    }
  }, {
    key: "regionProgressed",
    value: function regionProgressed() {
      //check if world is progressed or set next region active
      var allRegionsProgressed = this.regions.every(function (region) {
        return region.isProgressed;
      });
      if (allRegionsProgressed) {
        this.setProgressed();
      }
      // else {
      // const nextRegion = this.regions.find(region => !region.active);
      // if (nextRegion) {
      // 	nextRegion.setActive();
      // }
      // }

      // this.worldManager.regionProgressed();

      this.worldManager.regionsProgressed = this.worldManager.regionsProgressed.plus(1);
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: 'maxProgressionRegion',
        value: this.worldManager.regionsProgressed,
        operation: 'replaceIfGreater'
      });
    }
  }, {
    key: "zoneCompleted",
    value: function zoneCompleted() {
      this.worldManager.zoneCompleted();
      this.totalZonesCompleted++;
      this.progressPercentage = this.totalZonesCompleted / this.totalZoneCount * 100;
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Features/Tournament/Fighter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Fighter = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Fighter(eventManager, id, name, note, description, tier, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active) {
    var _this;
    _classCallCheck(this, Fighter);
    _this = _callSuper(this, Fighter, [eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "fighter";
    _this.tier = tier;
    _this.fighterTier = null;
    _this.isDefeated = false;
    _this.defeatCount = (0, _decimal.DEC)(0);
    _this.prevFighterDefeated = false;
    if (id === 80001) {
      _this.prevFighterDefeated = true;
    }
    return _this;
  }
  _inherits(Fighter, _GameFeature);
  return _createClass(Fighter, [{
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
    }
  }, {
    key: "setDefeated",
    value: function setDefeated() {
      this.isDefeated = true;
      // this.active = false;

      this.defeatCount = this.defeatCount.plus(1);
      var resourceUpdates = [{
        property: this.prodType,
        value: this.prodNextMultPurchase,
        operation: 'add'
      }, {
        property: 'lifetimeCrystalEarned',
        value: this.prodNextMultPurchase,
        operation: 'add'
      }, {
        property: 'lifetimeKills',
        value: (0, _decimal.DEC)(1),
        operation: 'add'
      }];
      this.eventManager.dispatchEvent('batchUpdatePropertyValues', resourceUpdates);
      this.prodPrevious = this.prodCurrentGlobal = this.prodNextMultPurchase;
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Tournament/FighterTier.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var FighterTier = exports.default = /*#__PURE__*/function () {
  function FighterTier(eventManager, id, tier, name) {
    _classCallCheck(this, FighterTier);
    this.eventManager = eventManager;
    this.id = id;
    this.name = name;
    this.fighters = [];
    this.world = null;
    this.tier = tier;
    this.isCompleted = false;
    this.active = false;
  }
  return _createClass(FighterTier, [{
    key: "setComplete",
    value: function setComplete() {
      this.isCompleted = true;
      //award / improve headband

      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: "lifetimeFighterTiersDefeated",
        value: (0, _decimal.DEC)(1),
        operation: 'add'
      });
    }
  }, {
    key: "setActive",
    value: function setActive() {
      this.active = true;
      // this.fighters[0].setActive();
      // this.fighters[0].active = true;
      var _iterator = _createForOfIteratorHelper(this.fighters),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var fighter = _step.value;
          fighter.setActive();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Features/Tournament/Tournament.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Tournament = exports.default = /*#__PURE__*/function () {
  function Tournament(eventManager, id) {
    _classCallCheck(this, Tournament);
    this.eventManager = eventManager;
    this.id = id;
    this.fighterTiers = [];
    this.fighters = [];
    this.autoUnlocked = false;
    this.rank = 201;
    this.currentFighterTier;
    this.currentFighterIndex = 0;
  }
  return _createClass(Tournament, [{
    key: "processFighterDefeat",
    value: function processFighterDefeat(fighterId) {
      var fighterIndex = this.fighters.findIndex(function (fighter) {
        return fighter.id === fighterId;
      });
      if (fighterIndex === -1) {
        console.error("fighter not found. no fight processed");
        return;
      }
      var fighter = this.fighters[fighterIndex];
      if (!fighter.isDefeated) {
        fighter.setDefeated();
        this.rank = this.fighters.length - (fighter.id - 80001);
        this.currentFighterIndex++;
        this.eventManager.dispatchEvent('updatePropertyValue', {
          property: 'maxTournamentRank',
          value: (0, _decimal.DEC)(this.rank),
          operation: 'replaceIfLesser'
        });
      }

      // Check that the next fighter index is within the bounds of the fighters array
      if (fighterIndex + 1 < this.fighters.length) {
        //set up so next fighter will know that fighter was defeated, which updates button disable/enable based on prevFighterDefeated value
        var nextFighter = this.fighters.find(function (fighter) {
          return fighter.id === fighterId + 1;
        });
        nextFighter.prevFighterDefeated = true;

        // if next fighter is in next tier
        if (this.fighters[fighterIndex + 1].tier !== fighter.tier) {
          var tierIndex = this.fighterTiers.findIndex(function (fighterTier) {
            return fighterTier.tier === fighter.tier;
          });
          if (this.fighterTiers.length > tierIndex + 1) {
            this.fighterTiers[tierIndex].setComplete();
            this.currentFighterTier = this.fighterTiers[tierIndex + 1];
          }
        } else {
          // If the next fighter isn't active yet, activate it
          if (!this.fighters[fighterIndex + 1].active) {
            this.fighters[fighterIndex + 1].active = true;
          }
        }
      }
    }
  }, {
    key: "calculateCurrentRank",
    value: function calculateCurrentRank() {
      var defeatedFighters = this.fighters.filter(function (fighter) {
        return fighter.isDefeated;
      }).length;
      this.rank = this.fighters.length - defeatedFighters;
      return this.rank;
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"assets/maps/continent_01.jpg":[function(require,module,exports) {
module.exports = "/continent_01.fcee98d3.jpg";
},{}],"assets/maps/continent_03.jpg":[function(require,module,exports) {
module.exports = "/continent_03.2692b699.jpg";
},{}],"assets/maps/continent_02.jpg":[function(require,module,exports) {
module.exports = "/continent_02.a111bf1e.jpg";
},{}],"assets/maps/continent_05.jpg":[function(require,module,exports) {
module.exports = "/continent_05.d4b2fe1a.jpg";
},{}],"assets/maps/continent_06.jpg":[function(require,module,exports) {
module.exports = "/continent_06.3e65ddbb.jpg";
},{}],"assets/maps/continent_04.jpg":[function(require,module,exports) {
module.exports = "/continent_04.37842ead.jpg";
},{}],"assets/maps/continent_07.jpg":[function(require,module,exports) {
module.exports = "/continent_07.2a40fb97.jpg";
},{}],"assets/maps/continent_09.jpg":[function(require,module,exports) {
module.exports = "/continent_09.046a26cf.jpg";
},{}],"assets/maps/continent_08.jpg":[function(require,module,exports) {
module.exports = "/continent_08.3f445058.jpg";
},{}],"assets/maps/continent_11.jpg":[function(require,module,exports) {
module.exports = "/continent_11.445afbfc.jpg";
},{}],"assets/maps/continent_10.jpg":[function(require,module,exports) {
module.exports = "/continent_10.1787f1e0.jpg";
},{}],"assets/maps/continent_12.jpg":[function(require,module,exports) {
module.exports = "/continent_12.0b834949.jpg";
},{}],"assets/maps/continent_13.jpg":[function(require,module,exports) {
module.exports = "/continent_13.f05543da.jpg";
},{}],"assets/maps/continent_14.jpg":[function(require,module,exports) {
module.exports = "/continent_14.cb644e4d.jpg";
},{}],"assets/maps/cosmic_filament_01.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_01.c6cbcede.jpg";
},{}],"assets/maps/continent_16.jpg":[function(require,module,exports) {
module.exports = "/continent_16.8b9c4c1d.jpg";
},{}],"assets/maps/cosmic_filament_03.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_03.82be5bd7.jpg";
},{}],"assets/maps/cosmic_filament_04.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_04.dc74d679.jpg";
},{}],"assets/maps/cosmic_filament_02.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_02.a4b84566.jpg";
},{}],"assets/maps/continent_15.jpg":[function(require,module,exports) {
module.exports = "/continent_15.196ed3ad.jpg";
},{}],"assets/maps/cosmic_filament_05.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_05.7fd996f9.jpg";
},{}],"assets/maps/cosmic_filament_06.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_06.f9e0e305.jpg";
},{}],"assets/maps/cosmic_filament_07.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_07.7f7034c2.jpg";
},{}],"assets/maps/cosmic_filament_09.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_09.5a7be790.jpg";
},{}],"assets/maps/cosmic_filament_08.jpg":[function(require,module,exports) {
module.exports = "/cosmic_filament_08.42bb637b.jpg";
},{}],"assets/maps/cosmic_void_01.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_01.2bafc3d0.jpg";
},{}],"assets/maps/cosmic_void_02.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_02.11f2062f.jpg";
},{}],"assets/maps/cosmic_void_03.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_03.c5087639.jpg";
},{}],"assets/maps/cosmic_void_05.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_05.5f05915d.jpg";
},{}],"assets/maps/cosmic_void_04.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_04.fe79fc68.jpg";
},{}],"assets/maps/cosmic_void_06.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_06.235056a8.jpg";
},{}],"assets/maps/cosmic_void_07.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_07.0a95cd11.jpg";
},{}],"assets/maps/cosmic_void_08.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_08.1dc82e13.jpg";
},{}],"assets/maps/cosmic_void_09.jpg":[function(require,module,exports) {
module.exports = "/cosmic_void_09.89730114.jpg";
},{}],"assets/maps/galaxy_01.jpg":[function(require,module,exports) {
module.exports = "/galaxy_01.06b679b6.jpg";
},{}],"assets/maps/galaxy_02.jpg":[function(require,module,exports) {
module.exports = "/galaxy_02.8b45569d.jpg";
},{}],"assets/maps/galaxy_03.jpg":[function(require,module,exports) {
module.exports = "/galaxy_03.84d9118f.jpg";
},{}],"assets/maps/galaxy_04.jpg":[function(require,module,exports) {
module.exports = "/galaxy_04.7c11da04.jpg";
},{}],"assets/maps/galaxy_05.jpg":[function(require,module,exports) {
module.exports = "/galaxy_05.b4d70b7d.jpg";
},{}],"assets/maps/galaxy_06.jpg":[function(require,module,exports) {
module.exports = "/galaxy_06.fc8107ce.jpg";
},{}],"assets/maps/galaxy_07.jpg":[function(require,module,exports) {
module.exports = "/galaxy_07.6dc11bb5.jpg";
},{}],"assets/maps/galaxy_08.jpg":[function(require,module,exports) {
module.exports = "/galaxy_08.61cd8cee.jpg";
},{}],"assets/maps/galaxy_09.jpg":[function(require,module,exports) {
module.exports = "/galaxy_09.c25ce1c8.jpg";
},{}],"assets/maps/galaxy_10.jpg":[function(require,module,exports) {
module.exports = "/galaxy_10.7936b373.jpg";
},{}],"assets/maps/galaxy_11.jpg":[function(require,module,exports) {
module.exports = "/galaxy_11.e078f3f1.jpg";
},{}],"assets/maps/galaxy_12.jpg":[function(require,module,exports) {
module.exports = "/galaxy_12.78ea41cf.jpg";
},{}],"assets/maps/galaxy_13.jpg":[function(require,module,exports) {
module.exports = "/galaxy_13.3d5f0eb7.jpg";
},{}],"assets/maps/galaxy_14.jpg":[function(require,module,exports) {
module.exports = "/galaxy_14.2a774839.jpg";
},{}],"assets/maps/galaxy_15.jpg":[function(require,module,exports) {
module.exports = "/galaxy_15.8fb82eb5.jpg";
},{}],"assets/maps/local_bubble_01.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_01.10822732.jpg";
},{}],"assets/maps/local_bubble_03.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_03.e419d24e.jpg";
},{}],"assets/maps/local_bubble_02.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_02.89f8dc97.jpg";
},{}],"assets/maps/local_bubble_04.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_04.983d4e93.jpg";
},{}],"assets/maps/local_bubble_05.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_05.bc7c9aae.jpg";
},{}],"assets/maps/local_bubble_07.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_07.c607d35d.jpg";
},{}],"assets/maps/local_bubble_06.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_06.f5d3a738.jpg";
},{}],"assets/maps/local_bubble_08.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_08.512fb949.jpg";
},{}],"assets/maps/local_bubble_09.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_09.47ddab06.jpg";
},{}],"assets/maps/local_bubble_11.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_11.d4846e68.jpg";
},{}],"assets/maps/local_bubble_10.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_10.40ad6b2d.jpg";
},{}],"assets/maps/local_bubble_12.jpg":[function(require,module,exports) {
module.exports = "/local_bubble_12.4fb4285c.jpg";
},{}],"assets/maps/local_cluster_01.jpg":[function(require,module,exports) {
module.exports = "/local_cluster_01.5bc8e270.jpg";
},{}],"assets/maps/local_cluster_02.jpg":[function(require,module,exports) {
module.exports = "/local_cluster_02.d00368f7.jpg";
},{}],"assets/maps/local_cluster_03.jpg":[function(require,module,exports) {
module.exports = "/local_cluster_03.7a170fe4.jpg";
},{}],"assets/maps/local_cluster_04.jpg":[function(require,module,exports) {
module.exports = "/local_cluster_04.46128cb9.jpg";
},{}],"assets/maps/local_galactic_group_01.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_01.49db07e7.jpg";
},{}],"assets/maps/local_galactic_group_02.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_02.d6cb5a15.jpg";
},{}],"assets/maps/local_galactic_group_03.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_03.912c5015.jpg";
},{}],"assets/maps/local_galactic_group_04.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_04.6e99a141.jpg";
},{}],"assets/maps/local_galactic_group_05.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_05.cc92d2b0.jpg";
},{}],"assets/maps/local_galactic_group_06.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_06.29624e27.jpg";
},{}],"assets/maps/local_galactic_group_07.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_07.5174e90a.jpg";
},{}],"assets/maps/local_galactic_group_08.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_08.5322a69a.jpg";
},{}],"assets/maps/local_galactic_group_09.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_09.ca414955.jpg";
},{}],"assets/maps/local_galactic_group_10.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_10.10035099.jpg";
},{}],"assets/maps/local_galactic_group_11.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_11.01887281.jpg";
},{}],"assets/maps/local_galactic_group_12.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_12.d41910b0.jpg";
},{}],"assets/maps/local_galactic_group_13.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_13.fbb270e3.jpg";
},{}],"assets/maps/local_galactic_group_14.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_14.80424d86.jpg";
},{}],"assets/maps/local_galactic_group_15.jpg":[function(require,module,exports) {
module.exports = "/local_galactic_group_15.c19df60c.jpg";
},{}],"assets/maps/observable_universe_01.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_01.0d5f80bd.jpg";
},{}],"assets/maps/observable_universe_02.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_02.311242a1.jpg";
},{}],"assets/maps/observable_universe_03.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_03.9f1f8751.jpg";
},{}],"assets/maps/observable_universe_04.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_04.aec60b25.jpg";
},{}],"assets/maps/observable_universe_05.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_05.1a5fcfb1.jpg";
},{}],"assets/maps/observable_universe_06.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_06.fd166c31.jpg";
},{}],"assets/maps/observable_universe_07.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_07.25b9fc65.jpg";
},{}],"assets/maps/observable_universe_08.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_08.ddf6c8f7.jpg";
},{}],"assets/maps/observable_universe_09.jpg":[function(require,module,exports) {
module.exports = "/observable_universe_09.670b2114.jpg";
},{}],"assets/maps/peninsula_01.jpg":[function(require,module,exports) {
module.exports = "/peninsula_01.a5905bd4.jpg";
},{}],"assets/maps/peninsula_02.jpg":[function(require,module,exports) {
module.exports = "/peninsula_02.0840018c.jpg";
},{}],"assets/maps/peninsula_03.jpg":[function(require,module,exports) {
module.exports = "/peninsula_03.9365a3d4.jpg";
},{}],"assets/maps/peninsula_04.jpg":[function(require,module,exports) {
module.exports = "/peninsula_04.5956ca87.jpg";
},{}],"assets/maps/peninsula_05.jpg":[function(require,module,exports) {
module.exports = "/peninsula_05.d95c300a.jpg";
},{}],"assets/maps/peninsula_06.jpg":[function(require,module,exports) {
module.exports = "/peninsula_06.b3cbc4af.jpg";
},{}],"assets/maps/peninsula_07.jpg":[function(require,module,exports) {
module.exports = "/peninsula_07.709b758b.jpg";
},{}],"assets/maps/peninsula_08.jpg":[function(require,module,exports) {
module.exports = "/peninsula_08.4ad6d946.jpg";
},{}],"assets/maps/peninsula_09.jpg":[function(require,module,exports) {
module.exports = "/peninsula_09.138a4087.jpg";
},{}],"assets/maps/planet_01.jpg":[function(require,module,exports) {
module.exports = "/planet_01.d487ffac.jpg";
},{}],"assets/maps/planet_02.jpg":[function(require,module,exports) {
module.exports = "/planet_02.a9f94056.jpg";
},{}],"assets/maps/planet_03.jpg":[function(require,module,exports) {
module.exports = "/planet_03.54dedb72.jpg";
},{}],"assets/maps/planet_04.jpg":[function(require,module,exports) {
module.exports = "/planet_04.7cd3b62d.jpg";
},{}],"assets/maps/planet_05.jpg":[function(require,module,exports) {
module.exports = "/planet_05.aeab4696.jpg";
},{}],"assets/maps/planet_06.jpg":[function(require,module,exports) {
module.exports = "/planet_06.72e9f17b.jpg";
},{}],"assets/maps/planet_07.jpg":[function(require,module,exports) {
module.exports = "/planet_07.ba89b564.jpg";
},{}],"assets/maps/planet_08.jpg":[function(require,module,exports) {
module.exports = "/planet_08.1160f664.jpg";
},{}],"assets/maps/planet_09.jpg":[function(require,module,exports) {
module.exports = "/planet_09.54b7c883.jpg";
},{}],"assets/maps/planet_10.jpg":[function(require,module,exports) {
module.exports = "/planet_10.084b0251.jpg";
},{}],"assets/maps/planet_11.jpg":[function(require,module,exports) {
module.exports = "/planet_11.d270e988.jpg";
},{}],"assets/maps/planet_12.jpg":[function(require,module,exports) {
module.exports = "/planet_12.919fd0be.jpg";
},{}],"assets/maps/planet_13.jpg":[function(require,module,exports) {
module.exports = "/planet_13.344016f9.jpg";
},{}],"assets/maps/planet_14.jpg":[function(require,module,exports) {
module.exports = "/planet_14.583ef5a2.jpg";
},{}],"assets/maps/planet_15.jpg":[function(require,module,exports) {
module.exports = "/planet_15.193489c2.jpg";
},{}],"assets/maps/planet_16.jpg":[function(require,module,exports) {
module.exports = "/planet_16.42738b2a.jpg";
},{}],"assets/maps/planet_17.jpg":[function(require,module,exports) {
module.exports = "/planet_17.f4d046a2.jpg";
},{}],"assets/maps/planet_18.jpg":[function(require,module,exports) {
module.exports = "/planet_18.a921ad53.jpg";
},{}],"assets/maps/planet_19.jpg":[function(require,module,exports) {
module.exports = "/planet_19.2b712243.jpg";
},{}],"assets/maps/planet_20.jpg":[function(require,module,exports) {
module.exports = "/planet_20.52d71e2f.jpg";
},{}],"assets/maps/planet_21.jpg":[function(require,module,exports) {
module.exports = "/planet_21.05c1d743.jpg";
},{}],"assets/maps/planet_22.jpg":[function(require,module,exports) {
module.exports = "/planet_22.6a4472ae.jpg";
},{}],"assets/maps/planet_23.jpg":[function(require,module,exports) {
module.exports = "/planet_23.6638ed0d.jpg";
},{}],"assets/maps/planet_24.jpg":[function(require,module,exports) {
module.exports = "/planet_24.56e97113.jpg";
},{}],"assets/maps/planet_25.jpg":[function(require,module,exports) {
module.exports = "/planet_25.6ff61815.jpg";
},{}],"assets/maps/region_1010001.jpg":[function(require,module,exports) {
module.exports = "/region_1010001.2b1135bf.jpg";
},{}],"assets/maps/region_1010002.jpg":[function(require,module,exports) {
module.exports = "/region_1010002.e378712b.jpg";
},{}],"assets/maps/region_1010003.jpg":[function(require,module,exports) {
module.exports = "/region_1010003.a9d775c3.jpg";
},{}],"assets/maps/region_1010004.jpg":[function(require,module,exports) {
module.exports = "/region_1010004.3b4f9e0e.jpg";
},{}],"assets/maps/region_1010005.jpg":[function(require,module,exports) {
module.exports = "/region_1010005.6e10f3df.jpg";
},{}],"assets/maps/region_1010006.jpg":[function(require,module,exports) {
module.exports = "/region_1010006.8f6fdcd3.jpg";
},{}],"assets/maps/region_1010007.jpg":[function(require,module,exports) {
module.exports = "/region_1010007.9a8eb36c.jpg";
},{}],"assets/maps/region_1010008.jpg":[function(require,module,exports) {
module.exports = "/region_1010008.d7723e74.jpg";
},{}],"assets/maps/region_1010009.jpg":[function(require,module,exports) {
module.exports = "/region_1010009.02fb36ff.jpg";
},{}],"assets/maps/solar_system_01.jpg":[function(require,module,exports) {
module.exports = "/solar_system_01.07ec30fb.jpg";
},{}],"assets/maps/solar_system_02.jpg":[function(require,module,exports) {
module.exports = "/solar_system_02.fb52e208.jpg";
},{}],"assets/maps/solar_system_03.jpg":[function(require,module,exports) {
module.exports = "/solar_system_03.58731621.jpg";
},{}],"assets/maps/solar_system_04.jpg":[function(require,module,exports) {
module.exports = "/solar_system_04.f7cc52aa.jpg";
},{}],"assets/maps/solar_system_05.jpg":[function(require,module,exports) {
module.exports = "/solar_system_05.155ba0fb.jpg";
},{}],"assets/maps/solar_system_06.jpg":[function(require,module,exports) {
module.exports = "/solar_system_06.35d0a931.jpg";
},{}],"assets/maps/solar_system_07.jpg":[function(require,module,exports) {
module.exports = "/solar_system_07.5a28a226.jpg";
},{}],"assets/maps/solar_system_08.jpg":[function(require,module,exports) {
module.exports = "/solar_system_08.30c37616.jpg";
},{}],"assets/maps/solar_system_09.jpg":[function(require,module,exports) {
module.exports = "/solar_system_09.fad19190.jpg";
},{}],"assets/maps/spiral_arm_01.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_01.ab7b2792.jpg";
},{}],"assets/maps/spiral_arm_02.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_02.c7891ef2.jpg";
},{}],"assets/maps/spiral_arm_03.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_03.b3d29c16.jpg";
},{}],"assets/maps/spiral_arm_04.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_04.1346f759.jpg";
},{}],"assets/maps/spiral_arm_05.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_05.eae50a73.jpg";
},{}],"assets/maps/spiral_arm_06.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_06.c140045a.jpg";
},{}],"assets/maps/spiral_arm_07.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_07.bc5305d5.jpg";
},{}],"assets/maps/spiral_arm_08.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_08.9b92ec1f.jpg";
},{}],"assets/maps/spiral_arm_09.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_09.72d7da1b.jpg";
},{}],"assets/maps/spiral_arm_10.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_10.69114706.jpg";
},{}],"assets/maps/spiral_arm_11.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_11.b130177f.jpg";
},{}],"assets/maps/spiral_arm_12.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_12.78dc0187.jpg";
},{}],"assets/maps/spiral_arm_13.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_13.fd8ac19e.jpg";
},{}],"assets/maps/spiral_arm_14.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_14.526549c6.jpg";
},{}],"assets/maps/spiral_arm_15.jpg":[function(require,module,exports) {
module.exports = "/spiral_arm_15.2c615353.jpg";
},{}],"assets/maps/supercluster_01.jpg":[function(require,module,exports) {
module.exports = "/supercluster_01.3abf0ed9.jpg";
},{}],"assets/maps/supercluster_02.jpg":[function(require,module,exports) {
module.exports = "/supercluster_02.7f820a76.jpg";
},{}],"assets/maps/supercluster_03.jpg":[function(require,module,exports) {
module.exports = "/supercluster_03.54a95777.jpg";
},{}],"assets/maps/supercluster_04.jpg":[function(require,module,exports) {
module.exports = "/supercluster_04.c055e691.jpg";
},{}],"assets/maps/supercluster_05.jpg":[function(require,module,exports) {
module.exports = "/supercluster_05.42dc487b.jpg";
},{}],"assets/maps/supercluster_06.jpg":[function(require,module,exports) {
module.exports = "/supercluster_06.6e5f59e8.jpg";
},{}],"assets/maps/supercluster_07.jpg":[function(require,module,exports) {
module.exports = "/supercluster_07.167c2817.jpg";
},{}],"assets/maps/supercluster_08.jpg":[function(require,module,exports) {
module.exports = "/supercluster_08.16d4c54a.jpg";
},{}],"assets/maps/supercluster_09.jpg":[function(require,module,exports) {
module.exports = "/supercluster_09.96717a98.jpg";
},{}],"assets/maps/*.jpg":[function(require,module,exports) {
module.exports = {
  "continent_01": require("./continent_01.jpg"),
  "continent_03": require("./continent_03.jpg"),
  "continent_02": require("./continent_02.jpg"),
  "continent_05": require("./continent_05.jpg"),
  "continent_06": require("./continent_06.jpg"),
  "continent_04": require("./continent_04.jpg"),
  "continent_07": require("./continent_07.jpg"),
  "continent_09": require("./continent_09.jpg"),
  "continent_08": require("./continent_08.jpg"),
  "continent_11": require("./continent_11.jpg"),
  "continent_10": require("./continent_10.jpg"),
  "continent_12": require("./continent_12.jpg"),
  "continent_13": require("./continent_13.jpg"),
  "continent_14": require("./continent_14.jpg"),
  "cosmic_filament_01": require("./cosmic_filament_01.jpg"),
  "continent_16": require("./continent_16.jpg"),
  "cosmic_filament_03": require("./cosmic_filament_03.jpg"),
  "cosmic_filament_04": require("./cosmic_filament_04.jpg"),
  "cosmic_filament_02": require("./cosmic_filament_02.jpg"),
  "continent_15": require("./continent_15.jpg"),
  "cosmic_filament_05": require("./cosmic_filament_05.jpg"),
  "cosmic_filament_06": require("./cosmic_filament_06.jpg"),
  "cosmic_filament_07": require("./cosmic_filament_07.jpg"),
  "cosmic_filament_09": require("./cosmic_filament_09.jpg"),
  "cosmic_filament_08": require("./cosmic_filament_08.jpg"),
  "cosmic_void_01": require("./cosmic_void_01.jpg"),
  "cosmic_void_02": require("./cosmic_void_02.jpg"),
  "cosmic_void_03": require("./cosmic_void_03.jpg"),
  "cosmic_void_05": require("./cosmic_void_05.jpg"),
  "cosmic_void_04": require("./cosmic_void_04.jpg"),
  "cosmic_void_06": require("./cosmic_void_06.jpg"),
  "cosmic_void_07": require("./cosmic_void_07.jpg"),
  "cosmic_void_08": require("./cosmic_void_08.jpg"),
  "cosmic_void_09": require("./cosmic_void_09.jpg"),
  "galaxy_01": require("./galaxy_01.jpg"),
  "galaxy_02": require("./galaxy_02.jpg"),
  "galaxy_03": require("./galaxy_03.jpg"),
  "galaxy_04": require("./galaxy_04.jpg"),
  "galaxy_05": require("./galaxy_05.jpg"),
  "galaxy_06": require("./galaxy_06.jpg"),
  "galaxy_07": require("./galaxy_07.jpg"),
  "galaxy_08": require("./galaxy_08.jpg"),
  "galaxy_09": require("./galaxy_09.jpg"),
  "galaxy_10": require("./galaxy_10.jpg"),
  "galaxy_11": require("./galaxy_11.jpg"),
  "galaxy_12": require("./galaxy_12.jpg"),
  "galaxy_13": require("./galaxy_13.jpg"),
  "galaxy_14": require("./galaxy_14.jpg"),
  "galaxy_15": require("./galaxy_15.jpg"),
  "local_bubble_01": require("./local_bubble_01.jpg"),
  "local_bubble_03": require("./local_bubble_03.jpg"),
  "local_bubble_02": require("./local_bubble_02.jpg"),
  "local_bubble_04": require("./local_bubble_04.jpg"),
  "local_bubble_05": require("./local_bubble_05.jpg"),
  "local_bubble_07": require("./local_bubble_07.jpg"),
  "local_bubble_06": require("./local_bubble_06.jpg"),
  "local_bubble_08": require("./local_bubble_08.jpg"),
  "local_bubble_09": require("./local_bubble_09.jpg"),
  "local_bubble_11": require("./local_bubble_11.jpg"),
  "local_bubble_10": require("./local_bubble_10.jpg"),
  "local_bubble_12": require("./local_bubble_12.jpg"),
  "local_cluster_01": require("./local_cluster_01.jpg"),
  "local_cluster_02": require("./local_cluster_02.jpg"),
  "local_cluster_03": require("./local_cluster_03.jpg"),
  "local_cluster_04": require("./local_cluster_04.jpg"),
  "local_galactic_group_01": require("./local_galactic_group_01.jpg"),
  "local_galactic_group_02": require("./local_galactic_group_02.jpg"),
  "local_galactic_group_03": require("./local_galactic_group_03.jpg"),
  "local_galactic_group_04": require("./local_galactic_group_04.jpg"),
  "local_galactic_group_05": require("./local_galactic_group_05.jpg"),
  "local_galactic_group_06": require("./local_galactic_group_06.jpg"),
  "local_galactic_group_07": require("./local_galactic_group_07.jpg"),
  "local_galactic_group_08": require("./local_galactic_group_08.jpg"),
  "local_galactic_group_09": require("./local_galactic_group_09.jpg"),
  "local_galactic_group_10": require("./local_galactic_group_10.jpg"),
  "local_galactic_group_11": require("./local_galactic_group_11.jpg"),
  "local_galactic_group_12": require("./local_galactic_group_12.jpg"),
  "local_galactic_group_13": require("./local_galactic_group_13.jpg"),
  "local_galactic_group_14": require("./local_galactic_group_14.jpg"),
  "local_galactic_group_15": require("./local_galactic_group_15.jpg"),
  "observable_universe_01": require("./observable_universe_01.jpg"),
  "observable_universe_02": require("./observable_universe_02.jpg"),
  "observable_universe_03": require("./observable_universe_03.jpg"),
  "observable_universe_04": require("./observable_universe_04.jpg"),
  "observable_universe_05": require("./observable_universe_05.jpg"),
  "observable_universe_06": require("./observable_universe_06.jpg"),
  "observable_universe_07": require("./observable_universe_07.jpg"),
  "observable_universe_08": require("./observable_universe_08.jpg"),
  "observable_universe_09": require("./observable_universe_09.jpg"),
  "peninsula_01": require("./peninsula_01.jpg"),
  "peninsula_02": require("./peninsula_02.jpg"),
  "peninsula_03": require("./peninsula_03.jpg"),
  "peninsula_04": require("./peninsula_04.jpg"),
  "peninsula_05": require("./peninsula_05.jpg"),
  "peninsula_06": require("./peninsula_06.jpg"),
  "peninsula_07": require("./peninsula_07.jpg"),
  "peninsula_08": require("./peninsula_08.jpg"),
  "peninsula_09": require("./peninsula_09.jpg"),
  "planet_01": require("./planet_01.jpg"),
  "planet_02": require("./planet_02.jpg"),
  "planet_03": require("./planet_03.jpg"),
  "planet_04": require("./planet_04.jpg"),
  "planet_05": require("./planet_05.jpg"),
  "planet_06": require("./planet_06.jpg"),
  "planet_07": require("./planet_07.jpg"),
  "planet_08": require("./planet_08.jpg"),
  "planet_09": require("./planet_09.jpg"),
  "planet_10": require("./planet_10.jpg"),
  "planet_11": require("./planet_11.jpg"),
  "planet_12": require("./planet_12.jpg"),
  "planet_13": require("./planet_13.jpg"),
  "planet_14": require("./planet_14.jpg"),
  "planet_15": require("./planet_15.jpg"),
  "planet_16": require("./planet_16.jpg"),
  "planet_17": require("./planet_17.jpg"),
  "planet_18": require("./planet_18.jpg"),
  "planet_19": require("./planet_19.jpg"),
  "planet_20": require("./planet_20.jpg"),
  "planet_21": require("./planet_21.jpg"),
  "planet_22": require("./planet_22.jpg"),
  "planet_23": require("./planet_23.jpg"),
  "planet_24": require("./planet_24.jpg"),
  "planet_25": require("./planet_25.jpg"),
  "region_1010001": require("./region_1010001.jpg"),
  "region_1010002": require("./region_1010002.jpg"),
  "region_1010003": require("./region_1010003.jpg"),
  "region_1010004": require("./region_1010004.jpg"),
  "region_1010005": require("./region_1010005.jpg"),
  "region_1010006": require("./region_1010006.jpg"),
  "region_1010007": require("./region_1010007.jpg"),
  "region_1010008": require("./region_1010008.jpg"),
  "region_1010009": require("./region_1010009.jpg"),
  "solar_system_01": require("./solar_system_01.jpg"),
  "solar_system_02": require("./solar_system_02.jpg"),
  "solar_system_03": require("./solar_system_03.jpg"),
  "solar_system_04": require("./solar_system_04.jpg"),
  "solar_system_05": require("./solar_system_05.jpg"),
  "solar_system_06": require("./solar_system_06.jpg"),
  "solar_system_07": require("./solar_system_07.jpg"),
  "solar_system_08": require("./solar_system_08.jpg"),
  "solar_system_09": require("./solar_system_09.jpg"),
  "spiral_arm_01": require("./spiral_arm_01.jpg"),
  "spiral_arm_02": require("./spiral_arm_02.jpg"),
  "spiral_arm_03": require("./spiral_arm_03.jpg"),
  "spiral_arm_04": require("./spiral_arm_04.jpg"),
  "spiral_arm_05": require("./spiral_arm_05.jpg"),
  "spiral_arm_06": require("./spiral_arm_06.jpg"),
  "spiral_arm_07": require("./spiral_arm_07.jpg"),
  "spiral_arm_08": require("./spiral_arm_08.jpg"),
  "spiral_arm_09": require("./spiral_arm_09.jpg"),
  "spiral_arm_10": require("./spiral_arm_10.jpg"),
  "spiral_arm_11": require("./spiral_arm_11.jpg"),
  "spiral_arm_12": require("./spiral_arm_12.jpg"),
  "spiral_arm_13": require("./spiral_arm_13.jpg"),
  "spiral_arm_14": require("./spiral_arm_14.jpg"),
  "spiral_arm_15": require("./spiral_arm_15.jpg"),
  "supercluster_01": require("./supercluster_01.jpg"),
  "supercluster_02": require("./supercluster_02.jpg"),
  "supercluster_03": require("./supercluster_03.jpg"),
  "supercluster_04": require("./supercluster_04.jpg"),
  "supercluster_05": require("./supercluster_05.jpg"),
  "supercluster_06": require("./supercluster_06.jpg"),
  "supercluster_07": require("./supercluster_07.jpg"),
  "supercluster_08": require("./supercluster_08.jpg"),
  "supercluster_09": require("./supercluster_09.jpg")
};
},{"./continent_01.jpg":"assets/maps/continent_01.jpg","./continent_03.jpg":"assets/maps/continent_03.jpg","./continent_02.jpg":"assets/maps/continent_02.jpg","./continent_05.jpg":"assets/maps/continent_05.jpg","./continent_06.jpg":"assets/maps/continent_06.jpg","./continent_04.jpg":"assets/maps/continent_04.jpg","./continent_07.jpg":"assets/maps/continent_07.jpg","./continent_09.jpg":"assets/maps/continent_09.jpg","./continent_08.jpg":"assets/maps/continent_08.jpg","./continent_11.jpg":"assets/maps/continent_11.jpg","./continent_10.jpg":"assets/maps/continent_10.jpg","./continent_12.jpg":"assets/maps/continent_12.jpg","./continent_13.jpg":"assets/maps/continent_13.jpg","./continent_14.jpg":"assets/maps/continent_14.jpg","./cosmic_filament_01.jpg":"assets/maps/cosmic_filament_01.jpg","./continent_16.jpg":"assets/maps/continent_16.jpg","./cosmic_filament_03.jpg":"assets/maps/cosmic_filament_03.jpg","./cosmic_filament_04.jpg":"assets/maps/cosmic_filament_04.jpg","./cosmic_filament_02.jpg":"assets/maps/cosmic_filament_02.jpg","./continent_15.jpg":"assets/maps/continent_15.jpg","./cosmic_filament_05.jpg":"assets/maps/cosmic_filament_05.jpg","./cosmic_filament_06.jpg":"assets/maps/cosmic_filament_06.jpg","./cosmic_filament_07.jpg":"assets/maps/cosmic_filament_07.jpg","./cosmic_filament_09.jpg":"assets/maps/cosmic_filament_09.jpg","./cosmic_filament_08.jpg":"assets/maps/cosmic_filament_08.jpg","./cosmic_void_01.jpg":"assets/maps/cosmic_void_01.jpg","./cosmic_void_02.jpg":"assets/maps/cosmic_void_02.jpg","./cosmic_void_03.jpg":"assets/maps/cosmic_void_03.jpg","./cosmic_void_05.jpg":"assets/maps/cosmic_void_05.jpg","./cosmic_void_04.jpg":"assets/maps/cosmic_void_04.jpg","./cosmic_void_06.jpg":"assets/maps/cosmic_void_06.jpg","./cosmic_void_07.jpg":"assets/maps/cosmic_void_07.jpg","./cosmic_void_08.jpg":"assets/maps/cosmic_void_08.jpg","./cosmic_void_09.jpg":"assets/maps/cosmic_void_09.jpg","./galaxy_01.jpg":"assets/maps/galaxy_01.jpg","./galaxy_02.jpg":"assets/maps/galaxy_02.jpg","./galaxy_03.jpg":"assets/maps/galaxy_03.jpg","./galaxy_04.jpg":"assets/maps/galaxy_04.jpg","./galaxy_05.jpg":"assets/maps/galaxy_05.jpg","./galaxy_06.jpg":"assets/maps/galaxy_06.jpg","./galaxy_07.jpg":"assets/maps/galaxy_07.jpg","./galaxy_08.jpg":"assets/maps/galaxy_08.jpg","./galaxy_09.jpg":"assets/maps/galaxy_09.jpg","./galaxy_10.jpg":"assets/maps/galaxy_10.jpg","./galaxy_11.jpg":"assets/maps/galaxy_11.jpg","./galaxy_12.jpg":"assets/maps/galaxy_12.jpg","./galaxy_13.jpg":"assets/maps/galaxy_13.jpg","./galaxy_14.jpg":"assets/maps/galaxy_14.jpg","./galaxy_15.jpg":"assets/maps/galaxy_15.jpg","./local_bubble_01.jpg":"assets/maps/local_bubble_01.jpg","./local_bubble_03.jpg":"assets/maps/local_bubble_03.jpg","./local_bubble_02.jpg":"assets/maps/local_bubble_02.jpg","./local_bubble_04.jpg":"assets/maps/local_bubble_04.jpg","./local_bubble_05.jpg":"assets/maps/local_bubble_05.jpg","./local_bubble_07.jpg":"assets/maps/local_bubble_07.jpg","./local_bubble_06.jpg":"assets/maps/local_bubble_06.jpg","./local_bubble_08.jpg":"assets/maps/local_bubble_08.jpg","./local_bubble_09.jpg":"assets/maps/local_bubble_09.jpg","./local_bubble_11.jpg":"assets/maps/local_bubble_11.jpg","./local_bubble_10.jpg":"assets/maps/local_bubble_10.jpg","./local_bubble_12.jpg":"assets/maps/local_bubble_12.jpg","./local_cluster_01.jpg":"assets/maps/local_cluster_01.jpg","./local_cluster_02.jpg":"assets/maps/local_cluster_02.jpg","./local_cluster_03.jpg":"assets/maps/local_cluster_03.jpg","./local_cluster_04.jpg":"assets/maps/local_cluster_04.jpg","./local_galactic_group_01.jpg":"assets/maps/local_galactic_group_01.jpg","./local_galactic_group_02.jpg":"assets/maps/local_galactic_group_02.jpg","./local_galactic_group_03.jpg":"assets/maps/local_galactic_group_03.jpg","./local_galactic_group_04.jpg":"assets/maps/local_galactic_group_04.jpg","./local_galactic_group_05.jpg":"assets/maps/local_galactic_group_05.jpg","./local_galactic_group_06.jpg":"assets/maps/local_galactic_group_06.jpg","./local_galactic_group_07.jpg":"assets/maps/local_galactic_group_07.jpg","./local_galactic_group_08.jpg":"assets/maps/local_galactic_group_08.jpg","./local_galactic_group_09.jpg":"assets/maps/local_galactic_group_09.jpg","./local_galactic_group_10.jpg":"assets/maps/local_galactic_group_10.jpg","./local_galactic_group_11.jpg":"assets/maps/local_galactic_group_11.jpg","./local_galactic_group_12.jpg":"assets/maps/local_galactic_group_12.jpg","./local_galactic_group_13.jpg":"assets/maps/local_galactic_group_13.jpg","./local_galactic_group_14.jpg":"assets/maps/local_galactic_group_14.jpg","./local_galactic_group_15.jpg":"assets/maps/local_galactic_group_15.jpg","./observable_universe_01.jpg":"assets/maps/observable_universe_01.jpg","./observable_universe_02.jpg":"assets/maps/observable_universe_02.jpg","./observable_universe_03.jpg":"assets/maps/observable_universe_03.jpg","./observable_universe_04.jpg":"assets/maps/observable_universe_04.jpg","./observable_universe_05.jpg":"assets/maps/observable_universe_05.jpg","./observable_universe_06.jpg":"assets/maps/observable_universe_06.jpg","./observable_universe_07.jpg":"assets/maps/observable_universe_07.jpg","./observable_universe_08.jpg":"assets/maps/observable_universe_08.jpg","./observable_universe_09.jpg":"assets/maps/observable_universe_09.jpg","./peninsula_01.jpg":"assets/maps/peninsula_01.jpg","./peninsula_02.jpg":"assets/maps/peninsula_02.jpg","./peninsula_03.jpg":"assets/maps/peninsula_03.jpg","./peninsula_04.jpg":"assets/maps/peninsula_04.jpg","./peninsula_05.jpg":"assets/maps/peninsula_05.jpg","./peninsula_06.jpg":"assets/maps/peninsula_06.jpg","./peninsula_07.jpg":"assets/maps/peninsula_07.jpg","./peninsula_08.jpg":"assets/maps/peninsula_08.jpg","./peninsula_09.jpg":"assets/maps/peninsula_09.jpg","./planet_01.jpg":"assets/maps/planet_01.jpg","./planet_02.jpg":"assets/maps/planet_02.jpg","./planet_03.jpg":"assets/maps/planet_03.jpg","./planet_04.jpg":"assets/maps/planet_04.jpg","./planet_05.jpg":"assets/maps/planet_05.jpg","./planet_06.jpg":"assets/maps/planet_06.jpg","./planet_07.jpg":"assets/maps/planet_07.jpg","./planet_08.jpg":"assets/maps/planet_08.jpg","./planet_09.jpg":"assets/maps/planet_09.jpg","./planet_10.jpg":"assets/maps/planet_10.jpg","./planet_11.jpg":"assets/maps/planet_11.jpg","./planet_12.jpg":"assets/maps/planet_12.jpg","./planet_13.jpg":"assets/maps/planet_13.jpg","./planet_14.jpg":"assets/maps/planet_14.jpg","./planet_15.jpg":"assets/maps/planet_15.jpg","./planet_16.jpg":"assets/maps/planet_16.jpg","./planet_17.jpg":"assets/maps/planet_17.jpg","./planet_18.jpg":"assets/maps/planet_18.jpg","./planet_19.jpg":"assets/maps/planet_19.jpg","./planet_20.jpg":"assets/maps/planet_20.jpg","./planet_21.jpg":"assets/maps/planet_21.jpg","./planet_22.jpg":"assets/maps/planet_22.jpg","./planet_23.jpg":"assets/maps/planet_23.jpg","./planet_24.jpg":"assets/maps/planet_24.jpg","./planet_25.jpg":"assets/maps/planet_25.jpg","./region_1010001.jpg":"assets/maps/region_1010001.jpg","./region_1010002.jpg":"assets/maps/region_1010002.jpg","./region_1010003.jpg":"assets/maps/region_1010003.jpg","./region_1010004.jpg":"assets/maps/region_1010004.jpg","./region_1010005.jpg":"assets/maps/region_1010005.jpg","./region_1010006.jpg":"assets/maps/region_1010006.jpg","./region_1010007.jpg":"assets/maps/region_1010007.jpg","./region_1010008.jpg":"assets/maps/region_1010008.jpg","./region_1010009.jpg":"assets/maps/region_1010009.jpg","./solar_system_01.jpg":"assets/maps/solar_system_01.jpg","./solar_system_02.jpg":"assets/maps/solar_system_02.jpg","./solar_system_03.jpg":"assets/maps/solar_system_03.jpg","./solar_system_04.jpg":"assets/maps/solar_system_04.jpg","./solar_system_05.jpg":"assets/maps/solar_system_05.jpg","./solar_system_06.jpg":"assets/maps/solar_system_06.jpg","./solar_system_07.jpg":"assets/maps/solar_system_07.jpg","./solar_system_08.jpg":"assets/maps/solar_system_08.jpg","./solar_system_09.jpg":"assets/maps/solar_system_09.jpg","./spiral_arm_01.jpg":"assets/maps/spiral_arm_01.jpg","./spiral_arm_02.jpg":"assets/maps/spiral_arm_02.jpg","./spiral_arm_03.jpg":"assets/maps/spiral_arm_03.jpg","./spiral_arm_04.jpg":"assets/maps/spiral_arm_04.jpg","./spiral_arm_05.jpg":"assets/maps/spiral_arm_05.jpg","./spiral_arm_06.jpg":"assets/maps/spiral_arm_06.jpg","./spiral_arm_07.jpg":"assets/maps/spiral_arm_07.jpg","./spiral_arm_08.jpg":"assets/maps/spiral_arm_08.jpg","./spiral_arm_09.jpg":"assets/maps/spiral_arm_09.jpg","./spiral_arm_10.jpg":"assets/maps/spiral_arm_10.jpg","./spiral_arm_11.jpg":"assets/maps/spiral_arm_11.jpg","./spiral_arm_12.jpg":"assets/maps/spiral_arm_12.jpg","./spiral_arm_13.jpg":"assets/maps/spiral_arm_13.jpg","./spiral_arm_14.jpg":"assets/maps/spiral_arm_14.jpg","./spiral_arm_15.jpg":"assets/maps/spiral_arm_15.jpg","./supercluster_01.jpg":"assets/maps/supercluster_01.jpg","./supercluster_02.jpg":"assets/maps/supercluster_02.jpg","./supercluster_03.jpg":"assets/maps/supercluster_03.jpg","./supercluster_04.jpg":"assets/maps/supercluster_04.jpg","./supercluster_05.jpg":"assets/maps/supercluster_05.jpg","./supercluster_06.jpg":"assets/maps/supercluster_06.jpg","./supercluster_07.jpg":"assets/maps/supercluster_07.jpg","./supercluster_08.jpg":"assets/maps/supercluster_08.jpg","./supercluster_09.jpg":"assets/maps/supercluster_09.jpg"}],"assets/gameData/achieveData.json":[function(require,module,exports) {
module.exports = [{
  "id": 6001,
  "name": "powerLevel 1e4",
  "note": "",
  "iconFilename": "AchievementIcon_01",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000.0,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6003,
  "name": "powerLevel 1e10",
  "note": "",
  "iconFilename": "AchievementIcon_02",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000000.0,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6005,
  "name": "powerLevel 1e20",
  "note": "",
  "iconFilename": "AchievementIcon_03",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+20,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6006,
  "name": "powerLevel 1e50",
  "note": "",
  "iconFilename": "AchievementIcon_04",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+50,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6007,
  "name": "powerLevel 1e200",
  "note": "",
  "iconFilename": "AchievementIcon_05",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+200,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6008,
  "name": "powerLevel 1e500",
  "note": "",
  "iconFilename": "AchievementIcon_06",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+500,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6009,
  "name": "powerLevel 1e1000",
  "note": "",
  "iconFilename": "AchievementIcon_07",
  "unlockCategory": "stat",
  "conditionType": "powerLevel",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+1000,
  "setID": 8001,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6020,
  "name": "wisdom 1e5",
  "note": "",
  "iconFilename": "AchievementIcon_08",
  "unlockCategory": "stat",
  "conditionType": "wisdom",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e5",
  "setID": 8002,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6021,
  "name": "wisdom 1e50",
  "note": "",
  "iconFilename": "AchievementIcon_09",
  "unlockCategory": "stat",
  "conditionType": "wisdom",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e50",
  "setID": 8002,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6022,
  "name": "wisdom 1e100",
  "note": "note.",
  "iconFilename": "AchievementIcon_10",
  "unlockCategory": "stat",
  "conditionType": "wisdom",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e100",
  "setID": 8002,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6023,
  "name": "wisdom 1e500",
  "note": "",
  "iconFilename": "AchievementIcon_11",
  "unlockCategory": "stat",
  "conditionType": "wisdom",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e500",
  "setID": 8002,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 2000000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6024,
  "name": "wisdom 1e1000",
  "note": "",
  "iconFilename": "AchievementIcon_12",
  "unlockCategory": "stat",
  "conditionType": "wisdom",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e1000",
  "setID": 8002,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 2000000000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6030,
  "name": "force 1e5",
  "note": "",
  "iconFilename": "AchievementIcon_13",
  "unlockCategory": "stat",
  "conditionType": "force",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e5",
  "setID": 8003,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6031,
  "name": "force 1e50",
  "note": "",
  "iconFilename": "AchievementIcon_14",
  "unlockCategory": "stat",
  "conditionType": "force",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e50",
  "setID": 8003,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6032,
  "name": "force 1e100",
  "note": "",
  "iconFilename": "AchievementIcon_15",
  "unlockCategory": "stat",
  "conditionType": "force",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e100",
  "setID": 8003,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6033,
  "name": "force 1e500",
  "note": "",
  "iconFilename": "AchievementIcon_16",
  "unlockCategory": "stat",
  "conditionType": "force",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e500",
  "setID": 8003,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 2000000000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6034,
  "name": "force 1e1000",
  "note": "",
  "iconFilename": "AchievementIcon_17",
  "unlockCategory": "stat",
  "conditionType": "force",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e1000",
  "setID": 8003,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 2000000000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6040,
  "name": "energy 1e5",
  "note": "note.",
  "iconFilename": "AchievementIcon_18",
  "unlockCategory": "stat",
  "conditionType": "energy",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e5",
  "setID": 8004,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6041,
  "name": "energy 1e50",
  "note": "",
  "iconFilename": "AchievementIcon_19",
  "unlockCategory": "stat",
  "conditionType": "energy",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e50",
  "setID": 8004,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6042,
  "name": "energy 1e100",
  "note": "",
  "iconFilename": "AchievementIcon_20",
  "unlockCategory": "stat",
  "conditionType": "energy",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e100",
  "setID": 8004,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6043,
  "name": "energy 1e500",
  "note": "",
  "iconFilename": "AchievementIcon_21",
  "unlockCategory": "stat",
  "conditionType": "energy",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e500",
  "setID": 8004,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 2000000000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6044,
  "name": "energy 1e1000",
  "note": "",
  "iconFilename": "AchievementIcon_22",
  "unlockCategory": "stat",
  "conditionType": "energy",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": "1e1000",
  "setID": 8004,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 2000000000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6050,
  "name": "divine 1e5",
  "note": "",
  "iconFilename": "AchievementIcon_23",
  "unlockCategory": "stat",
  "conditionType": "divine",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100000.0,
  "setID": 8005,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6051,
  "name": "divine 1e10",
  "note": "",
  "iconFilename": "AchievementIcon_24",
  "unlockCategory": "stat",
  "conditionType": "divine",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000000.0,
  "setID": 8005,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6052,
  "name": "divine 1e15",
  "note": "",
  "iconFilename": "AchievementIcon_25",
  "unlockCategory": "stat",
  "conditionType": "divine",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000000000000000.0,
  "setID": 8005,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6053,
  "name": "divine 1e20",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "divine",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+20,
  "setID": 8005,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6054,
  "name": "divine 1e25",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "divine",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1e+25,
  "setID": 8005,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1000000,
    "value": 100000,
    "active": false
  }]
}, {
  "id": 6070,
  "name": "world1Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000001,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6071,
  "name": "world2Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6072,
  "name": "world3Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6073,
  "name": "world4Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6074,
  "name": "world5Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6075,
  "name": "world6Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000006,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6076,
  "name": "world7Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000007,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6077,
  "name": "world8Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000008,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6078,
  "name": "world9Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000009,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6079,
  "name": "world10Achieve",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isProgressed",
  "dependentID": 1000010,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8006,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6090,
  "name": "lifetimeCrystalEarnedAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeCrystalEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000.0,
  "setID": 8007,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6091,
  "name": "lifetimeCrystalEarnedAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeCrystalEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000.0,
  "setID": 8007,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6092,
  "name": "lifetimeCrystalEarnedAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeCrystalEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000000.0,
  "setID": 8007,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6093,
  "name": "lifetimeCrystalEarnedAchieve4",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeCrystalEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000000000.0,
  "setID": 8007,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6100,
  "name": "lifetimeEssenceEarnedAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeEssenceEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000.0,
  "setID": 8008,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6101,
  "name": "lifetimeEssenceEarnedAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeEssenceEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000.0,
  "setID": 8008,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6102,
  "name": "lifetimeEssenceEarnedAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeEssenceEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000000.0,
  "setID": 8008,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6103,
  "name": "lifetimeEssenceEarnedAchieve4",
  "note": "note.",
  "unlockCategory": "stat",
  "conditionType": "lifetimeEssenceEarned",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10000000000000.0,
  "setID": 8008,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6110,
  "name": "totalPlaytimeAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "totalPlaytime",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 3600000.0,
  "setID": 8009,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6111,
  "name": "totalPlaytimeAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "totalPlaytime",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 14400000.0,
  "setID": 8009,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6112,
  "name": "totalPlaytimeAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "totalPlaytime",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 28800000.0,
  "setID": 8009,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6113,
  "name": "totalPlaytimeAchieve4",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "totalPlaytime",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 86400000.0,
  "setID": 8009,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6114,
  "name": "totalPlaytimeAchieve5",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "totalPlaytime",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 172800000.0,
  "setID": 8009,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6115,
  "name": "totalPlaytimeAchieve6",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "totalPlaytime",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 604800000.0,
  "setID": 8009,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6120,
  "name": "lifetimeZoneCompletionsAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeZoneCompletions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8010,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6121,
  "name": "lifetimeZoneCompletionsAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeZoneCompletions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 50,
  "setID": 8010,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6122,
  "name": "lifetimeZoneCompletionsAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeZoneCompletions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 500,
  "setID": 8010,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6123,
  "name": "lifetimeZoneCompletionsAchieve4",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeZoneCompletions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8010,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6130,
  "name": "lifetimeRegionProgressionsAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeRegionProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8011,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6131,
  "name": "lifetimeRegionProgressionsAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeRegionProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10,
  "setID": 8011,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6132,
  "name": "lifetimeRegionProgressionsAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeRegionProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8011,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6133,
  "name": "lifetimeRegionProgressionsAchieve4",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeRegionProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8011,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6140,
  "name": "lifetimeWorldProgressionsAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeWorldProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8012,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6141,
  "name": "lifetimeWorldProgressionsAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeWorldProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10,
  "setID": 8012,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6142,
  "name": "lifetimeWorldProgressionsAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeWorldProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8012,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6143,
  "name": "lifetimeWorldProgressionsAchieve4",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeWorldProgressions",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8012,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6150,
  "name": "lifetimeKillsAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeKills",
  "dependentID": null,
  "radianceReward": 1,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5,
  "setID": 8013,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6151,
  "name": "lifetimeKillsAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeKills",
  "dependentID": null,
  "radianceReward": 100,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 25,
  "setID": 8013,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6152,
  "name": "lifetimeKillsAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeKills",
  "dependentID": null,
  "radianceReward": 1000,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 125,
  "setID": 8013,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6153,
  "name": "lifetimeKillsAchieve4",
  "note": "note.",
  "unlockCategory": "stat",
  "conditionType": "lifetimeKills",
  "dependentID": null,
  "radianceReward": 10000,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 500,
  "setID": 8013,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6160,
  "name": "maxTournamentRankAchieve1",
  "note": "",
  "unlockCategory": "statInverse",
  "conditionType": "maxTournamentRank",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 90,
  "setID": 8014,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6161,
  "name": "maxTournamentRankAchieve2",
  "note": "note.",
  "unlockCategory": "statInverse",
  "conditionType": "maxTournamentRank",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 60,
  "setID": 8014,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6162,
  "name": "maxTournamentRankAchieve3",
  "note": "",
  "unlockCategory": "statInverse",
  "conditionType": "maxTournamentRank",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 30,
  "setID": 8014,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6163,
  "name": "maxTournamentRankAchieve4",
  "note": "note.",
  "unlockCategory": "statInverse",
  "conditionType": "maxTournamentRank",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10,
  "setID": 8014,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6164,
  "name": "maxTournamentRankAchieve5",
  "note": "",
  "unlockCategory": "statInverse",
  "conditionType": "maxTournamentRank",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8014,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6170,
  "name": "lifetimeFighterTiersDefeatedAchieve1",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeFighterTiersDefeated",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8015,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6171,
  "name": "lifetimeFighterTiersDefeatedAchieve2",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeFighterTiersDefeated",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 10,
  "setID": 8015,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6172,
  "name": "lifetimeFighterTiersDefeatedAchieve3",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeFighterTiersDefeated",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8015,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6173,
  "name": "lifetimeFighterTiersDefeatedAchieve4",
  "note": "",
  "unlockCategory": "stat",
  "conditionType": "lifetimeFighterTiersDefeated",
  "dependentID": null,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8015,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6199,
  "name": "legendaryBossAchieve1",
  "note": "note.",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 90507,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6200,
  "name": "legendaryBossAchieve2",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 91307,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6201,
  "name": "legendaryBossAchieve3",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 92007,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6202,
  "name": "legendaryBossAchieve4",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 92707,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6203,
  "name": "legendaryBossAchieve5",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 93407,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6204,
  "name": "legendaryBossAchieve6",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 94207,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6205,
  "name": "legendaryBossAchieve7",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 94907,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6206,
  "name": "legendaryBossAchieve8",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "isDefeated",
  "dependentID": 95607,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": true,
  "setID": 8016,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6240,
  "name": "trainAchieve1",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1001,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8017,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6241,
  "name": "trainAchieve2",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8017,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6242,
  "name": "trainAchieve3",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8017,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6243,
  "name": "trainAchieve4",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8017,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6248,
  "name": "trainAchieve9",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8019,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6249,
  "name": "trainAchieve10",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8019,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6250,
  "name": "trainAchieve11",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8019,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6251,
  "name": "trainAchieve12",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8019,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6252,
  "name": "trainAchieve13",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8020,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6253,
  "name": "trainAchieve14",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8020,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6254,
  "name": "trainAchieve15",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8020,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6255,
  "name": "trainAchieve16",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8020,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6256,
  "name": "trainAchieve17",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8021,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6257,
  "name": "trainAchieve18",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8021,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6258,
  "name": "trainAchieve19",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8021,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6259,
  "name": "trainAchieve20",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8021,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6260,
  "name": "trainAchieve21",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8022,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6261,
  "name": "trainAchieve22",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8022,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6262,
  "name": "trainAchieve23",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8022,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6263,
  "name": "trainAchieve24",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 1005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8022,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6270,
  "name": "trainAchieve25",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2001,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8023,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6271,
  "name": "trainAchieve26",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2001,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8023,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6272,
  "name": "trainAchieve27",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2001,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8023,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6273,
  "name": "trainAchieve28",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2001,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8023,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6274,
  "name": "trainAchieve29",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8024,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6275,
  "name": "trainAchieve30",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8024,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6276,
  "name": "trainAchieve31",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8024,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6277,
  "name": "trainAchieve32",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2002,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8024,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6278,
  "name": "trainAchieve33",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8025,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6279,
  "name": "trainAchieve34",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8025,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6280,
  "name": "trainAchieve35",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8025,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6281,
  "name": "trainAchieve36",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2003,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8025,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6282,
  "name": "trainAchieve37",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8026,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6283,
  "name": "trainAchieve38",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8026,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6284,
  "name": "trainAchieve39",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8026,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6285,
  "name": "trainAchieve40",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2004,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8026,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6286,
  "name": "trainAchieve41",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8027,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6287,
  "name": "trainAchieve42",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8027,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6288,
  "name": "trainAchieve43",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8027,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 400,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6289,
  "name": "trainAchieve44",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "level",
  "dependentID": 2005,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8027,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 800,
    "value": 10,
    "active": false
  }]
}, {
  "id": 6300,
  "name": "trainAchieve45",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 611,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8028,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6301,
  "name": "trainAchieve46",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 611,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8028,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6302,
  "name": "trainAchieve47",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 611,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8028,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6303,
  "name": "trainAchieve48",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 611,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8028,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6304,
  "name": "trainAchieve49",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 612,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8029,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6305,
  "name": "trainAchieve50",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 612,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8029,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6306,
  "name": "trainAchieve51",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 612,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8029,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6307,
  "name": "trainAchieve52",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 612,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8029,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6308,
  "name": "trainAchieve53",
  "note": "note.",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 613,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8030,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6309,
  "name": "trainAchieve54",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 613,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8030,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6310,
  "name": "trainAchieve55",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 613,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8030,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6311,
  "name": "trainAchieve56",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 613,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8030,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6312,
  "name": "trainAchieve57",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 614,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8031,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6313,
  "name": "trainAchieve58",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 614,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8031,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6314,
  "name": "trainAchieve59",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 614,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8031,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6315,
  "name": "trainAchieve60",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 614,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8031,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6316,
  "name": "trainAchieve61",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 615,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8032,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6317,
  "name": "trainAchieve62",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 615,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8032,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6318,
  "name": "trainAchieve63",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 615,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8032,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6319,
  "name": "trainAchieve64",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 615,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8032,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6330,
  "name": "trainAchieve65",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 711,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8033,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6331,
  "name": "trainAchieve66",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 711,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8033,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6332,
  "name": "trainAchieve67",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 711,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8033,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6333,
  "name": "trainAchieve68",
  "note": "note.",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 711,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8033,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6334,
  "name": "trainAchieve69",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 712,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8034,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6335,
  "name": "trainAchieve70",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 712,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8034,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6336,
  "name": "trainAchieve71",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 712,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8034,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6337,
  "name": "trainAchieve72",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 712,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8034,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6338,
  "name": "trainAchieve73",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 713,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8035,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6339,
  "name": "trainAchieve74",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 713,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8035,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6340,
  "name": "trainAchieve75",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 713,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8035,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6341,
  "name": "trainAchieve76",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 713,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8035,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6342,
  "name": "trainAchieve77",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 714,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8036,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6343,
  "name": "trainAchieve78",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 714,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8036,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6344,
  "name": "trainAchieve79",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 714,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8036,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6345,
  "name": "trainAchieve80",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 714,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8036,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6346,
  "name": "trainAchieve81",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 715,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1,
  "setID": 8037,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6347,
  "name": "trainAchieve82",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 715,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 100,
  "setID": 8037,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6348,
  "name": "trainAchieve83",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 715,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 1000,
  "setID": 8037,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 6349,
  "name": "trainAchieve84",
  "note": "",
  "unlockCategory": "id",
  "conditionType": "manualLevel",
  "dependentID": 715,
  "radianceReward": 10,
  "triggerType": "setActive",
  "triggerValue": null,
  "conditionValue": 5000,
  "setID": 8037,
  "mods": [{
    "type": "prodBase",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}];
},{}],"assets/gameData/achieveSetData.json":[function(require,module,exports) {
module.exports = [{
  "id": 8017,
  "name": "achieveSet17",
  "color": "var(--color-17)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8018,
  "name": "achieveSet18",
  "color": "var(--color-18)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8019,
  "name": "achieveSet19",
  "color": "var(--color-19)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8020,
  "name": "achieveSet20",
  "color": "var(--color-20)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8021,
  "name": "achieveSet21",
  "color": "var(--color-21)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8022,
  "name": "achieveSet22",
  "color": "var(--color-22)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8023,
  "name": "achieveSet23",
  "color": "var(--color-23)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8024,
  "name": "achieveSet24",
  "color": "var(--color-24)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8025,
  "name": "achieveSet25",
  "color": "var(--color-25)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8026,
  "name": "achieveSet26",
  "color": "var(--color-26)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8027,
  "name": "achieveSet27",
  "color": "var(--color-27)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8028,
  "name": "achieveSet28",
  "color": "var(--color-28)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8029,
  "name": "achieveSet29",
  "color": "var(--color-29)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8030,
  "name": "achieveSet30",
  "color": "var(--color-30)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8031,
  "name": "achieveSet31",
  "color": "var(--color-31)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8032,
  "name": "achieveSet32",
  "color": "var(--color-32)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8033,
  "name": "achieveSet33",
  "color": "var(--color-33)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8034,
  "name": "achieveSet34",
  "color": "var(--color-34)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8035,
  "name": "achieveSet35",
  "color": "var(--color-35)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8036,
  "name": "achieveSet36",
  "color": "var(--color-36)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8037,
  "name": "achieveSet37",
  "color": "var(--color-37)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8001,
  "name": "achieveSet1",
  "color": "var(--color-1)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8002,
  "name": "achieveSet2",
  "color": "var(--color-2)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8003,
  "name": "achieveSet3",
  "description": "1 skillpoints",
  "color": "var(--color-3)",
  "bonusType": "skillpoints",
  "bonusValue": 1,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8004,
  "name": "achieveSet4",
  "color": "var(--color-4)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8005,
  "name": "achieveSet5",
  "color": "var(--color-5)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8006,
  "name": "achieveSet6",
  "color": "var(--color-6)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8007,
  "name": "achieveSet7",
  "color": "var(--color-7)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8008,
  "name": "achieveSet8",
  "color": "var(--color-8)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8009,
  "name": "achieveSet9",
  "color": "var(--color-9)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8010,
  "name": "achieveSet10",
  "color": "var(--color-10)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8011,
  "name": "achieveSet11",
  "color": "var(--color-11)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8012,
  "name": "achieveSet12",
  "color": "var(--color-12)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8013,
  "name": "achieveSet13",
  "color": "var(--color-13)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8014,
  "name": "achieveSet14",
  "color": "var(--color-14)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8015,
  "name": "achieveSet15",
  "color": "var(--color-15)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 8016,
  "name": "achieveSet16",
  "color": "var(--color-16)",
  "bonusType": "mod",
  "bonusValue": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}];
},{}],"assets/gameData/artifactData.json":[function(require,module,exports) {
module.exports = [{
  "id": 5010,
  "name": "Garden Gnome Hat",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Helm",
  "description": "",
  "costType": "alphaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.5,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Bronze Colander Crown",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Wi-Fi Enabled Toaster Helmet",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "The Ultimate Tin Foil Hat",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5020,
  "name": "String Cheese Necklace",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Amulet",
  "description": "",
  "costType": "betaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Bling Bling Pendant",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Zip-Tie Tie",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Glowing LED Scarf",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5030,
  "name": "Bottle Cap Stud",
  "note": "",
  "evolutionTier": 1,
  "gearType": "LeftEarring",
  "description": "",
  "costType": "gammaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Swirly Aluminum Earring",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Bluetooth Earbud",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Intergalactic Walkie-Talkie Stud",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5040,
  "name": "Pasta Shell Earring",
  "note": "",
  "evolutionTier": 1,
  "gearType": "RightEarring",
  "description": "",
  "costType": "deltaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Gold Spray-Painted Washer",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Diamond Plastic Earring",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Subspace Transmission Tuner",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5050,
  "name": "Burlap Sack",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Armor",
  "description": "",
  "costType": "epsilonShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "'100% Authentic' Leather Armor",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Steel Wool Sweater",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Tunic of Indistinguishable Colors",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5060,
  "name": "Duck Tape Wraps",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Gauntlets",
  "description": "",
  "costType": "zetaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Deluxe Oven Mitts",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Swiss Army Gauntlets",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Robotic Finger Exercisers",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5070,
  "name": "Cardboard Sandals",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Boots",
  "description": "",
  "costType": "etaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Boots of Unexpected Speed",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Hoverboard Sneakers",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Differential Equations Boots",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5080,
  "name": "Stick Ring",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Ring1",
  "description": "",
  "costType": "thetaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Ring Pop",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Finger-Toe Ring",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Electrically Charged Friendship Band",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5090,
  "name": "Pebble Ring",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Ring2",
  "description": "",
  "costType": "iotaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Onion Ring",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Fitness Tracker Ring",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Alternate Reality Mood Ring",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5100,
  "name": "Broken Stick",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Weapon1",
  "description": "",
  "costType": "kappaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Damascus Steel Foam Sword",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Lighter Saber",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Star-Pulverizing Rubber Hammer",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5110,
  "name": "Potato Gun",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Weapon2",
  "description": "",
  "costType": "lambdaShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Supersoaker 5000",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Railgun with Training Wheels",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Singularity Squirt Gun",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}, {
  "id": 5120,
  "name": "Rabbit's Foot",
  "note": "",
  "evolutionTier": 1,
  "gearType": "Trinket",
  "description": "(Still attached to rabbit)",
  "costType": "muShard",
  "maxLevel": 50,
  "costBase": 10,
  "costGrowthRate": 1.1,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 22,
    "value": 22,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Worry Stone",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 10
  }, {
    "evolutionTier": 3,
    "name": "Infinite Paperclip Chain",
    "note": "",
    "description": "",
    "maxLevel": 50,
    "newModValue": 100
  }, {
    "evolutionTier": 4,
    "name": "Schrodinger's Paperweight",
    "note": "",
    "description": "",
    "maxLevel": 1e100,
    "newModValue": 1000
  }]
}];
},{}],"assets/gameData/essenceUpgradeData.json":[function(require,module,exports) {
module.exports = [{
  "id": 100001,
  "name": "Boost Force",
  "note": "",
  "description": "all fTrain + 1 prodBase",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": true,
  "parentID": null,
  "angleFromParent": null,
  "distanceFromParent": null,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false
  }]
}, {
  "id": 100002,
  "name": "Boost Zones",
  "note": "",
  "description": "all zone prodMult * (2 * lvl)",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100001,
  "angleFromParent": 360,
  "distanceFromParent": 100,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100003,
  "name": "Unlock Skills 1",
  "note": "",
  "description": "unlock skilltree path 1",
  "level": 0,
  "maxLevel": 1,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100001,
  "angleFromParent": 180,
  "distanceFromParent": 100,
  "mods": []
}, {
  "id": 100004,
  "name": "Boost Skillpoints",
  "note": "",
  "description": "start with +10sp * lvl",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": "skillpoints",
  "prodBase": 10,
  "prodGrowthRate": 1.1,
  "parentID": 100001,
  "angleFromParent": 270,
  "distanceFromParent": 100,
  "mods": []
}, {
  "id": 100005,
  "name": "Boost running",
  "note": "",
  "description": "start with force training 1 lvl 10 * this lvl",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": "baseFeatureLevel",
  "prodBase": 10,
  "prodGrowthRate": 1.1,
  "parentID": 100001,
  "angleFromParent": 90,
  "distanceFromParent": 100,
  "specialTargetID": 1001,
  "mods": []
}, {
  "id": 100007,
  "name": "Boost Training Production",
  "note": "",
  "description": "",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100002,
  "angleFromParent": 0,
  "distanceFromParent": 100,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100008,
  "name": "Reduce Training Cost",
  "note": "",
  "description": "",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100003,
  "angleFromParent": 180,
  "distanceFromParent": 100,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100009,
  "name": "Reduce Artifact Costs",
  "note": "",
  "description": "",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100002,
  "angleFromParent": 0,
  "distanceFromParent": 100,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "artifacts",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100010,
  "name": "Boost Force Training",
  "note": "",
  "description": "",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100008,
  "angleFromParent": 180,
  "distanceFromParent": 100,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100011,
  "name": "Boost Wisdom Training",
  "note": "",
  "description": "",
  "level": 0,
  "maxLevel": 10,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100010,
  "angleFromParent": 270,
  "distanceFromParent": 100,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100012,
  "name": "Boost Energy Training",
  "note": "",
  "description": "",
  "level": 0,
  "maxLevel": 1,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": "unlock",
  "prodBase": 10,
  "prodGrowthRate": 1.1,
  "parentID": 100010,
  "angleFromParent": 90,
  "distanceFromParent": 100,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 100013,
  "name": "Auto Conquest Progression",
  "note": "",
  "description": "autoConquestProgression enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": "autoConquestProgression",
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100005,
  "angleFromParent": 90,
  "distanceFromParent": 100
}, {
  "id": 100014,
  "name": "Auto Tournament",
  "note": "",
  "description": "autoTournamentProgression enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "essence",
  "costBase": 1,
  "costGrowthRate": 2,
  "prodType": "autoTournamentProgression",
  "prodBase": null,
  "prodGrowthRate": null,
  "parentID": 100013,
  "angleFromParent": 90,
  "distanceFromParent": 100
}];
},{}],"assets/gameData/fighterData.json":[function(require,module,exports) {
module.exports = [{
  "name": "Sparrow's Fist Simon",
  "note": "",
  "description": "",
  "costBase": 1e10,
  "tier": 1,
  "prodBase": 100,
  "active": true
}, {
  "name": "Grasshopper's Leap Gareth",
  "note": "",
  "description": "",
  "costBase": 1e11,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Iron Fist Isaac",
  "note": "",
  "description": "",
  "costBase": 1e12,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Steel Arm Stanley",
  "note": "",
  "description": "",
  "costBase": 1e13,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Boulder Bash Bradley",
  "note": "",
  "description": "",
  "costBase": 1e14,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Granite Grip Grant",
  "note": "",
  "description": "",
  "costBase": 1e15,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Titanium Terry",
  "note": "",
  "description": "",
  "costBase": 1e16,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cheetah's Speed Chester",
  "note": "",
  "description": "",
  "costBase": 1e17,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Python's Coil Patrick",
  "note": "",
  "description": "",
  "costBase": 1e18,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cobra's Strike Clifford",
  "note": "",
  "description": "",
  "costBase": 1e19,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Swift Sparrow Steve",
  "note": "",
  "description": "",
  "costBase": 1e20,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Jumping Jack Jackson",
  "note": "",
  "description": "",
  "costBase": 1e21,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Rocky Road Robert",
  "note": "",
  "description": "",
  "costBase": 1e22,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Sturdy Samson",
  "note": "",
  "description": "",
  "costBase": 1e23,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Mighty Mike",
  "note": "",
  "description": "",
  "costBase": 1e24,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Granite Gaze George",
  "note": "",
  "description": "",
  "costBase": 1e25,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Titanic Tim",
  "note": "",
  "description": "",
  "costBase": 1e26,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cheetah Charge Chuck",
  "note": "",
  "description": "",
  "costBase": 1e27,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Slithering Steve",
  "note": "",
  "description": "",
  "costBase": 1e28,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Venomous Victor",
  "note": "",
  "description": "",
  "costBase": 1e29,
  "tier": 1,
  "prodBase": 100,
  "active": false
}, {
  "name": "Silver Serpent Samantha",
  "note": "",
  "description": "",
  "costBase": 1e20,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Golden Griffin George",
  "note": "",
  "description": "",
  "costBase": 1e21,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Thunderstrike Theo",
  "note": "",
  "description": "",
  "costBase": 1e22,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Stormy Saber Sara",
  "note": "",
  "description": "",
  "costBase": 1e23,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Molten Mace Max",
  "note": "",
  "description": "",
  "costBase": 1e24,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Flameblade Fiona",
  "note": "",
  "description": "",
  "costBase": 1e25,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Aqua Archer Aaron",
  "note": "",
  "description": "",
  "costBase": 1e26,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Frostbite Felix",
  "note": "",
  "description": "",
  "costBase": 1e27,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Diamond Dagger Diane",
  "note": "",
  "description": "",
  "costBase": 1e28,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Platinum Paladin Paul",
  "note": "",
  "description": "",
  "costBase": 1e29,
  "tier": 2,
  "prodBase": 200,
  "active": false
}, {
  "name": "Ironclad Ian",
  "note": "",
  "description": "",
  "costBase": 1e20,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Quick Draw Quentin",
  "note": "",
  "description": "",
  "costBase": 1e21,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Brass Knuckle Brandon",
  "note": "",
  "description": "",
  "costBase": 1e22,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Viper's Venom Vincent",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Raging Bull Roland",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Savage Wolf Seymour",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Brutal Bear Bernard",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Grizzly's Grasp Graham",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Puma's Pounce Palmer",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Thunder Kick Tyson",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 2,
  "prodBase": 100,
  "active": false
}, {
  "name": "Magnetic Martha",
  "note": "",
  "description": "",
  "costBase": 1e30,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Rapid Raptor Remy",
  "note": "",
  "description": "",
  "costBase": 1e31,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Plasma Pike Peter",
  "note": "",
  "description": "",
  "costBase": 1e32,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Solar Samurai Sam",
  "note": "",
  "description": "",
  "costBase": 1e33,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Lunar Lancer Lana",
  "note": "",
  "description": "",
  "costBase": 1e34,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Venomous Vixen Vera",
  "note": "",
  "description": "",
  "costBase": 1e35,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Blazing Blade Brian",
  "note": "",
  "description": "",
  "costBase": 1e36,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Shadow Strike Sheila",
  "note": "",
  "description": "",
  "costBase": 1e37,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Frosty Fury Fred",
  "note": "",
  "description": "",
  "costBase": 1e38,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Diamondback Dennis",
  "note": "",
  "description": "",
  "costBase": 1e39,
  "tier": 3,
  "prodBase": 300,
  "active": false
}, {
  "name": "Tornado's Twirl Trevor",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Hurricane's Fury Hugh",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Avalanche Alex",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Maelstrom Max",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cyclone's Strike Cyrus",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Inferno's Fist Ivan",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Volcanic Vance",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Meteor Strike Michael",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Comet's Tail Calvin",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Supernova Sam",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 3,
  "prodBase": 100,
  "active": false
}, {
  "name": "Starlight Steve",
  "note": "",
  "description": "",
  "costBase": 1e40,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Galactic Grace Gina",
  "note": "",
  "description": "",
  "costBase": 1e41,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Nebula's Nova Noah",
  "note": "",
  "description": "",
  "costBase": 1e42,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Cosmic Crusher Carla",
  "note": "",
  "description": "",
  "costBase": 1e43,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Asteroid Annihilator Alan",
  "note": "",
  "description": "",
  "costBase": 1e44,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Black Hole Barry",
  "note": "",
  "description": "",
  "costBase": 1e45,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Supernatural Sarah",
  "note": "",
  "description": "",
  "costBase": 1e46,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Celestial Chuck",
  "note": "",
  "description": "",
  "costBase": 1e47,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Quasar Queen Quin",
  "note": "",
  "description": "",
  "costBase": 1e48,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Eclipse Eddie",
  "note": "",
  "description": "",
  "costBase": 1e49,
  "tier": 4,
  "prodBase": 400,
  "active": false
}, {
  "name": "Pulsar Punch Peter",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Nebula's Wrath Neil",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Quasar Quick Quentin",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Galactic Gary",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Big Bang Barry",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Singularity Simon",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Dark Matter Darren",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Quantum Quake Quincy",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Wormhole Walter",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Timebender Timothy",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 4,
  "prodBase": 100,
  "active": false
}, {
  "name": "Photon Fury Phoebe",
  "note": "",
  "description": "",
  "costBase": 1e50,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Plasma Pulse Pauline",
  "note": "",
  "description": "",
  "costBase": 1e51,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Gravity Grenade Greg",
  "note": "",
  "description": "",
  "costBase": 1e52,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Supernova Sally",
  "note": "",
  "description": "",
  "costBase": 1e53,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Astronomical Albert",
  "note": "",
  "description": "",
  "costBase": 1e54,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Galaxy Guardian Gabe",
  "note": "",
  "description": "",
  "costBase": 1e55,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Black Star Bella",
  "note": "",
  "description": "",
  "costBase": 1e56,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Cosmic Cyclone Cody",
  "note": "",
  "description": "",
  "costBase": 1e57,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Meteorite Maxine",
  "note": "",
  "description": "",
  "costBase": 1e58,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Stellar Storm Steve",
  "note": "",
  "description": "",
  "costBase": 1e59,
  "tier": 5,
  "prodBase": 500,
  "active": false
}, {
  "name": "Reality Ripper Randall",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Dimensional Daryl",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Multiverse Morris",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Astral Fist Alfred",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cosmic Carl",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Star Slayer Stanley",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Galactic Goliath Greg",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Nebula Nightmare Norman",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cosmic Crusher Curtis",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Starcrusher Steve",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 5,
  "prodBase": 100,
  "active": false
}, {
  "name": "Galactic Guardian Gwen",
  "note": "",
  "description": "",
  "costBase": 1e60,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Astro Annihilator Adam",
  "note": "",
  "description": "",
  "costBase": 1e61,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Nova's Nemesis Naomi",
  "note": "",
  "description": "",
  "costBase": 1e62,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Celestial Charles",
  "note": "",
  "description": "",
  "costBase": 1e63,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Supernova Susan",
  "note": "",
  "description": "",
  "costBase": 1e64,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Interstellar Irene",
  "note": "",
  "description": "",
  "costBase": 1e65,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Cosmic Cyclone Colin",
  "note": "",
  "description": "",
  "costBase": 1e66,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Meteorite Miranda",
  "note": "",
  "description": "",
  "costBase": 1e67,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Stellar Storm Sarah",
  "note": "",
  "description": "",
  "costBase": 1e68,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Ethereal Eric",
  "note": "",
  "description": "",
  "costBase": 1e69,
  "tier": 6,
  "prodBase": 600,
  "active": false
}, {
  "name": "Solar Sledge Seth",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Lunar Lancer Luke",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Stellar Striker Stuart",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Constellation Crusher Connor",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Galactic Grappler Graham",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Asteroid Annihilator Aaron",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Nova Nuker Nathaniel",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Comet Crusher Cameron",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Solar Smasher Sherman",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Galaxy Gasher Gilbert",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 6,
  "prodBase": 100,
  "active": false
}, {
  "name": "Starship Striker Sally",
  "note": "",
  "description": "",
  "costBase": 1e70,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Nebula's Nightmare Niles",
  "note": "",
  "description": "",
  "costBase": 1e71,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Cosmic Crusher Chloe",
  "note": "",
  "description": "",
  "costBase": 1e72,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Black Hole Buster Bruce",
  "note": "",
  "description": "",
  "costBase": 1e73,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Solar Storm Sarah",
  "note": "",
  "description": "",
  "costBase": 1e74,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Celestial Crusher Caleb",
  "note": "",
  "description": "",
  "costBase": 1e75,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Supernova Sylvia",
  "note": "",
  "description": "",
  "costBase": 1e76,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Astronomical Alan",
  "note": "",
  "description": "",
  "costBase": 1e77,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Starstruck Stanley",
  "note": "",
  "description": "",
  "costBase": 1e78,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Galaxy Guardian Giselle",
  "note": "",
  "description": "",
  "costBase": 1e79,
  "tier": 7,
  "prodBase": 700,
  "active": false
}, {
  "name": "Dark Hole Derek",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Pulsar Pummeler Paul",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cosmic Cataclysm Collin",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Black Hole Buster Benjamin",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Universe Unraveler Ulysses",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Time Torrent Thomas",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Dimensional Devastator Dexter",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Wormhole Warrior Warren",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Quantum Quake Quincy",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Reality Ripper Roger",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 7,
  "prodBase": 100,
  "active": false
}, {
  "name": "Nebula's Nightmare Nora",
  "note": "",
  "description": "",
  "costBase": 1e80,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Celestial Crusher Catherine",
  "note": "",
  "description": "",
  "costBase": 1e81,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Supernova Stuart",
  "note": "",
  "description": "",
  "costBase": 1e82,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Starstruck Selena",
  "note": "",
  "description": "",
  "costBase": 1e83,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Galaxy Guardian Gabriel",
  "note": "",
  "description": "",
  "costBase": 1e84,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Astro Annihilator Amelia",
  "note": "",
  "description": "",
  "costBase": 1e85,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Cosmic Crusher Caleb",
  "note": "",
  "description": "",
  "costBase": 1e86,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Stellar Storm Stephanie",
  "note": "",
  "description": "",
  "costBase": 1e87,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Ethereal Evan",
  "note": "",
  "description": "",
  "costBase": 1e88,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Starship Striker Samantha",
  "note": "",
  "description": "",
  "costBase": 1e89,
  "tier": 8,
  "prodBase": 800,
  "active": false
}, {
  "name": "Space-time Slicer Silas",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Multiverse Mauler Marcus",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Infinity Igniter Irving",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Eternal Eradicator Elijah",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Omnipotent Owen",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Transcendent Travis",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Celestial Slayer Cecil",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Divine Destructor Daniel",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Godly Grappler Gordon",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Heavenly Havoc Hector",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 8,
  "prodBase": 100,
  "active": false
}, {
  "name": "Astral Annihilator Alice",
  "note": "",
  "description": "",
  "costBase": 1e90,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Cosmic Crusher Christopher",
  "note": "",
  "description": "",
  "costBase": 1e91,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Celestial Conqueror Clara",
  "note": "",
  "description": "",
  "costBase": 1e92,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Supernova Sophia",
  "note": "",
  "description": "",
  "costBase": 1e93,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Stellar Striker Stephen",
  "note": "",
  "description": "",
  "costBase": 1e94,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Galaxy Guardian Grace",
  "note": "",
  "description": "",
  "costBase": 1e95,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Astro Annihilator Aaron",
  "note": "",
  "description": "",
  "costBase": 1e96,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Cosmic Crusher Chloe",
  "note": "",
  "description": "",
  "costBase": 1e97,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Stellar Storm Samuel",
  "note": "",
  "description": "",
  "costBase": 1e98,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Ethereal Emma",
  "note": "",
  "description": "",
  "costBase": 1e99,
  "tier": 9,
  "prodBase": 900,
  "active": false
}, {
  "name": "Pantheon Puncher Patrick",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Immortal Impactor Ivan",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Eternal Eclipse Evan",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cosmic Catastrophe Casey",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Divine Devastation Dennis",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Universal Uppercut Uri",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Celestial Cataclysm Carter",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Divine Desolation Douglas",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Ultimate Unmaker Ulysses",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Infinite Inferno Isaac",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 9,
  "prodBase": 100,
  "active": false
}, {
  "name": "Cosmic Crusader Cassandra",
  "note": "",
  "description": "",
  "costBase": 1e100,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Eternal Eradicator Ethan",
  "note": "",
  "description": "",
  "costBase": 1e101,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Omnipotent Olivia",
  "note": "",
  "description": "",
  "costBase": 1e102,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Transcendent Trevor",
  "note": "",
  "description": "",
  "costBase": 1e103,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Celestial Conqueror Chloe",
  "note": "",
  "description": "",
  "costBase": 1e104,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Supernova Samson",
  "note": "",
  "description": "",
  "costBase": 1e105,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Stellar Striker Stella",
  "note": "",
  "description": "",
  "costBase": 1e106,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Galaxy Guardian George",
  "note": "",
  "description": "",
  "costBase": 1e107,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Astro Annihilator Andrew",
  "note": "",
  "description": "",
  "costBase": 1e108,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Cosmic Crusher Charlotte",
  "note": "",
  "description": "",
  "costBase": 1e109,
  "tier": 10,
  "prodBase": 1000,
  "active": false
}, {
  "name": "Lightning Punch Lionel",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Primeval Powerhouse Preston",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Ultimate Obliterator Oliver",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Apex Annihilator Andy",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Omega Overthrower Orson",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Alpha Assailant Anthony",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Supreme Slayer Sean",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Prime Powerhouse Peter",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Godlike Goliath George",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}, {
  "name": "Universal Unmaker Uriel",
  "note": "",
  "description": "",
  "costBase": 100,
  "tier": 10,
  "prodBase": 100,
  "active": false
}];
},{}],"assets/gameData/forgeUpgradeData.json":[function(require,module,exports) {
module.exports = [{
  "id": 10001,
  "name": "forceTrain multiply",
  "note": "",
  "description": "forceTrain mult 5",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e10,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10002,
  "name": "forceTrain multiply",
  "note": "",
  "description": "forceTrain mult 25",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e13,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 25,
    "value": 25,
    "active": false
  }]
}, {
  "id": 10003,
  "name": "Force -> powerlevel boost1",
  "note": "",
  "description": "increase force contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e18,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "forcePowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10004,
  "name": "forceTrain cost-",
  "note": "",
  "description": "forceTrain cost/2",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e25,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 10006,
  "name": "forceTrain multiply",
  "note": "",
  "description": "forceTrain mult 125",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e35,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 125,
    "value": 125,
    "active": false
  }]
}, {
  "id": 10007,
  "name": "forceTrain cost-",
  "note": "",
  "description": "forceTrain cost/5",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e40,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10008,
  "name": "forceTrain cost-",
  "note": "",
  "description": "forceTrain cost/10",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e45,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 10009,
  "name": "Force -> powerlevel boost2",
  "note": "",
  "description": "increase force contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e50,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "forcePowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10011,
  "name": "Force -> powerlevel boost3",
  "note": "",
  "description": "increase force contribution to powerLevel by 100x",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e60,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "forcePowerLevelMultiplier",
  "specialVar2": 100,
  "mods": []
}, {
  "id": 10012,
  "name": "fTrain2 boosts fTrain1 mult",
  "note": "",
  "description": "fTrain1 production mult + fTrain2 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 1002,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 1001,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10012
  }]
}, {
  "id": 10013,
  "name": "fTrain3 boosts fTrain2 mult",
  "note": "",
  "description": "fTrain3 production mult + fTrain2 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e70,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 1003,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 1002,
    "runningCalcType": "add",
    "baseValue": 10,
    "value": 10,
    "active": false,
    "specialActivatorID": 10013
  }]
}, {
  "id": 10014,
  "name": "fTrain4 boosts fTrain3 mult",
  "note": "",
  "description": "fTrain4 production mult + fTrain3 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e70,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 1004,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 1003,
    "runningCalcType": "add",
    "baseValue": 10,
    "value": 10,
    "active": false,
    "specialActivatorID": 10014
  }]
}, {
  "id": 10015,
  "name": "fTrain5 cost reduc fTrain4",
  "note": "",
  "description": "fTrain4 cost / log10(fTrain5)",
  "level": 0,
  "maxLevel": 1,
  "costType": "force",
  "costBase": 1e80,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceID": 1005,
    "sourceCalcType": "log",
    "targetType": null,
    "targetID": 1004,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false,
    "specialActivatorID": 10015
  }]
}, {
  "id": 10101,
  "name": "wisdomTrain multiply",
  "note": "",
  "description": "wisdomTrain mult 5",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e10,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10102,
  "name": "wisdomTrain multiply",
  "note": "",
  "description": "wisdomTrain mult 25",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e15,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 25,
    "value": 25,
    "active": false
  }]
}, {
  "id": 10103,
  "name": "Wisdom -> powerlevel boost1",
  "note": "",
  "description": "increase wisdom contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e20,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "wisdomPowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10104,
  "name": "wisdomTrain cost-",
  "note": "",
  "description": "wisdomTrain cost/2",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e25,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 10106,
  "name": "wisdomTrain multiply",
  "note": "",
  "description": "wisdomTrain mult 125",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e35,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 125,
    "value": 125,
    "active": false
  }]
}, {
  "id": 10107,
  "name": "wisdomTrain cost-",
  "note": "",
  "description": "wisdomTrain cost/5",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e40,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10108,
  "name": "wisdomTrain cost-",
  "note": "",
  "description": "wisdomTrain cost/10",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e45,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 10109,
  "name": "Wisdom -> powerlevel boost2",
  "note": "",
  "description": "increase wisdom contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e50,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "wisdomPowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10111,
  "name": "Wisdom -> powerlevel boost3",
  "note": "",
  "description": "increase wisdom contribution to powerLevel by 100x",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e60,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "wisdomPowerLevelMultiplier",
  "specialVar2": 100,
  "mods": []
}, {
  "id": 10112,
  "name": "wTrain2 boosts wTrain1 mult",
  "note": "",
  "description": "wTrain1 production mult + wTrain2 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 612,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 611,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10012
  }]
}, {
  "id": 10113,
  "name": "wTrain3 boosts wTrain2 mult",
  "note": "",
  "description": "wTrain2 production mult + wTrain3 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 613,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 612,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10013
  }]
}, {
  "id": 10114,
  "name": "wTrain4 boosts wTrain3 mult",
  "note": "",
  "description": "wTrain3 production mult + wTrain4 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 614,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 613,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10014
  }]
}, {
  "id": 10115,
  "name": "wTrain5 cost reduc wTrain4",
  "note": "",
  "description": "wTrain4 cost / log10(wTrain5)",
  "level": 0,
  "maxLevel": 1,
  "costType": "wisdom",
  "costBase": 1e80,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceID": 615,
    "sourceCalcType": "log",
    "targetType": null,
    "targetID": 614,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false,
    "specialActivatorID": 10015
  }]
}, {
  "id": 10201,
  "name": "energyTrain multiply",
  "note": "",
  "description": "energyTrain mult 5",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e10,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10202,
  "name": "energyTrain multiply",
  "note": "",
  "description": "energyTrain mult 25",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e15,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 25,
    "value": 25,
    "active": false
  }]
}, {
  "id": 10203,
  "name": "Energy -> powerlevel boost1",
  "note": "",
  "description": "increase energy contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e20,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "energyPowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10204,
  "name": "energyTrain cost-",
  "note": "",
  "description": "energyTrain cost/2",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e25,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 10206,
  "name": "energyTrain multiply",
  "note": "",
  "description": "energyTrain mult 125",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e35,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 125,
    "value": 125,
    "active": false
  }]
}, {
  "id": 10207,
  "name": "energyTrain cost-",
  "note": "",
  "description": "energyTrain cost/5",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e40,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10208,
  "name": "energyTrain cost-",
  "note": "",
  "description": "energyTrain cost/10",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e45,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "energyTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 10209,
  "name": "Energy -> powerlevel boost2",
  "note": "",
  "description": "increase energy contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e50,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "energyPowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10211,
  "name": "Energy -> powerlevel boost3",
  "note": "",
  "description": "increase energy contribution to powerLevel by 100x",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e60,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "energyPowerLevelMultiplier",
  "specialVar2": 100,
  "mods": []
}, {
  "id": 10212,
  "name": "eTrain2 boosts eTrain1 mult",
  "note": "",
  "description": "eTrain1 production mult + eTrain2 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 2002,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 2001,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10012
  }]
}, {
  "id": 10213,
  "name": "eTrain3 boosts eTrain2 mult",
  "note": "",
  "description": "eTrain2 production mult + eTrain3 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 2003,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 2002,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10013
  }]
}, {
  "id": 10214,
  "name": "eTrain4 boosts eTrain3 mult",
  "note": "",
  "description": "eTrain3 production mult + eTrain4 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e65,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 2004,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 2003,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10014
  }]
}, {
  "id": 10215,
  "name": "eTrain5 cost reduc eTrain4",
  "note": "",
  "description": "eTrain4 cost / log10(eTrain5)",
  "level": 0,
  "maxLevel": 1,
  "costType": "energy",
  "costBase": 1e80,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceID": 2005,
    "sourceCalcType": "log",
    "targetType": null,
    "targetID": 2004,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false,
    "specialActivatorID": 10015
  }]
}, {
  "id": 10301,
  "name": "divineTrain multiply",
  "note": "",
  "description": "divineTrain mult 5",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10302,
  "name": "divineTrain multiply",
  "note": "",
  "description": "divineTrain mult 25",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 25,
    "value": 25,
    "active": false
  }]
}, {
  "id": 10303,
  "name": "Divine -> powerlevel boost1",
  "note": "",
  "description": "increase divine contribution to powerLevel by 2x",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "divinePowerLevelMultiplier",
  "specialVar2": 2,
  "mods": []
}, {
  "id": 10304,
  "name": "divineTrain cost-",
  "note": "",
  "description": "divineTrain cost/2",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 2,
    "value": 2,
    "active": false
  }]
}, {
  "id": 10306,
  "name": "divineTrain multiply",
  "note": "",
  "description": "divineTrain mult 125",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 125,
    "value": 125,
    "active": false
  }]
}, {
  "id": 10307,
  "name": "divineTrain cost-",
  "note": "",
  "description": "divineTrain cost/5",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 5,
    "value": 5,
    "active": false
  }]
}, {
  "id": 10308,
  "name": "divineTrain cost-",
  "note": "",
  "description": "divineTrain cost/10",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "divineTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 10309,
  "name": "Divine -> powerlevel boost2",
  "note": "",
  "description": "increase divine contribution to powerLevel by 10x",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "divinePowerLevelMultiplier",
  "specialVar2": 10,
  "mods": []
}, {
  "id": 10311,
  "name": "Divine -> powerlevel boost3",
  "note": "",
  "description": "increase divine contribution to powerLevel by 100x",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": "modifyGameContentValue",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "divinePowerLevelMultiplier",
  "specialVar2": 100,
  "mods": []
}, {
  "id": 10312,
  "name": "dTrain2 boosts dTrain1 mult",
  "note": "",
  "description": "increase multiplier of dTrain1 by * dTrain2 level",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceID": 712,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 711,
    "runningCalcType": "add",
    "baseValue": 1,
    "value": 1,
    "active": false,
    "specialActivatorID": 10012
  }]
}, {
  "id": 10315,
  "name": "dTrain5 cost reduc dTrain4",
  "note": "",
  "description": "dTrain4 cost / log10(dTrain5)",
  "level": 0,
  "maxLevel": 1,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceID": 715,
    "sourceCalcType": "log",
    "targetType": null,
    "targetID": 714,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false,
    "specialActivatorID": 10015
  }]
}, {
  "id": 10401,
  "name": "Auto ForceTrain",
  "note": "",
  "description": "autoForceTrain enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 150,
  "costGrowthRate": 2,
  "prodType": "autoForceTrain",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10402,
  "name": "Auto ForceUpgrades",
  "note": "",
  "description": "autoForceUpgrade enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 1000,
  "costGrowthRate": 2,
  "prodType": "autoForceUpgrade",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10406,
  "name": "Auto WisdomTrain",
  "note": "",
  "description": "autoWisdomTrain enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 1.94e7,
  "costGrowthRate": 2,
  "prodType": "autoWisdomTrain",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10407,
  "name": "Auto WisdomUpgrades",
  "note": "",
  "description": "autoWisdomUpgrade enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 6e7,
  "costGrowthRate": 2,
  "prodType": "autoWisdomUpgrade",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10410,
  "name": "Auto Artifacts",
  "note": "",
  "description": "autoArtifact enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 72e7,
  "costGrowthRate": 2,
  "prodType": "autoArtifact",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10411,
  "name": "Unspent Wisdom = Force income",
  "note": "",
  "description": "increase force production by 1e-7* current unspent wisdom",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 82e8,
  "costGrowthRate": 2,
  "prodType": "unspentCurrency",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "unspentWisdomToForce",
  "specialVar2": 1e-7,
  "mods": []
}, {
  "id": 10414,
  "name": "All training production + 25%",
  "note": "",
  "description": "increase all train production by 25%",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 2e10,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "addPercent",
    "baseValue": 1.25,
    "value": 1.25,
    "active": false
  }]
}, {
  "id": 10415,
  "name": "All training cost - 25%",
  "note": "",
  "description": "decrease all train cost by 25%",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 3e11,
  "costGrowthRate": 2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "add",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "subPercent",
    "baseValue": 0.75,
    "value": 0.75,
    "active": false
  }]
}, {
  "id": 10408,
  "name": "Auto EnergyTrain",
  "note": "",
  "description": "autoEnergyTrain enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 62e19,
  "costGrowthRate": 2,
  "prodType": "autoEnergyTrain",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10409,
  "name": "Auto EnergyUpgrades",
  "note": "",
  "description": "autoEnergyUpgrade enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 3.6e20,
  "costGrowthRate": 2,
  "prodType": "autoEnergyUpgrade",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10412,
  "name": "Unspent Energy = Wisdom income",
  "note": "",
  "description": "increase wisdom production by 1e-7* current unspent energy",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 1e23,
  "costGrowthRate": 2,
  "prodType": "unspentCurrency",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "unspentEnergyToWisdom",
  "specialVar2": 1e-7,
  "mods": []
}, {
  "id": 10416,
  "name": "Auto DivineTrain",
  "note": "",
  "description": "autoDivineTrain enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 1e50,
  "costGrowthRate": 2,
  "prodType": "autoDivineTrain",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10417,
  "name": "Auto DivineUpgrades",
  "note": "",
  "description": "autoDivineUpgrade enable",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 1e55,
  "costGrowthRate": 2,
  "prodType": "autoDivineUpgrade",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": []
}, {
  "id": 10413,
  "name": "Unspent Divine = Energy income",
  "note": "",
  "description": "increase energy production by 1e-7* current unspent divine",
  "level": 0,
  "maxLevel": 1,
  "costType": "crystal",
  "costBase": 1e60,
  "costGrowthRate": 2,
  "prodType": "unspentCurrency",
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "specialVar1": "unspentDivineToEnergy",
  "specialVar2": 1e-7,
  "mods": []
}];
},{}],"assets/gameData/generatorData.json":[function(require,module,exports) {
module.exports = [{
  "id": 611,
  "genChainID": 601,
  "evolutionTier": 1,
  "name": "Students",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1,
  "costGrowthRate": 1.3,
  "prodType": "wisdomIncome",
  "prodBase": 1,
  "prodGrowthRate": 1.1,
  "active": true,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Scholars",
    "note": "",
    "description": "The students have become scholars. Their thirst for knowledge is unstoppable.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Savants",
    "note": "",
    "description": "Now savants, they've transcended normal scholarly pursuits. Every thought is a fountain of wisdom.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 612,
  "genChainID": 601,
  "evolutionTier": 1,
  "name": "Trainers",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 100,
  "costGrowthRate": 1.6,
  "prodType": "sGen1",
  "prodBase": 0.31,
  "prodGrowthRate": 1.31,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Coaches",
    "note": "",
    "description": "The trainers have evolved into coaches, guiding their students with expertise and patience.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 3.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Mentors",
    "note": "",
    "description": "Now mentors, they've reached a pinnacle of guidance. Their wisdom shapes the future.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 613,
  "genChainID": 601,
  "evolutionTier": 1,
  "name": "Academies",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1e6,
  "costGrowthRate": 1.8,
  "prodType": "sGen2",
  "prodBase": 0.31,
  "prodGrowthRate": 1.26,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Universities",
    "note": "",
    "description": "The academies have grown into universities, havens of learning and innovation.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Centers of Excellence",
    "note": "",
    "description": "They've become Centers of Excellence, pioneering the frontier of knowledge.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 614,
  "genChainID": 601,
  "evolutionTier": 1,
  "name": "Masters",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1e20,
  "costGrowthRate": 2.2,
  "prodType": "sGen3",
  "prodBase": 0.31,
  "prodGrowthRate": 1.21,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Grandmasters",
    "note": "",
    "description": "The masters have evolved into grandmasters, embodying the pinnacle of their discipline.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Legends",
    "note": "",
    "description": "Now legends, their skills and wisdom are unparalleled in history.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 615,
  "genChainID": 601,
  "evolutionTier": 1,
  "name": "Grandmasters",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1e25,
  "costGrowthRate": 2.3,
  "prodType": "sGen4",
  "prodBase": 0.31,
  "prodGrowthRate": 1.15,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Pioneers",
    "note": "",
    "description": "The grandmasters have become pioneers, charting new territories in their fields.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Visionaries",
    "note": "",
    "description": "Now visionaries, they are creating the future with their groundbreaking insights.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 711,
  "genChainID": 701,
  "evolutionTier": 1,
  "name": "dGen1",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 1,
  "costGrowthRate": 1.3,
  "prodType": "divineIncome",
  "prodBase": 1,
  "prodGrowthRate": 1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "dGenPrime",
    "note": "",
    "description": "The divine generator has evolved into dGenPrime, producing even greater divine energy.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "dGenUltra",
    "note": "",
    "description": "Now dGenUltra, it emanates an astounding amount of divine power.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 712,
  "genChainID": 701,
  "evolutionTier": 1,
  "name": "dGen2",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 10,
  "costGrowthRate": 1.4,
  "prodType": "dGen1",
  "prodBase": 1,
  "prodGrowthRate": 1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "dGen2Advanced",
    "note": "",
    "description": "dGen2 has evolved into dGen2Advanced, multiplying its divine power generation.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "dGen2Superior",
    "note": "",
    "description": "Now dGen2Superior, it's an epitome of divine energy generation.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 713,
  "genChainID": 701,
  "evolutionTier": 1,
  "name": "dGen3",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 1.4,
  "prodType": "dGen2",
  "prodBase": 1,
  "prodGrowthRate": 1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "dGen3Pro",
    "note": "",
    "description": "dGen3 has become dGen3Pro, radiating divine power more effectively.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "dGen3Ultra",
    "note": "",
    "description": "Now dGen3Ultra, it's the ultimate divine generator.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 714,
  "genChainID": 701,
  "evolutionTier": 1,
  "name": "dGen4",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 1000,
  "costGrowthRate": 1.4,
  "prodType": "dGen3",
  "prodBase": 1,
  "prodGrowthRate": 1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "dGen4Max",
    "note": "",
    "description": "dGen4 has evolved into dGen4Max, reaching a new level of divine power generation.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "dGen4Supreme",
    "note": "",
    "description": "Now dGen4Supreme, it's the apex of divine energy creation.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 715,
  "genChainID": 701,
  "evolutionTier": 1,
  "name": "dGen5",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 10000,
  "costGrowthRate": 1.5,
  "prodType": "dGen4",
  "prodBase": 1,
  "prodGrowthRate": 1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "dGen5Ultimate",
    "note": "",
    "description": "dGen5 has become dGen5Ultimate, epitomizing divine energy production.",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "dGen5Omega",
    "note": "",
    "description": "Now dGen5Omega, it's the final word in divine generator evolution.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}];
},{}],"assets/gameData/interfaceElementData.json":[function(require,module,exports) {
module.exports = [{
  "id": "row-stats",
  "variableName": "statsRow",
  "parent": "root",
  "tag": "div"
}, {
  "id": "tab-buttons",
  "variableName": "tabButtons",
  "parent": "root",
  "tag": "div"
}, {
  "id": "trainingTab",
  "variableName": "trainingTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "forgeTab",
  "variableName": "forgeUpgradesTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "explorationTab",
  "variableName": "explorationTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "skillsTab",
  "variableName": "skillsTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "essenceTab",
  "variableName": "essenceTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "achievementsTab",
  "variableName": "achievementsTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "radianceTab",
  "variableName": "radianceTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "settingsTab",
  "variableName": "settingsTab",
  "parent": "tab-buttons",
  "tag": "button",
  "className": "tabButton"
}, {
  "id": "main-window",
  "variableName": "mainWindow",
  "parent": "root",
  "tag": "div",
  "className": "main-window"
}, {
  "id": "training",
  "variableName": "trainingTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "training-realm-buttons",
  "variableName": "trainingRealmButtons",
  "parent": "training",
  "tag": "div",
  "className": "realm-buttons-row"
}, {
  "id": "forceSubTab",
  "variableName": "force-tab-button",
  "parent": "training-realm-buttons",
  "tag": "button",
  "className": "realm-button"
}, {
  "id": "wisdomSubTab",
  "variableName": "wisdom-tab-button",
  "parent": "training-realm-buttons",
  "tag": "button",
  "className": "realm-button"
}, {
  "id": "energySubTab",
  "variableName": "energy-tab-button",
  "parent": "training-realm-buttons",
  "tag": "button",
  "className": "realm-button"
}, {
  "id": "divineSubTab",
  "variableName": "divine-tab-button",
  "parent": "training-realm-buttons",
  "tag": "button",
  "className": "realm-button"
}, {
  "id": "forge",
  "variableName": "upgradesTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "forge-upgrades-columns",
  "variableName": "forgeUpgradesColumns",
  "parent": "forge",
  "tag": "div",
  "className": "content-tab-column-container"
}, {
  "id": "essence",
  "variableName": "essenceTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "essence-columns",
  "variableName": "essenceColumns",
  "parent": "essence",
  "tag": "div",
  "className": "content-tab-column-container"
}, {
  "id": "essence-col1",
  "variableName": "essenceCol1",
  "parent": "essence-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "essence-col2",
  "variableName": "essenceCol2",
  "parent": "essence-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "skills",
  "variableName": "skillsTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "skills-columns",
  "variableName": "skillsColumns",
  "parent": "skills",
  "tag": "div",
  "className": "content-tab-column-container"
}, {
  "id": "skills-col1",
  "variableName": "skillsCol1",
  "parent": "skills-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "skills-col2",
  "variableName": "skillsCol2",
  "parent": "skills-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "achievements",
  "variableName": "achievementsTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "achievements-columns",
  "variableName": "achievementsColumns",
  "parent": "achievements",
  "tag": "div",
  "className": "content-tab-column-container"
}, {
  "id": "achievements-col1",
  "variableName": "achievementsCol1",
  "parent": "achievements-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "achievements-col2",
  "variableName": "achievementsCol2",
  "parent": "achievements-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "exploration",
  "variableName": "explorationTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "exploration-tab-buttons",
  "variableName": "explorationTabButtons",
  "parent": "exploration",
  "tag": "div",
  "className": "realm-buttons-row"
}, {
  "id": "OdysseySubTab",
  "variableName": "OdysseySubTab",
  "parent": "exploration-tab-buttons",
  "tag": "button",
  "className": "exploration-tab-button"
}, {
  "id": "TournamentSubTab",
  "variableName": "TournamentSubTab",
  "parent": "exploration-tab-buttons",
  "tag": "button",
  "className": "exploration-tab-button"
}, {
  "id": "ArtifactsSubTab",
  "variableName": "ArtifactsSubTab",
  "parent": "exploration-tab-buttons",
  "tag": "button",
  "className": "exploration-tab-button"
}, {
  "id": "radiance",
  "variableName": "radianceTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "radiance-columns",
  "variableName": "radianceColumns",
  "parent": "radiance",
  "tag": "div",
  "className": "content-tab-column-container"
}, {
  "id": "radiance-col1",
  "variableName": "radianceCol1",
  "parent": "radiance-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "radiance-col2",
  "variableName": "radianceCol2",
  "parent": "radiance-columns",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "settings",
  "variableName": "settingsTabContent",
  "parent": "main-window",
  "tag": "div",
  "className": "content-tab"
}, {
  "id": "settings-tab-container",
  "variableName": "settingsTabContainer",
  "parent": "settings",
  "tag": "div"
}, {
  "id": "settings-col1",
  "variableName": "settingsCol1",
  "parent": "settings-tab-container",
  "tag": "div",
  "className": "content-tab-col"
}, {
  "id": "settings-col2",
  "variableName": "settingsCol2",
  "parent": "settings-tab-container",
  "tag": "div",
  "className": "content-tab-col"
}];
},{}],"assets/gameData/radianceUpgradeData.json":[function(require,module,exports) {
module.exports = [{
  "id": 120001,
  "name": "Time Radiance",
  "note": "",
  "description": "Increase game speed by 10% per level. Affects training income, and conquest time.",
  "level": 0,
  "costType": "radiance",
  "costBase": 30,
  "costGrowthRate": 3.3,
  "prodType": "timeMult",
  "prodBase": 1,
  "prodGrowthRate": 0.1,
  "active": true
}];
},{}],"assets/gameData/realmUpgradeData.json":[function(require,module,exports) {
module.exports = [{
  "id": 1101,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Increase Run Distance",
  "note": "",
  "description": "Get fast kid.",
  "level": 0,
  "costType": "force",
  "costBase": 50,
  "costGrowthRate": 7.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 1151,
    "name": "pTarMod1",
    "type": "production",
    "priority": null,
    "sourceID": 1101,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 1001,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Marathon Training",
    "note": "",
    "description": "Your strides have doubled in strength and length.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "Ultramarathon Training",
    "note": "",
    "description": "You've entered a realm few dare to tread.",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.3,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 1102,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Increase Pullup weight",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 1e5,
  "costGrowthRate": 8.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 1152,
    "name": "pTarMod2",
    "type": "production",
    "priority": null,
    "sourceID": 1102,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 1002,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Weighted Pullups",
    "note": "",
    "description": "Add weight, build strength.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.1,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "One-Arm Pullups",
    "note": "",
    "description": "Only the truly dedicated can master this feat of strength.",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.1,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 1103,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Add more wooden arms",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 5e5,
  "costGrowthRate": 9.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 1153,
    "name": "pTarMod3",
    "type": "cost",
    "priority": null,
    "sourceID": 1103,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 1003,
    "runningCalcType": "div",
    "baseValue": 1.05,
    "value": 1.05,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Enhanced Dummy",
    "note": "",
    "description": "The dummy is no longer just a wooden block, but a complex training tool.",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.4,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "Ultimate Training Dummy",
    "note": "",
    "description": "Your dummy is a true masterpiece of martial arts engineering.",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.4,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 1104,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Increase Squat Weight",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 1e7,
  "costGrowthRate": 10.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 1154,
    "name": "pTarMod4",
    "type": "production",
    "priority": null,
    "sourceID": 1104,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 1004,
    "runningCalcType": "add",
    "baseValue": 10,
    "value": 10,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Atlas Squats",
    "note": "",
    "description": "Carry the weight of the world on your shoulders.",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "Titan Squats",
    "note": "",
    "description": "Not even a Titan could match your strength.",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 1105,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Increase Deadlift weight",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 1e9,
  "costGrowthRate": 11.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 1155,
    "name": "pTarMod5",
    "type": "production",
    "priority": null,
    "sourceID": 1105,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 1005,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Olympic Deadlift",
    "note": "",
    "description": "Your power is now on par with Olympian strength.",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.6,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "World Record Deadlift",
    "note": "",
    "description": "Records were made to be broken.",
    "level": 0,
    "costBase": 20000,
    "costGrowthRate": 1.6,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 631,
  "realmID": 20,
  "evolutionTier": 1,
  "name": "Better candidates",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 150,
  "costGrowthRate": 3.3,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 641,
    "name": "sTarMod1",
    "type": "production",
    "priority": null,
    "sourceID": 631,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 611,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 632,
  "realmID": 20,
  "evolutionTier": 1,
  "name": "Trainers study more",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1500,
  "costGrowthRate": 3.4,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 642,
    "name": "sTarMod2",
    "type": "production",
    "priority": null,
    "sourceID": 632,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 612,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 633,
  "realmID": 20,
  "evolutionTier": 1,
  "name": "Expand Academy Squarefootage",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1e5,
  "costGrowthRate": 3.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 643,
    "name": "sTarMod3",
    "type": "cost",
    "priority": null,
    "sourceID": 633,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 613,
    "runningCalcType": "div",
    "baseValue": 1.05,
    "value": 1.05,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 634,
  "realmID": 20,
  "evolutionTier": 1,
  "name": "Masters access historical texts",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1e7,
  "costGrowthRate": 3.6,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 644,
    "name": "sTarMod4",
    "type": "production",
    "priority": null,
    "sourceID": 634,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 614,
    "runningCalcType": "add",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 635,
  "realmID": 20,
  "evolutionTier": 1,
  "name": "Give grandmasters concubines",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "wisdom",
  "costBase": 1e8,
  "costGrowthRate": 3.7,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 645,
    "name": "sTarMod5",
    "type": "production",
    "priority": null,
    "sourceID": 635,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 615,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 2101,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Higher density energy ball",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 10,
  "costGrowthRate": 3.3,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 2151,
    "name": "eTarMod1",
    "type": "production",
    "priority": null,
    "sourceID": 2101,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 2001,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 2102,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Maintain longer flight",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 100,
  "costGrowthRate": 3.4,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 2152,
    "name": "eTarMod2",
    "type": "production",
    "priority": null,
    "sourceID": 2102,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 2002,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 2103,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Extend aura",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 1000,
  "costGrowthRate": 3.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 2153,
    "name": "eTarMod3",
    "type": "cost",
    "priority": null,
    "sourceID": 2103,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 2003,
    "runningCalcType": "div",
    "baseValue": 1.05,
    "value": 1.05,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 2104,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Strengthen shield",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 5000,
  "costGrowthRate": 3.6,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 2154,
    "name": "eTarMod4",
    "type": "production",
    "priority": null,
    "sourceID": 2104,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 2004,
    "runningCalcType": "add",
    "baseValue": 10,
    "value": 10,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 2105,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Increase blast power",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 10000,
  "costGrowthRate": 3.7,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 2155,
    "name": "eTarMod5",
    "type": "production",
    "priority": null,
    "sourceID": 2105,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 2005,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 731,
  "realmID": 40,
  "evolutionTier": 1,
  "name": "desc",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 10,
  "costGrowthRate": 1.3,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 741,
    "name": "dTarMod1",
    "type": "production",
    "priority": null,
    "sourceID": 731,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 711,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 732,
  "realmID": 40,
  "evolutionTier": 1,
  "name": "desc",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 100,
  "costGrowthRate": 1.1,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 742,
    "name": "dTarMod2",
    "type": "production",
    "priority": null,
    "sourceID": 732,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 712,
    "runningCalcType": "mult",
    "baseValue": 2,
    "value": 2,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 733,
  "realmID": 40,
  "evolutionTier": 1,
  "name": "desc",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 1000,
  "costGrowthRate": 1.4,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 743,
    "name": "dTarMod3",
    "type": "cost",
    "priority": null,
    "sourceID": 733,
    "sourceCalcType": "add",
    "targetType": null,
    "targetID": 713,
    "runningCalcType": "div",
    "baseValue": 1.05,
    "value": 1.05,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}, {
  "id": 734,
  "realmID": 40,
  "evolutionTier": 1,
  "name": "desc",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "divine",
  "costBase": 5000,
  "costGrowthRate": 1.5,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "mods": [{
    "id": 744,
    "name": "dTarMod4",
    "type": "production",
    "priority": null,
    "sourceID": 734,
    "sourceCalcType": "mult",
    "targetType": null,
    "targetID": 714,
    "runningCalcType": "add",
    "baseValue": 10,
    "value": 10,
    "active": false
  }],
  "evolutions": [{
    "evolutionTier": 2,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 5000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }, {
    "evolutionTier": 3,
    "name": "asdfasdf",
    "note": "",
    "description": "asdfasdf",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.5,
    "prodBase": null,
    "prodGrowthRate": null
  }]
}];
},{}],"assets/gameData/tabData.json":[function(require,module,exports) {
module.exports = [{
  "id": 110,
  "name": "training",
  "active": true,
  "subTabs": [{
    "id": 111,
    "name": "force",
    "active": true,
    "initialUnlockedFeatureIDs": [1001],
    "infoText": ["Trainings - and upgrades specific to this realm's trainings.", "Training realms can be evolved via the Forge for higher income", "All Trainings have milestone tiers that give a multiplier bonus.", "Trainings highlight when milestone is affordable, and color background per milestone completed"]
  }, {
    "id": 112,
    "name": "wisdom",
    "active": false,
    "initialUnlockedFeatureIDs": [611],
    "infoText": ["Trainings - and upgrades specific to this realm's trainings.", "Training realms can be evolved via the Forge for higher income", "All Trainings have milestone tiers that give a multiplier bonus.  When dealing with generators, milestones are unlocked via manual level purchases.", "Trainings highlight when milestone is affordable, and color background per milestone completed"]
  }, {
    "id": 113,
    "name": "energy",
    "active": false,
    "initialUnlockedFeatureIDs": [2001],
    "infoText": ["Trainings - and upgrades specific to this realm's trainings.", "Training realms can be evolved via the Forge for higher income", "All Trainings have milestone tiers that give a multiplier bonus.", "Trainings highlight when milestone is affordable, and color background per milestone completed"]
  }, {
    "id": 114,
    "name": "divine",
    "active": false,
    "initialUnlockedFeatureIDs": [711],
    "infoText": ["Trainings - and upgrades specific to this realm's trainings.", "Training realms can be evolved via the Forge for higher income", "All Trainings have milestone tiers that give a multiplier bonus.  When dealing with generators, milestones are unlocked via manual level purchases.", "Trainings highlight when milestone is affordable, and color background per milestone completed"]
  }]
}, {
  "id": 120,
  "name": "forge",
  "active": false,
  "initialUnlockedFeatureIDs": [10001, 10002, 10003, 10004],
  "infoText": ["Powerful upgrades, evolution unlocks, and automations."]
}, {
  "id": 130,
  "name": "exploration",
  "active": false,
  "initialUnlockedFeatureIDs": [131, 1010001, 90001],
  "subTabs": [{
    "id": 131,
    "name": "odyssey",
    "active": true,
    "infoText": ["Worlds > Regions > Zones.", "Zones have a one time training resource cost.", "Zones reward shards that can be used to assemble/upgrade artifacts.", "Zone completion time can be upgraded later to be reduced based on power level", "Region bosses award a skill point.", "Legendary bosses have special requirements. Right now they just give an achieve, is planned for them to be part of metroidvania mechanics", "Each new world unlocks a new tier of tournament fighters."]
  }, {
    "id": 132,
    "name": "tournament",
    "active": false,
    "infoText": ["Each new world unlocks a new tier of tournament fighters.", "Ascend the ranks and beat fighter tiers to upgrade your headband for greater bonuses.", "Fighter completion time can be upgraded later to be reduced based on power level"]
  }, {
    "id": 133,
    "name": "artifacts",
    "active": false,
    "infoText": ["Use shards gained from Odyssey to build and upgrade artifacts.", "Artifacts evolve at certain level thresholds to unlock higher bonuses"]
  }]
}, {
  "id": 140,
  "name": "skills",
  "active": false,
  "infoText": ["Powerful upgrades that provide choice in how you play."]
}, {
  "id": 150,
  "name": "essence",
  "active": false,
  "infoText": ["Powerful rebirth upgrades", "Unlocks at powerLevel 1e40", "Rebirth grants essence, which gives a flat multiplier based on total essence spent or unspent", "Also an essence bonus based on time since last rebirth, so there is a slight incentive to wait to rebirth.  20% per hour or 0.3%/minute"]
}, {
  "id": 160,
  "name": "achievements",
  "active": false,
  "infoText": ["Claim achievements for large bonuses, complete achievement sets for even greater bonuses.  Achievements each reward radiance currency."]
}, {
  "id": 180,
  "name": "radiance",
  "active": false,
  "infoText": ["Game-altering upgrades utilizing special achievement-based currency: Radiance", "This is the premium currency.  Purchased with money or earned via achievements."]
}, {
  "id": 170,
  "name": "settings",
  "active": true,
  "hasBeenOpened": true
}];
},{}],"assets/gameData/skillData.json":[function(require,module,exports) {
module.exports = [{
  "id": 40001,
  "name": "Surge",
  "note": "",
  "description": "",
  "color": "var(--color-1)",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": true,
  "connections": {
    "north": 40003,
    "east": 40002,
    "west": 40004,
    "south": 40006
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 8,
    "value": 2,
    "active": false
  }]
}, {
  "id": 40002,
  "name": "Amplify",
  "note": "",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "east": 40011
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 3,
    "value": 3,
    "active": false
  }]
}, {
  "id": 40003,
  "name": "Enhance",
  "note": "",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "north": 40005
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 4,
    "value": 4,
    "active": false
  }]
}, {
  "id": 40004,
  "name": "Fortify",
  "note": "",
  "description": "",
  "color": "var(--color-9",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40016
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "artifacts",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40005,
  "name": "Berserk",
  "note": "You go berserk on command",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {},
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 6,
    "value": 6,
    "active": false
  }]
}, {
  "id": 40006,
  "name": "Focus",
  "note": "",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "south": 40008
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 7,
    "value": 7,
    "active": false
  }]
}, {
  "id": 40007,
  "name": "Spike",
  "note": "",
  "description": "",
  "color": "var(--color-1",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "north": 40020
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 8,
    "value": 8,
    "active": false
  }]
}, {
  "id": 40008,
  "name": "Agility",
  "note": "",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "south": 40019
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 9,
    "value": 9,
    "active": false
  }]
}, {
  "id": 40009,
  "name": "Intimidation",
  "note": "They fear you. This makes them weaker.",
  "description": "",
  "color": "var(--color-7",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40026,
    "south": 40031
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 40010,
  "name": "Lootbags",
  "note": "Punch and ye shall receive",
  "description": "",
  "color": "var(--color-7",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "south": 40009
  },
  "unlocked": false,
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 11,
    "value": 11,
    "active": false
  }]
}, {
  "id": 40011,
  "name": "Zoom",
  "note": "your vision zooms and enhances",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "north": 40007,
    "east": 40012,
    "south": 40014
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 12,
    "value": 12,
    "active": false
  }]
}, {
  "id": 40012,
  "name": "Elevate",
  "note": "You have the high ground",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "east": 40034
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 13,
    "value": 13,
    "active": false
  }]
}, {
  "id": 40013,
  "name": "Diver",
  "note": "",
  "description": "",
  "color": "var(--color-5",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40029
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 14,
    "value": 14,
    "active": false
  }]
}, {
  "id": 40014,
  "name": "Meditation",
  "note": "",
  "description": "",
  "color": "var(--color-2",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "south": 40015
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 15,
    "value": 15,
    "active": false
  }]
}, {
  "id": 40015,
  "name": "Mushrooms",
  "note": "Open your mind",
  "description": "",
  "color": "var(--color-2",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "south": 40023
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 16,
    "value": 16,
    "active": false
  }]
}, {
  "id": 40016,
  "name": "Sharpen",
  "note": "",
  "description": "",
  "color": "var(--color-9",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "north": 40017,
    "west": 40032,
    "south": 40010
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "artifacts",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40017,
  "name": "Explorer",
  "note": "",
  "description": "",
  "color": "var(--color-5",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "north": 40018
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 31,
    "value": 31,
    "active": false
  }]
}, {
  "id": 40018,
  "name": "Spelunker",
  "note": "",
  "description": "",
  "color": "var(--color-5",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40013
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40019,
  "name": "Pacing",
  "note": "You learn to pace yourself.  Training costs less.",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {},
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40020,
  "name": "Propel",
  "note": "",
  "description": "",
  "color": "var(--color-1",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "east": 40021
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40021,
  "name": "Might",
  "note": "",
  "description": "",
  "color": "var(--color-1",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "east": 40022
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40022,
  "name": "Force Mastery",
  "skillType": "mastery",
  "note": "",
  "description": "",
  "color": "var(--color-1",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {},
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "forceTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40023,
  "name": "Chakra",
  "note": "",
  "description": "",
  "color": "var(--color-2",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "east": 40024
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40024,
  "name": "Levitation",
  "note": "",
  "description": "",
  "color": "var(--color-2",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "east": 40025
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40025,
  "name": "Wisdom Mastery",
  "skillType": "mastery",
  "note": "",
  "description": "",
  "color": "var(--color-2",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {},
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "wisdomTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40026,
  "name": "Shock",
  "note": "They're scared. They're weak.",
  "description": "",
  "color": "var(--color-7",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40027
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 40027,
  "name": "Awe",
  "note": "In awe, dey crumble.",
  "description": "",
  "color": "var(--color-7",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40028
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 40028,
  "name": "Dust",
  "note": "You refine the skill of throwing dust in their eyes.",
  "description": "",
  "color": "var(--color-7",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {},
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 40029,
  "name": "Archaeologist",
  "note": "You have many theories about how the pyramids were built.",
  "description": "",
  "color": "var(--color-5",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40030
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40030,
  "name": "Tologist",
  "note": "You know how the pyramids were built.",
  "description": "",
  "color": "var(--color-5",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {},
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "zones",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40031,
  "name": "Slayer",
  "note": "They know who you are.  You smell their fear.",
  "description": "",
  "color": "var(--color-7",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {},
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "fighters",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 10,
    "value": 10,
    "active": false
  }]
}, {
  "id": 40032,
  "name": "Refine",
  "note": "",
  "description": "",
  "color": "var(--color-9",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {
    "west": 40033
  },
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "artifacts",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40033,
  "name": "Infuse",
  "note": "",
  "description": "",
  "color": "var(--color-9",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "unlocked": false,
  "connections": {},
  "mods": [{
    "type": "cost",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "artifacts",
    "targetID": null,
    "runningCalcType": "div",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}, {
  "id": 40034,
  "name": "Mastery",
  "skillType": "mastery",
  "note": "You're pretty good at all types of training now. goood job",
  "description": "",
  "color": "var(--color-3",
  "level": 0,
  "maxLevel": 1,
  "costType": "skillpoints",
  "costBase": 1,
  "costGrowthRate": 1.2,
  "prodType": null,
  "prodBase": null,
  "prodGrowthRate": null,
  "active": false,
  "connections": {
    "west": 40012
  },
  "mods": [{
    "type": "production",
    "priority": null,
    "sourceCalcType": "mult",
    "targetType": "allTrain",
    "targetID": null,
    "runningCalcType": "mult",
    "baseValue": 32,
    "value": 32,
    "active": false
  }]
}];
},{}],"assets/gameData/regionData.json":[function(require,module,exports) {
module.exports = [{
  "id": 1010001,
  "worldID": 1000001,
  "name": "Jungle Village",
  "mapFilename": "peninsula_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e5,
  "zoneCostMax": 1e10,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0,
  "active": true
}, {
  "id": 1010002,
  "worldID": 1000001,
  "name": "Mountain Pass",
  "mapFilename": "peninsula_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010003,
  "worldID": 1000001,
  "name": "Northern Forest",
  "mapFilename": "peninsula_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010004,
  "worldID": 1000001,
  "name": "Coastal Cliffs",
  "mapFilename": "peninsula_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010005,
  "worldID": 1000001,
  "name": "River Pass",
  "mapFilename": "peninsula_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010006,
  "worldID": 1000001,
  "name": "Eastern Forest",
  "mapFilename": "peninsula_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010007,
  "worldID": 1000001,
  "name": "Wooded Islands",
  "mapFilename": "peninsula_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010008,
  "worldID": 1000001,
  "name": "Great Stone Clearing",
  "mapFilename": "peninsula_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010009,
  "worldID": 1000001,
  "name": "Island of Destiny",
  "mapFilename": "peninsula_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010021,
  "worldID": 1000002,
  "name": "Snowy Peaks",
  "mapFilename": "continent_01",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010022,
  "worldID": 1000002,
  "name": "The Citadel",
  "mapFilename": "continent_02",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010023,
  "worldID": 1000002,
  "name": "Zorathim Bay",
  "mapFilename": "continent_03",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010024,
  "worldID": 1000002,
  "name": "Borim Mountains",
  "mapFilename": "continent_04",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 0
}, {
  "id": 1010025,
  "worldID": 1000002,
  "name": "Kaladrim Desert",
  "mapFilename": "continent_05",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010026,
  "worldID": 1000002,
  "name": "Upper Grasslands",
  "mapFilename": "continent_06",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010027,
  "worldID": 1000002,
  "name": "Trade Crossroads",
  "mapFilename": "continent_07",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010028,
  "worldID": 1000002,
  "name": "Aleph Mudflats",
  "mapFilename": "continent_08",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 100
}, {
  "id": 1010029,
  "worldID": 1000002,
  "name": "Rocky Coast",
  "mapFilename": "continent_09",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010030,
  "worldID": 1000002,
  "name": "Lower Grasslands",
  "mapFilename": "continent_10",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010031,
  "worldID": 1000002,
  "name": "Southern Peaks",
  "mapFilename": "continent_11",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010032,
  "worldID": 1000002,
  "name": "Markror Delta",
  "mapFilename": "continent_12",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 200
}, {
  "id": 1010033,
  "worldID": 1000002,
  "name": "Deep Waters",
  "mapFilename": "continent_13",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 300
}, {
  "id": 1010034,
  "worldID": 1000002,
  "name": "Southern Peninsula",
  "mapFilename": "continent_14",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 300
}, {
  "id": 1010035,
  "worldID": 1000002,
  "name": "Boketh Fjord",
  "mapFilename": "continent_15",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 300
}, {
  "id": 1010036,
  "worldID": 1000002,
  "name": "Deeper Waters",
  "mapFilename": "continent_16",
  "note": "",
  "shardType": "betaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 300
}, {
  "id": 1010041,
  "worldID": 1000003,
  "name": "Kalabas Trench",
  "mapFilename": "planet_01",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010042,
  "worldID": 1000003,
  "name": "Heroic Mountains",
  "mapFilename": "planet_02",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010043,
  "worldID": 1000003,
  "name": "Mountain Exit",
  "mapFilename": "planet_03",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010044,
  "worldID": 1000003,
  "name": "Desert Mountain Cliffs",
  "mapFilename": "planet_04",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 0
}, {
  "id": 1010045,
  "worldID": 1000003,
  "name": "Sabalak Trench",
  "mapFilename": "planet_05",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 0
}, {
  "id": 1010046,
  "worldID": 1000003,
  "name": "region 6",
  "mapFilename": "planet_06",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010047,
  "worldID": 1000003,
  "name": "region 7",
  "mapFilename": "planet_07",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010048,
  "worldID": 1000003,
  "name": "region 8",
  "mapFilename": "planet_08",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010049,
  "worldID": 1000003,
  "name": "region 9",
  "mapFilename": "planet_09",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 100
}, {
  "id": 1010050,
  "worldID": 1000003,
  "name": "region 10",
  "mapFilename": "planet_10",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 100
}, {
  "id": 1010051,
  "worldID": 1000003,
  "name": "region 11",
  "mapFilename": "planet_11",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010052,
  "worldID": 1000003,
  "name": "region 12",
  "mapFilename": "planet_12",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010053,
  "worldID": 1000003,
  "name": "region 13",
  "mapFilename": "planet_13",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010054,
  "worldID": 1000003,
  "name": "region 14",
  "mapFilename": "planet_14",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 200
}, {
  "id": 1010055,
  "worldID": 1000003,
  "name": "region 15",
  "mapFilename": "planet_15",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 200
}, {
  "id": 1010056,
  "worldID": 1000003,
  "name": "region 16",
  "mapFilename": "planet_16",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 300
}, {
  "id": 1010057,
  "worldID": 1000003,
  "name": "region 17",
  "mapFilename": "planet_17",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 300
}, {
  "id": 1010058,
  "worldID": 1000003,
  "name": "region 18",
  "mapFilename": "planet_18",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 300
}, {
  "id": 1010059,
  "worldID": 1000003,
  "name": "region 19",
  "mapFilename": "planet_19",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 300
}, {
  "id": 1010060,
  "worldID": 1000003,
  "name": "region 20",
  "mapFilename": "planet_20",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 300
}, {
  "id": 1010061,
  "worldID": 1000003,
  "name": "region 21",
  "mapFilename": "planet_21",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 400
}, {
  "id": 1010062,
  "worldID": 1000003,
  "name": "region 22",
  "mapFilename": "planet_22",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 400
}, {
  "id": 1010063,
  "worldID": 1000003,
  "name": "region 23",
  "mapFilename": "planet_23",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 400
}, {
  "id": 1010064,
  "worldID": 1000003,
  "name": "region 24",
  "mapFilename": "planet_24",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 400
}, {
  "id": 1010065,
  "worldID": 1000003,
  "name": "region 25",
  "mapFilename": "planet_25",
  "note": "",
  "shardType": "gammaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 400
}, {
  "id": 1010081,
  "worldID": 1000004,
  "name": "Outer Orbits",
  "mapFilename": "solar_system_01",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010082,
  "worldID": 1000004,
  "name": "Asteroid Cluster",
  "mapFilename": "solar_system_02",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010083,
  "worldID": 1000004,
  "name": "Small Planet",
  "mapFilename": "solar_system_03",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010084,
  "worldID": 1000004,
  "name": "Planet Cluster",
  "mapFilename": "solar_system_04",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010085,
  "worldID": 1000004,
  "name": "Inner Orbits",
  "mapFilename": "solar_system_05",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010086,
  "worldID": 1000004,
  "name": "Inner Orbit Planets",
  "mapFilename": "solar_system_06",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010087,
  "worldID": 1000004,
  "name": "Gas Giants",
  "mapFilename": "solar_system_07",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010088,
  "worldID": 1000004,
  "name": "region 8",
  "mapFilename": "solar_system_08",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010089,
  "worldID": 1000004,
  "name": "Sparse Stellar Void",
  "mapFilename": "solar_system_09",
  "note": "",
  "shardType": "deltaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010101,
  "worldID": 1000005,
  "name": "region 1",
  "mapFilename": "local_bubble_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010102,
  "worldID": 1000005,
  "name": "region 2",
  "mapFilename": "local_bubble_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010103,
  "worldID": 1000005,
  "name": "region 3",
  "mapFilename": "local_bubble_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010104,
  "worldID": 1000005,
  "name": "region 4",
  "mapFilename": "local_bubble_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 0
}, {
  "id": 1010105,
  "worldID": 1000005,
  "name": "region 5",
  "mapFilename": "local_bubble_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010106,
  "worldID": 1000005,
  "name": "region 6",
  "mapFilename": "local_bubble_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010107,
  "worldID": 1000005,
  "name": "region 7",
  "mapFilename": "local_bubble_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010108,
  "worldID": 1000005,
  "name": "region 8",
  "mapFilename": "local_bubble_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 100
}, {
  "id": 1010109,
  "worldID": 1000005,
  "name": "region 9",
  "mapFilename": "local_bubble_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010110,
  "worldID": 1000005,
  "name": "region 10",
  "mapFilename": "local_bubble_10",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010111,
  "worldID": 1000005,
  "name": "region 11",
  "mapFilename": "local_bubble_11",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010112,
  "worldID": 1000005,
  "name": "region 12",
  "mapFilename": "local_bubble_12",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 200
}, {
  "id": 1010201,
  "worldID": 1000006,
  "name": "region 1",
  "mapFilename": "spiral_arm_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010202,
  "worldID": 1000006,
  "name": "region 2",
  "mapFilename": "spiral_arm_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010203,
  "worldID": 1000006,
  "name": "region 3",
  "mapFilename": "spiral_arm_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010204,
  "worldID": 1000006,
  "name": "region 4",
  "mapFilename": "spiral_arm_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 0
}, {
  "id": 1010205,
  "worldID": 1000006,
  "name": "region 5",
  "mapFilename": "spiral_arm_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 0
}, {
  "id": 1010206,
  "worldID": 1000006,
  "name": "region 6",
  "mapFilename": "spiral_arm_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010207,
  "worldID": 1000006,
  "name": "region 7",
  "mapFilename": "spiral_arm_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010208,
  "worldID": 1000006,
  "name": "region 8",
  "mapFilename": "spiral_arm_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010209,
  "worldID": 1000006,
  "name": "region 9",
  "mapFilename": "spiral_arm_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 100
}, {
  "id": 1010210,
  "worldID": 1000006,
  "name": "region 10",
  "mapFilename": "spiral_arm_10",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 100
}, {
  "id": 1010211,
  "worldID": 1000006,
  "name": "region 11",
  "mapFilename": "spiral_arm_11",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010212,
  "worldID": 1000006,
  "name": "region 12",
  "mapFilename": "spiral_arm_12",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010213,
  "worldID": 1000006,
  "name": "region 13",
  "mapFilename": "spiral_arm_13",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010214,
  "worldID": 1000006,
  "name": "region 14",
  "mapFilename": "spiral_arm_14",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 200
}, {
  "id": 1010215,
  "worldID": 1000006,
  "name": "region 15",
  "mapFilename": "spiral_arm_15",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 200
}, {
  "id": 1010301,
  "worldID": 1000007,
  "name": "region 1",
  "mapFilename": "galaxy_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010302,
  "worldID": 1000007,
  "name": "region 2",
  "mapFilename": "galaxy_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010303,
  "worldID": 1000007,
  "name": "region 3",
  "mapFilename": "galaxy_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010304,
  "worldID": 1000007,
  "name": "region 4",
  "mapFilename": "galaxy_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 0
}, {
  "id": 1010305,
  "worldID": 1000007,
  "name": "region 5",
  "mapFilename": "galaxy_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 0
}, {
  "id": 1010306,
  "worldID": 1000007,
  "name": "region 6",
  "mapFilename": "galaxy_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010307,
  "worldID": 1000007,
  "name": "region 7",
  "mapFilename": "galaxy_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010308,
  "worldID": 1000007,
  "name": "region 8",
  "mapFilename": "galaxy_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010309,
  "worldID": 1000007,
  "name": "region 9",
  "mapFilename": "galaxy_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 100
}, {
  "id": 1010310,
  "worldID": 1000007,
  "name": "region 10",
  "mapFilename": "galaxy_10",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 100
}, {
  "id": 1010311,
  "worldID": 1000007,
  "name": "region 11",
  "mapFilename": "galaxy_11",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010312,
  "worldID": 1000007,
  "name": "region 12",
  "mapFilename": "galaxy_12",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010313,
  "worldID": 1000007,
  "name": "region 13",
  "mapFilename": "galaxy_13",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010314,
  "worldID": 1000007,
  "name": "region 14",
  "mapFilename": "galaxy_14",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 200
}, {
  "id": 1010315,
  "worldID": 1000007,
  "name": "region 15",
  "mapFilename": "galaxy_15",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 200
}, {
  "id": 1010401,
  "worldID": 1000008,
  "name": "region 1",
  "mapFilename": "local_galactic_group_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010402,
  "worldID": 1000008,
  "name": "region 2",
  "mapFilename": "local_galactic_group_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010403,
  "worldID": 1000008,
  "name": "region 3",
  "mapFilename": "local_galactic_group_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010404,
  "worldID": 1000008,
  "name": "region 4",
  "mapFilename": "local_galactic_group_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 0
}, {
  "id": 1010405,
  "worldID": 1000008,
  "name": "region 5",
  "mapFilename": "local_galactic_group_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 0
}, {
  "id": 1010406,
  "worldID": 1000008,
  "name": "region 6",
  "mapFilename": "local_galactic_group_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010407,
  "worldID": 1000008,
  "name": "region 7",
  "mapFilename": "local_galactic_group_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010408,
  "worldID": 1000008,
  "name": "region 8",
  "mapFilename": "local_galactic_group_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010409,
  "worldID": 1000008,
  "name": "region 9",
  "mapFilename": "local_galactic_group_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 100
}, {
  "id": 1010410,
  "worldID": 1000008,
  "name": "region 10",
  "mapFilename": "local_galactic_group_10",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 100
}, {
  "id": 1010411,
  "worldID": 1000008,
  "name": "region 11",
  "mapFilename": "local_galactic_group_11",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010412,
  "worldID": 1000008,
  "name": "region 12",
  "mapFilename": "local_galactic_group_12",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010413,
  "worldID": 1000008,
  "name": "region 13",
  "mapFilename": "local_galactic_group_13",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010414,
  "worldID": 1000008,
  "name": "region 14",
  "mapFilename": "local_galactic_group_14",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 300,
  "topLeftCornerY": 200
}, {
  "id": 1010415,
  "worldID": 1000008,
  "name": "region 15",
  "mapFilename": "local_galactic_group_15",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 400,
  "topLeftCornerY": 200
}, {
  "id": 1010501,
  "worldID": 1000009,
  "name": "region 1",
  "mapFilename": "local_cluster_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010502,
  "worldID": 1000009,
  "name": "region 2",
  "mapFilename": "local_cluster_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010503,
  "worldID": 1000009,
  "name": "region 3",
  "mapFilename": "local_cluster_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010504,
  "worldID": 1000009,
  "name": "region 4",
  "mapFilename": "local_cluster_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010601,
  "worldID": 1000010,
  "name": "region 1",
  "mapFilename": "supercluster_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010602,
  "worldID": 1000010,
  "name": "region 2",
  "mapFilename": "supercluster_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010603,
  "worldID": 1000010,
  "name": "region 3",
  "mapFilename": "supercluster_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010604,
  "worldID": 1000010,
  "name": "region 4",
  "mapFilename": "supercluster_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010605,
  "worldID": 1000010,
  "name": "region 5",
  "mapFilename": "supercluster_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010606,
  "worldID": 1000010,
  "name": "region 6",
  "mapFilename": "supercluster_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010607,
  "worldID": 1000010,
  "name": "region 7",
  "mapFilename": "supercluster_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010608,
  "worldID": 1000010,
  "name": "region 8",
  "mapFilename": "supercluster_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010609,
  "worldID": 1000010,
  "name": "region 9",
  "mapFilename": "supercluster_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010701,
  "worldID": 1000011,
  "name": "region 1",
  "mapFilename": "cosmic_filament_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010702,
  "worldID": 1000011,
  "name": "region 2",
  "mapFilename": "cosmic_filament_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010703,
  "worldID": 1000011,
  "name": "region 3",
  "mapFilename": "cosmic_filament_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010704,
  "worldID": 1000011,
  "name": "region 4",
  "mapFilename": "cosmic_filament_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010705,
  "worldID": 1000011,
  "name": "region 5",
  "mapFilename": "cosmic_filament_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010706,
  "worldID": 1000011,
  "name": "region 6",
  "mapFilename": "cosmic_filament_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010707,
  "worldID": 1000011,
  "name": "region 7",
  "mapFilename": "cosmic_filament_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010708,
  "worldID": 1000011,
  "name": "region 8",
  "mapFilename": "cosmic_filament_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010709,
  "worldID": 1000011,
  "name": "region 9",
  "mapFilename": "cosmic_filament_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010801,
  "worldID": 1000012,
  "name": "region 1",
  "mapFilename": "cosmic_void_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010802,
  "worldID": 1000012,
  "name": "region 2",
  "mapFilename": "cosmic_void_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010803,
  "worldID": 1000012,
  "name": "region 3",
  "mapFilename": "cosmic_void_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010804,
  "worldID": 1000012,
  "name": "region 4",
  "mapFilename": "cosmic_void_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010805,
  "worldID": 1000012,
  "name": "region 5",
  "mapFilename": "cosmic_void_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010806,
  "worldID": 1000012,
  "name": "region 6",
  "mapFilename": "cosmic_void_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010807,
  "worldID": 1000012,
  "name": "region 7",
  "mapFilename": "cosmic_void_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010808,
  "worldID": 1000012,
  "name": "region 8",
  "mapFilename": "cosmic_void_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010809,
  "worldID": 1000012,
  "name": "region 9",
  "mapFilename": "cosmic_void_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}, {
  "id": 1010901,
  "worldID": 1000013,
  "name": "region 1",
  "mapFilename": "observable_universe_01",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 0
}, {
  "id": 1010902,
  "worldID": 1000013,
  "name": "region 2",
  "mapFilename": "observable_universe_02",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 0
}, {
  "id": 1010903,
  "worldID": 1000013,
  "name": "region 3",
  "mapFilename": "observable_universe_03",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 0
}, {
  "id": 1010904,
  "worldID": 1000013,
  "name": "region 4",
  "mapFilename": "observable_universe_04",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 100
}, {
  "id": 1010905,
  "worldID": 1000013,
  "name": "region 5",
  "mapFilename": "observable_universe_05",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 100
}, {
  "id": 1010906,
  "worldID": 1000013,
  "name": "region 6",
  "mapFilename": "observable_universe_06",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 100
}, {
  "id": 1010907,
  "worldID": 1000013,
  "name": "region 7",
  "mapFilename": "observable_universe_07",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 0,
  "topLeftCornerY": 200
}, {
  "id": 1010908,
  "worldID": 1000013,
  "name": "region 8",
  "mapFilename": "observable_universe_08",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 100,
  "topLeftCornerY": 200
}, {
  "id": 1010909,
  "worldID": 1000013,
  "name": "region 9",
  "mapFilename": "observable_universe_09",
  "note": "",
  "shardType": "alphaShard",
  "zoneCostMin": 1e10,
  "zoneCostMax": 1e20,
  "topLeftCornerX": 200,
  "topLeftCornerY": 200
}];
},{}],"assets/gameData/worldData.json":[function(require,module,exports) {
module.exports = [{
  "id": 1000001,
  "name": "Peninsula",
  "note": "",
  "zoneCostMin": 100,
  "zoneCostMax": "1e30",
  "zoneShardType": "alpha",
  "active": true
}, {
  "id": 1000002,
  "name": "Continent",
  "note": "",
  "zoneCostMin": "1e18",
  "zoneCostMax": "1e45",
  "zoneShardType": "beta"
}, {
  "id": 1000003,
  "name": "Planet",
  "note": "",
  "zoneCostMin": "1e48",
  "zoneCostMax": "1e135",
  "zoneShardType": "gamma"
}, {
  "id": 1000004,
  "name": "Solar System",
  "note": "",
  "zoneCostMin": "1e138",
  "zoneCostMax": "1e411",
  "zoneShardType": "delta"
}, {
  "id": 1000005,
  "name": "Local Bubble",
  "note": "",
  "zoneCostMin": "1e420",
  "zoneCostMax": "1e1280",
  "zoneShardType": "epsilon"
}, {
  "id": 1000006,
  "name": "Spiral Arm",
  "note": "",
  "zoneCostMin": "1e1300",
  "zoneCostMax": "1e4100",
  "zoneShardType": "eta"
}, {
  "id": 1000007,
  "name": "Galaxy",
  "note": "",
  "zoneCostMin": "1e4200",
  "zoneCostMax": "1e15000",
  "zoneShardType": "theta"
}, {
  "id": 1000008,
  "name": "Local Galactic Group",
  "note": "",
  "zoneCostMin": "1e17000",
  "zoneCostMax": "1e50000",
  "zoneShardType": "iota"
}, {
  "id": 1000009,
  "name": "Local Cluster",
  "note": "",
  "zoneCostMin": "1e55000",
  "zoneCostMax": "1e200000",
  "zoneShardType": "kappa"
}, {
  "id": 1000010,
  "name": "Supercluster",
  "note": "",
  "zoneCostMin": "1e250000",
  "zoneCostMax": "1e1000000",
  "zoneShardType": "lambda"
}, {
  "id": 1000011,
  "name": "Cosmic Filament",
  "note": "",
  "zoneCostMin": "1e1000000",
  "zoneCostMax": "1e10000000",
  "zoneShardType": "mu"
}, {
  "id": 1000012,
  "name": "Cosmic Void",
  "note": "",
  "zoneCostMin": "1e15000000",
  "zoneCostMax": "1e150000000",
  "zoneShardType": "nu"
}, {
  "id": 1000013,
  "name": "Observable Universe",
  "note": "",
  "zoneCostMin": "1e200000000",
  "zoneCostMax": "1e1000000000",
  "zoneShardType": "xi"
}, {
  "id": 1000014,
  "name": "Beyond",
  "note": "",
  "zoneCostMin": "1e10000000000",
  "zoneCostMax": "1e100000000000",
  "zoneShardType": "omicron"
}];
},{}],"assets/gameData/trainingData.json":[function(require,module,exports) {
module.exports = [{
  "id": 1001,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Running",
  "note": "It doesn't have to make sense. RUN.",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 1,
  "costGrowthRate": 1.3,
  "prodType": "forceIncome",
  "prodBase": 0.5,
  "prodGrowthRate": 1.1,
  "active": true,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Running2",
    "note": "It doesn't have to make sense. RUN2.",
    "description": "",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Running3",
    "note": "It doesn't have to make sense. RUN3.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 1002,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Pullups",
  "note": "eh",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 300,
  "costGrowthRate": 1.3,
  "prodType": "forceIncome",
  "prodBase": 150,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Advanced Pullups",
    "note": "Grasp the bar with all your might and push your limits to the next level.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Master Pullups",
    "note": "Perfect form, relentless drive. You're a pull-up machine.",
    "description": "",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 1003,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Wing-Chun Dummy Training",
  "note": "While it stands stoic and strong, it also stands idle and foolish, never knowing the joy of victory or the wisdom of failure.",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 8e5,
  "costGrowthRate": 1.3,
  "prodType": "forceIncome",
  "prodBase": 4e4,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Wing-Chun Dummy Mastery",
    "note": "The dummy stands no chance against your fluid movements and strong strikes.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Wing-Chun Dummy Grandmaster",
    "note": "You've transcended beyond the basics, embodying the spirit of Wing-Chun.",
    "description": "",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 1004,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Squat",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 3e8,
  "costGrowthRate": 1.3,
  "prodType": "forceIncome",
  "prodBase": 4e6,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Heavy Squats",
    "note": "Lift more, grow stronger. The weight is but a number.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Squat God",
    "note": "You squat with such power and grace that the gods would be envious.",
    "description": "",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.65,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 1005,
  "realmID": 10,
  "evolutionTier": 1,
  "name": "Deadlift",
  "note": "",
  "description": "",
  "level": 0,
  "costType": "force",
  "costBase": 7e12,
  "costGrowthRate": 1.3,
  "prodType": "forceIncome",
  "prodBase": 1.75e8,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Deadlift Powerhouse",
    "note": "You've graduated from novice to powerhouse, deadlifting weights that would make others quake.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Deadlift Titan",
    "note": "You are a titan among mortals, lifting weights others can only dream of.",
    "description": "",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 2001,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Concentrate energy ball",
  "note": "Harness your energy into a concentrated sphere.",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 1,
  "costGrowthRate": 1.3,
  "prodType": "energyIncome",
  "prodBase": 1,
  "prodGrowthRate": 1.1,
  "active": true,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Energize",
    "note": "Your control over your energy balls grows, turning them into devastating weapons.",
    "description": "",
    "level": 0,
    "costBase": 10,
    "costGrowthRate": 1.3,
    "prodBase": 10,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Energize Master",
    "note": "You've mastered energy manipulation, allowing you to create incredibly powerful energy balls.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 2002,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Fly 10 feet",
  "note": "Take to the skies and learn to fly.",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 10,
  "costGrowthRate": 1.35,
  "prodType": "energyIncome",
  "prodBase": 10,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Soar",
    "note": "You've begun to master flight, allowing you to fly faster and higher.",
    "description": "",
    "level": 0,
    "costBase": 100,
    "costGrowthRate": 1.3,
    "prodBase": 100,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Soar Master",
    "note": "You're now a master of flight, able to fly as freely as a bird.",
    "description": "",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 2003,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Manipulate energy aura",
  "note": "Learn to manipulate your aura, the energy that surrounds you.",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 100,
  "costGrowthRate": 1.4,
  "prodType": "energyIncome",
  "prodBase": 100,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Aura Mastery",
    "note": "Your mastery over your aura is growing, making it stronger and more resilient.",
    "description": "",
    "level": 0,
    "costBase": 1000,
    "costGrowthRate": 1.3,
    "prodBase": 1000,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Aura Grandmaster",
    "note": "You are now a grandmaster, with complete control over your aura.",
    "description": "",
    "level": 0,
    "costBase": 10000,
    "costGrowthRate": 1.3,
    "prodBase": 10000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 2004,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Force shielding",
  "note": "Create an invisible shield to protect you from attacks.",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 10000,
  "costGrowthRate": 1.45,
  "prodType": "energyIncome",
  "prodBase": 10000,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Shield Reinforcement",
    "note": "Strengthen your shield, making it nearly impervious to attacks.",
    "description": "",
    "level": 0,
    "costBase": 100000,
    "costGrowthRate": 1.3,
    "prodBase": 100000,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Shield Perfection",
    "note": "Your shield is now perfect, able to withstand any attack.",
    "description": "",
    "level": 0,
    "costBase": 1000000,
    "costGrowthRate": 1.3,
    "prodBase": 1000000,
    "prodGrowthRate": 1.1
  }]
}, {
  "id": 2005,
  "realmID": 30,
  "evolutionTier": 1,
  "name": "Projected energy blasting",
  "note": "Learn to project your energy as a powerful blast.",
  "description": "",
  "level": 0,
  "costType": "energy",
  "costBase": 100000,
  "costGrowthRate": 1.5,
  "prodType": "energyIncome",
  "prodBase": 100000,
  "prodGrowthRate": 1.1,
  "active": false,
  "evolutions": [{
    "evolutionTier": 2,
    "name": "Blast Mastery",
    "note": "Your energy blasts are now more powerful and accurate.",
    "description": "",
    "level": 0,
    "costBase": 1000000,
    "costGrowthRate": 1.3,
    "prodBase": 1000000,
    "prodGrowthRate": 1.1
  }, {
    "evolutionTier": 3,
    "name": "Blast Grandmaster",
    "note": "As a grandmaster, your energy blasts are now unstoppable forces of destruction.",
    "description": "",
    "level": 0,
    "costBase": 10000000,
    "costGrowthRate": 1.3,
    "prodBase": 1000000,
    "prodGrowthRate": 1.1
  }]
}];
},{}],"assets/gameData/zoneData.json":[function(require,module,exports) {
module.exports = [{
  "id": 90001,
  "regionID": 1010001,
  "name": "Mouse",
  "description": "Beware the mouse that tiptoes through the night, for it's the master of silent sabotage. It once chewed through the king's favorite crown, leaving a royal headache and a dental bill.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 10,
  "active": false,
  "parentID": null,
  "angleFromParent": 222,
  "distanceFromParent": 60,
  "x": 300,
  "y": 150
}, {
  "id": 90002,
  "regionID": 1010001,
  "name": "Squirrel",
  "description": "The squirrel, a fluffy harbinger of chaos, hoards acorns like weapons of mass disruption. Legend has it that one squirrel amassed so many acorns, it triggered a stock market crash in the forest.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 12,
  "parentID": 90001,
  "angleFromParent": 145,
  "distanceFromParent": 90
}, {
  "id": 90003,
  "regionID": 1010001,
  "name": "Rabbit",
  "description": "In the shadows, the rabbit lurks, its twitching nose a harbinger of doom. This creature once dug an escape tunnel so deep that it popped up in China, causing an international incident.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 14,
  "parentID": 90002,
  "angleFromParent": 130,
  "distanceFromParent": 60
}, {
  "id": 90004,
  "regionID": 1010001,
  "name": "Fox",
  "description": "The fox, with eyes like burning coals, is the cunning trickster of the woods. It once sold a bridge to a group of gullible trolls and then charged them a toll to cross.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 16,
  "parentID": 90003,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 90021,
  "regionID": 1010001,
  "name": "Marathon Trainer",
  "description": "",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 14,
  "parentID": 90004,
  "angleFromParent": 235,
  "distanceFromParent": 60
}, {
  "id": 90005,
  "regionID": 1010001,
  "name": "Wildcat",
  "description": "A wildcat's roar is a symphony of terror, capable of scaring the moon out of the night sky. This beast once cornered a lumberjack, forcing him to carve a totem pole in its honor.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 18,
  "parentID": 90004,
  "angleFromParent": 90,
  "distanceFromParent": 120
}, {
  "id": 90006,
  "regionID": 1010001,
  "name": "Wolf",
  "description": "The wolf, a ruthless pack leader, thrives on organized chaos. It once orchestrated a synchronized sheep parade, leaving the herd both bewildered and oddly entertained.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 20,
  "parentID": 90005,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 90008,
  "regionID": 1010001,
  "name": "Bear",
  "description": "The bear, a lumbering behemoth, has a taste for mayhem. It once wandered into a beekeeping convention, leaving behind a honey-coated nightmare and a swarm of traumatized beekeepers.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 22,
  "parentID": 90006,
  "angleFromParent": 30,
  "distanceFromParent": 60
}, {
  "id": 90009,
  "regionID": 1010001,
  "name": "Eagle",
  "description": "The eagle, a majestic sentinel of the sky, sees all and judges all. It once swooped down to steal a toddler's ice cream, proclaiming itself the 'Emperor of Frozen Delights.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 24,
  "zoneType": "boss",
  "parentID": 90008,
  "angleFromParent": 20,
  "distanceFromParent": 150
}, {
  "id": 90101,
  "regionID": 1010002,
  "name": "Hawk",
  "description": "The hawk, with eyes that pierce the soul, is the watchful sentinel of the wilderness. It once snatched a noisy car alarm and carried it to the highest peak, where it remains to this day.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 26,
  "parentID": 90009,
  "angleFromParent": 270,
  "distanceFromParent": 180,
  "x": 50,
  "y": 90
}, {
  "id": 90102,
  "regionID": 1010002,
  "name": "Owl",
  "description": "The owl, a harbinger of wisdom and insomnia, knows the darkest secrets of the night. It once solved a mystery so perplexing that even Sherlock Holmes sent it a 'hoot' of approval.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 28,
  "parentID": 90101,
  "angleFromParent": 110,
  "distanceFromParent": 70
}, {
  "id": 90103,
  "regionID": 1010002,
  "name": "Snake",
  "description": "Beware the snake, a creature of silent malevolence, capable of coiling chaos. It once infiltrated a game of 'Snakes and Ladders,' turning it into 'Snakes and Scales,' a board game of doom.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 30,
  "parentID": 90102,
  "angleFromParent": 30,
  "distanceFromParent": 60
}, {
  "id": 90104,
  "regionID": 1010002,
  "name": "Lizard",
  "description": "The lizard, master of adaptation, has a skin as tough as an exoskeleton. It once challenged a steamroller to a game of 'Chicken' and emerged unscathed, forever earning its respect.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 32,
  "parentID": 90103,
  "angleFromParent": 50,
  "distanceFromParent": 60
}, {
  "id": 90118,
  "regionID": 1010002,
  "name": "Wise Panther",
  "description": "You will need more than brawn to defeat this smart boi.",
  "note": "",
  "costType": "wisdom",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 96,
  "parentID": 90104,
  "angleFromParent": 335,
  "distanceFromParent": 150,
  "isUnlockedByConnection": true,
  "zoneType": "legendaryBoss"
}, {
  "id": 90105,
  "regionID": 1010002,
  "name": "Turtle",
  "description": "The turtle, a symbol of patience, once decided to protest against the fast-paced world. It staged a 'sit-in' on a highway, causing the mother of all traffic jams.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 34,
  "parentID": 90104,
  "angleFromParent": 110,
  "distanceFromParent": 100
}, {
  "id": 90125,
  "regionID": 1010002,
  "name": "Hovid Daggins",
  "description": "Run longer",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 34,
  "parentID": 90105,
  "angleFromParent": 110,
  "distanceFromParent": 100
}, {
  "id": 90107,
  "regionID": 1010002,
  "name": "Poison Frog",
  "description": "The poison frog, an artist of deadly beauty, once painted a masterpiece with its toxic colors. Critics call it 'The Kiss of Death,' but it's not for sale.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 36,
  "zoneType": "boss",
  "parentID": 90105,
  "angleFromParent": 10,
  "distanceFromParent": 330
}, {
  "id": 90201,
  "regionID": 1010003,
  "name": "Salamander",
  "description": "The salamander, a creature born of fire, once moonlighted as a barbecue chef. Its 'Smokin' Tail Ribs' are so spicy, they can melt steel.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 38,
  "parentID": 90107,
  "angleFromParent": 270,
  "distanceFromParent": 160,
  "x": 60,
  "y": 350
}, {
  "id": 90202,
  "regionID": 1010003,
  "name": "Boar",
  "description": "The boar, a juggernaut of chaos, once crashed a china shop just to prove a point. To this day, they tell tales of the 'Piggy Porcelain Massacre.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 40,
  "parentID": 90201,
  "angleFromParent": 325,
  "distanceFromParent": 90
}, {
  "id": 90203,
  "regionID": 1010003,
  "name": "Stag",
  "description": "The stag, with antlers like thunderbolts, once challenged Thor to an arm-wrestling match and won. Now, it's the deity of stag-sized ego.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 42,
  "parentID": 90202,
  "angleFromParent": 290,
  "distanceFromParent": 90
}, {
  "id": 90204,
  "regionID": 1010003,
  "name": "Falcon",
  "description": "The falcon, a master of precision, once performed brain surgery on a mosquito with a laser-focused talon strike. The mosquito didn't survive, but the falcon's reputation soared.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 44,
  "parentID": 90203,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 90205,
  "regionID": 1010003,
  "name": "Dragon Hatchling",
  "description": "The dragon hatchling, a creature of untapped destruction, once hatched in a fireworks factory. The resulting display is still celebrated as 'The Night the Sky Bled Fire.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 46,
  "parentID": 90204,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 90206,
  "regionID": 1010003,
  "name": "Wyvern",
  "description": "The wyvern, a beast of aerial menace, once dabbled in poetry. Its verses were so fiery that they ignited a forest, giving birth to the 'Blazing Ballads of the Wyvern.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 48,
  "parentID": 90205,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 90208,
  "regionID": 1010003,
  "name": "Elder Pterodactyl",
  "description": "The elder pterodactyl, ancient and inscrutable, once outsmarted a black hole in a game of cosmic chess. The universe is still trying to figure out the implications.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 50,
  "zoneType": "boss",
  "parentID": 90206,
  "angleFromParent": 50,
  "distanceFromParent": 120
}, {
  "id": 90301,
  "regionID": 1010004,
  "name": "Jungle Troll",
  "description": "The jungle troll, a creature of darkness, once started a cooking show called 'Troll's Hell's Kitchen.' Contestants either make a meal or become one.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 52,
  "parentID": null,
  "angleFromParent": 222,
  "distanceFromParent": 60,
  "x": 250,
  "y": 175,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 90302,
  "regionID": 1010004,
  "name": "Basilisk",
  "description": "The basilisk, the embodiment of petrifying doom, once gazed upon itself in a mirror. Now, it's the owner of the world's most dangerous selfie.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 54,
  "parentID": 90301,
  "angleFromParent": 200,
  "distanceFromParent": 80
}, {
  "id": 90321,
  "regionID": 1010004,
  "name": "Upgrade Trainer",
  "description": "",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 54,
  "parentID": 90302,
  "angleFromParent": 260,
  "distanceFromParent": 80
}, {
  "id": 90303,
  "regionID": 1010004,
  "name": "Chimaera",
  "description": "The chimaera, a fusion of monstrosities, once took up stand-up comedy. Audiences couldn't decide whether to laugh or run in terror, so they did both.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 56,
  "parentID": 90302,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 90304,
  "regionID": 1010004,
  "name": "Mantis Warrior",
  "description": "The mantis warrior, a blade-wielding insect of vengeance, once challenged Death itself to a duel. Death blinked first, and now the mantis collects souls as a side hustle.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 58,
  "parentID": 90303,
  "angleFromParent": 90,
  "distanceFromParent": 90
}, {
  "id": 90305,
  "regionID": 1010004,
  "name": "Poison Wyrm",
  "description": "The Poison Wyrm, a serpent with a personality as toxic as its venom. It's so bitter, it once convinced a troll to become a motivational speaker just to bring more misery into the world.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 60,
  "parentID": 90304,
  "angleFromParent": 25,
  "distanceFromParent": 120
}, {
  "id": 90306,
  "regionID": 1010004,
  "name": "Jungle Hydra",
  "description": "The Jungle Hydra, a creature with more heads than a reality TV show. It once challenged a drama queen to a 'who can stir up more chaos' contest. Let's just say, the hydra won by a landslide.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 62,
  "parentID": 90305,
  "angleFromParent": 0,
  "distanceFromParent": 185
}, {
  "id": 90307,
  "regionID": 1010004,
  "name": "Forest Spirit",
  "description": "The Forest Spirit, a being so enigmatic that it once played hide-and-seek with a chameleon. The chameleon is still looking for it.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 64,
  "parentID": 90306,
  "angleFromParent": 135,
  "distanceFromParent": 90
}, {
  "id": 90308,
  "regionID": 1010004,
  "name": "Treant Elder",
  "description": "The Treant Elder, a walking tree with an ancient grudge. It once shook its branches at a lumberjack, and he turned into a forest ranger. Lesson learned.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 66,
  "zoneType": "boss",
  "parentID": 90307,
  "angleFromParent": 130,
  "distanceFromParent": 90
}, {
  "id": 90401,
  "regionID": 1010005,
  "name": "Giant Scorpion",
  "description": "The Giant Scorpion, a creature that puts the 'sting' in 'disturbing.' It once moonlighted as a masseur, but clients were left 'stiff' for all the wrong reasons.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 68,
  "parentID": 90107,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 125,
  "y": 50
}, {
  "id": 90402,
  "regionID": 1010005,
  "name": "Sphynx",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 70,
  "parentID": 90401,
  "angleFromParent": 90,
  "distanceFromParent": 120
}, {
  "id": 90403,
  "regionID": 1010005,
  "name": "Sandworm",
  "description": "The Sandworm, a colossal underground terror with an appetite for destruction. It once ordered a 'sandwich' at a desert diner. Let's just say the chef was never seen again.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 72,
  "parentID": 90402,
  "angleFromParent": 65,
  "distanceFromParent": 100
}, {
  "id": 90423,
  "regionID": 1010005,
  "name": "Trainer",
  "description": "Trainer",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 72,
  "parentID": 90403,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 90404,
  "regionID": 1010005,
  "name": "Desert Chimera",
  "description": "The Desert Chimera, a fusion of nightmares that once told a scarecrow to 'get a real job.' Now, it's the most dreaded cornfield security guard.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 74,
  "parentID": 90403,
  "angleFromParent": 140,
  "distanceFromParent": 170,
  "outsideRegionConnectionIDs": [90306]
}, {
  "id": 90405,
  "regionID": 1010005,
  "name": "Anubian Jackal Warrior",
  "description": "The Anubian Jackal Warrior, guardian of the underworld, has a laugh that once made a banshee cry. It's rumored that even the dead are afraid of its puns.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 76,
  "parentID": 90404,
  "angleFromParent": 35,
  "distanceFromParent": 60
}, {
  "id": 90406,
  "regionID": 1010005,
  "name": "Solar Serpent",
  "description": "The Solar Serpent, a creature with a fiery temper that once challenged the sun to a 'hotness' competition. The sun has been sweating ever since.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 78,
  "parentID": 90405,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 90408,
  "regionID": 1010005,
  "name": "Desert Spirit",
  "description": "The Desert Spirit, a mirage of mischief, once convinced a nomad to trade his camel for a mirage. He's still wandering the sands in search of his refund.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 80,
  "parentID": 90406,
  "angleFromParent": 350,
  "distanceFromParent": 250
}, {
  "id": 90409,
  "regionID": 1010005,
  "name": "Ancient Mummy",
  "description": "The Ancient Mummy, wrapped in bandages and secrets, once played 'Guess Who?' with an archaeologist. He lost and still can't identify his own family.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 82,
  "zoneType": "boss",
  "parentID": 90408,
  "angleFromParent": 130,
  "distanceFromParent": 90
}, {
  "id": 90501,
  "regionID": 1010006,
  "name": "Stone Elemental",
  "description": "The Stone Elemental, a creature carved from the depths of the earth, once played hide-and-seek with a mountain. The mountain's hiding spot? Right where it stood.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 84,
  "parentID": 90408,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 50,
  "y": 375
}, {
  "id": 90502,
  "regionID": 1010006,
  "name": "Yeti",
  "description": "The Yeti, a frosty giant with an icy stare, once hosted a snowball fight with polar bears. It's still considered the 'Snowball Supreme Commander.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 86,
  "parentID": 90501,
  "angleFromParent": 350,
  "distanceFromParent": 90
}, {
  "id": 90503,
  "regionID": 1010006,
  "name": "Frost Giant",
  "description": "The Frost Giant, a colossal being with a heart as cold as its surroundings, once froze a volcano just for kicks. It's now a tourist attraction for chilly adventurers.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 88,
  "parentID": 90502,
  "angleFromParent": 325,
  "distanceFromParent": 90
}, {
  "id": 90504,
  "regionID": 1010006,
  "name": "White Dragon",
  "description": "The White Dragon, an icy terror of the skies, once taught a snowstorm how to be more 'cool.' Now, it's the reason for blizzards on the weather forecast.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 90,
  "parentID": 90503,
  "angleFromParent": 180,
  "distanceFromParent": 100
}, {
  "id": 90505,
  "regionID": 1010006,
  "name": "Ice Spirit",
  "description": "The Ice Spirit, a being as cold as your ex's heart, once gave frostbite to a snowflake. That snowflake now attends therapy for its identity crisis.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 92,
  "parentID": 90504,
  "angleFromParent": 275,
  "distanceFromParent": 90
}, {
  "id": 90506,
  "regionID": 1010006,
  "name": "Snow Beast",
  "description": "The Snow Beast, a creature born of winter's fury, once convinced a snowman to switch careers and become a slushie mascot. Frosty's now a 'cool' celebrity.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 94,
  "parentID": 90505,
  "angleFromParent": 235,
  "distanceFromParent": 130
}, {
  "id": 90507,
  "regionID": 1010006,
  "name": "Obsidian Puma",
  "description": "The Obsidian Puma, a feline made of stone, once told a geologist that 'rocks rock harder than humans.' The geologist quit and joined a mineral band.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 96,
  "parentID": 90505,
  "angleFromParent": 5,
  "distanceFromParent": 200,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 90508,
  "regionID": 1010006,
  "name": "Mountain Titan",
  "description": "The Mountain Titan, a giant with boulders for brains, once played chess with a tectonic plate. It's still pondering its next move.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 98,
  "parentID": 90505,
  "angleFromParent": 275,
  "distanceFromParent": 80
}, {
  "id": 90509,
  "regionID": 1010006,
  "name": "Frost Phoenix",
  "description": "The Frost Phoenix, a fiery bird of winter's end, once melted an ice cream truck just by landing on it. Now it's the reason we can't have nice cones.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "betaShard",
  "prodBase": 1,
  "baseConquestTime": 100,
  "zoneType": "boss",
  "parentID": 90508,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 90601,
  "regionID": 1010007,
  "name": "Giant Squid",
  "description": "The giant squid once challenged a Kraken to a game of 'Who Can Tangle More Ships?' The Kraken won but asked the giant squid for tips.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 102,
  "parentID": 90704,
  "angleFromParent": 90,
  "distanceFromParent": 200,
  "x": 425,
  "y": 55
}, {
  "id": 90602,
  "regionID": 1010007,
  "name": "Killer Whale",
  "description": "The Killer Whale, a marine menace with a killer sense of humor, once made a ship captain walk the plank just to see if he'd 'sea' his life flash before his eyes.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 104,
  "parentID": 90601,
  "angleFromParent": 135,
  "distanceFromParent": 90
}, {
  "id": 90603,
  "regionID": 1010007,
  "name": "Colossal Eel",
  "description": "The Colossal Eel, a slippery creature with electric charm, once challenged a lightning storm to a 'shocking' showdown. It left the storm feeling 'jolted.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 106,
  "parentID": 90602,
  "angleFromParent": 90,
  "distanceFromParent": 230
}, {
  "id": 90623,
  "regionID": 1010007,
  "name": "Trainer",
  "description": "Trainer",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 106,
  "parentID": 90603,
  "angleFromParent": 90,
  "distanceFromParent": 100
}, {
  "id": 90604,
  "regionID": 1010007,
  "name": "Titan Ray",
  "description": "The Titan Ray, an electrifying behemoth of the abyss, once short-circuited Poseidon's trident. Now, it's the 'Lord of the Deep' and king of underwater pranks.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 108,
  "parentID": 90603,
  "angleFromParent": 180,
  "distanceFromParent": 180
}, {
  "id": 90605,
  "regionID": 1010007,
  "name": "Island Turtle",
  "description": "Picture this guy sunbathing on your favorite beach, sipping a pi\xF1a colada, and casually flipping your sandcastle with one eyebrow raised. Island life, am I right?",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 110,
  "parentID": 90604,
  "angleFromParent": 235,
  "distanceFromParent": 90
}, {
  "id": 90606,
  "regionID": 1010007,
  "name": "Megalodon",
  "description": "The megalodon, a prehistoric shark, once tried to host a 'Bite the Biggest Ship' competition. Ships just stayed out of its way.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 112,
  "parentID": 90605,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 90608,
  "regionID": 1010007,
  "name": "Kraken",
  "description": "Picture a tentacled terror that once challenged a whirlpool to a 'Who Can Sink More Ships' contest. The whirlpool withdrew.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 114,
  "parentID": 90606,
  "angleFromParent": 289,
  "distanceFromParent": 210,
  "zoneType": "boss"
}, {
  "id": 90609,
  "regionID": 1010007,
  "name": "Leviathan",
  "description": "The leviathan, a sea monster of epic proportions, once tried to break the world record for 'Deepest Dive Without Gills.' The record books had to be rewritten.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 116,
  "parentID": 90608,
  "angleFromParent": 200,
  "distanceFromParent": 95,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 90701,
  "regionID": 1010008,
  "name": "Volcanic Dragon Hatchling",
  "description": "Think baby dragons are cute? This one sneezed and created a lava flow. The volcano down the road is still recovering.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 118,
  "parentID": 90409,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 250,
  "y": 35
}, {
  "id": 90702,
  "regionID": 1010008,
  "name": "Magma Spider",
  "description": "Imagine a spider that weaves its webs out of lava. It once tried to spin a hammock for a nap, and well, let's just say there's a new crater on the map now.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 120,
  "parentID": 90701,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 90703,
  "regionID": 1010008,
  "name": "Ember Bat",
  "description": "This bat can turn night into day with its fiery wings. It once went to a BBQ and ended up roasting marshmallows on its back.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 122,
  "parentID": 90702,
  "angleFromParent": 180,
  "distanceFromParent": 150
}, {
  "id": 90704,
  "regionID": 1010008,
  "name": "Lava Golem",
  "description": "The Lava Golem, the 'rock star' of the magma world, tried to start a boy band with some pebbles once. They broke up when the pebbles couldn't handle the heat.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 124,
  "parentID": 90703,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 90705,
  "regionID": 1010008,
  "name": "Flame Wraith",
  "description": "This ghostly creature once told a campfire ghost story that made the marshmallows burst into tears.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 126,
  "parentID": 90704,
  "angleFromParent": 55,
  "distanceFromParent": 225
}, {
  "id": 90706,
  "regionID": 1010008,
  "name": "Volcanic Dragon Adult",
  "description": "The big boss of the volcano, this dragon has such fiery breath it once turned a forest into a national park attraction. They called it 'Flaming Woodland.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 128,
  "parentID": 90705,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 90708,
  "regionID": 1010008,
  "name": "Phoenix",
  "description": "The phoenix, a fiery bird of rebirth, once hosted a BBQ for the gods. They're still raving about the 'eternal flame-grilled' taste.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 130,
  "parentID": 90706,
  "angleFromParent": 295,
  "distanceFromParent": 140
}, {
  "id": 90709,
  "regionID": 1010008,
  "name": "Volcanic Titan",
  "description": "Imagine a creature so colossal, it once played hopscotch with islands in the Pacific Ocean. Tsunami warning: indefinite.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 132,
  "zoneType": "boss",
  "parentID": 90708,
  "angleFromParent": 330,
  "distanceFromParent": 90
}, {
  "id": 90801,
  "regionID": 1010009,
  "name": "Velociraptor",
  "description": "Imagine a creature so cunning that it once played chess with a supercomputer just to sharpen its talons. Checkmate and a new keyboard.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 134,
  "parentID": 90709,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 40,
  "y": 45
}, {
  "id": 90802,
  "regionID": 1010009,
  "name": "Allosaurus",
  "description": "The allosaurus, a meat-eating menace, once tried a vegetarian diet. It lasted one leaf.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 136,
  "parentID": 90801,
  "angleFromParent": 100,
  "distanceFromParent": 130
}, {
  "id": 90803,
  "regionID": 1010009,
  "name": "Triceratops",
  "description": "Picture a dino that once challenged a bulldozer to a 'who's better at knocking stuff down' contest. The bulldozer said, 'I quit.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 138,
  "parentID": 90802,
  "angleFromParent": 60,
  "distanceFromParent": 120
}, {
  "id": 90804,
  "regionID": 1010009,
  "name": "Ankylosaurus",
  "description": "This armored dino once tried to enter a ballet audition as a 'living wrecking ball.' The ballerinas pirouetted away.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 140,
  "parentID": 90803,
  "angleFromParent": 30,
  "distanceFromParent": 120
}, {
  "id": 90805,
  "regionID": 1010009,
  "name": "Argentinosaurus",
  "description": "A dino so big it tried to audition for 'Godzilla vs. Kong.' The director said, 'Sorry, we don't have a budget for CGI that colossal.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 142,
  "parentID": 90804,
  "angleFromParent": 280,
  "distanceFromParent": 200
}, {
  "id": 90806,
  "regionID": 1010009,
  "name": "Carcharodontosaurus",
  "description": "Picture a dino with teeth so sharp it once tried to open a can of soda, and well, the soda's still fizzing.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 144,
  "parentID": 90805,
  "angleFromParent": 330,
  "distanceFromParent": 90
}, {
  "id": 90808,
  "regionID": 1010009,
  "name": "Gigantosaurus",
  "description": "This dino tried to take up ballet but ended up doing 'Dino in the China Shop' instead. Costly hobby.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 146,
  "parentID": 90806,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 90809,
  "regionID": 1010009,
  "name": "Spinosaurus",
  "description": "Imagine a dino that once tried to swim across the Atlantic just for a Sunday brunch in Europe. It's still waiting for the check.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "gammaShard",
  "prodBase": 1,
  "baseConquestTime": 148,
  "zoneType": "boss",
  "parentID": 90808,
  "angleFromParent": 75,
  "distanceFromParent": 150
}, {
  "id": 90901,
  "regionID": 1010021,
  "name": "Elephant",
  "description": "The original 'trunk' of all trades, this guy once tried to become a stand-up comedian, but the audience just remembered peanuts and forgot to laugh.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 150,
  "parentID": 90809,
  "angleFromParent": 222,
  "distanceFromParent": 200,
  "x": 40,
  "y": 350
}, {
  "id": 90902,
  "regionID": 1010021,
  "name": "Rhinoceros",
  "description": "Imagine a creature that once challenged a bulletproof vest to a headbutt contest. The vest got the point.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 152,
  "parentID": 90901,
  "angleFromParent": 300,
  "distanceFromParent": 150
}, {
  "id": 90903,
  "regionID": 1010021,
  "name": "Hippopotamus",
  "description": "This guy once declared himself the 'River Ruler' and tried to tax all the fish for swimming lessons. Fish just laughed and swam away.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 154,
  "parentID": 90902,
  "angleFromParent": 300,
  "distanceFromParent": 60
}, {
  "id": 90904,
  "regionID": 1010021,
  "name": "Giraffe",
  "description": "Picture a creature that once played hide-and-seek with a tree. It's still looking for that perfect hiding spot.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 156,
  "parentID": 90903,
  "angleFromParent": 310,
  "distanceFromParent": 60
}, {
  "id": 90905,
  "regionID": 1010021,
  "name": "Ostrich",
  "description": "The ostrich once tried to teach a sloth speed dating, but the sloth is still on its first date.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 158,
  "parentID": 90904,
  "angleFromParent": 320,
  "distanceFromParent": 60
}, {
  "id": 90912,
  "regionID": 1010021,
  "name": "Font of Wisdom",
  "description": "Meditate at the Font of Wisdom.  Probably will make you wiser. Probably.",
  "note": "",
  "costType": "force",
  "costBase": 1,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 158,
  "parentID": 90905,
  "angleFromParent": 75,
  "distanceFromParent": 250,
  "isUnlockedByConnection": true,
  "zoneType": "legendaryBoss"
}, {
  "id": 90906,
  "regionID": 1010021,
  "name": "Cassowary",
  "description": "The cassowary, a bird with a personality as sharp as its talons, once challenged a chainsaw to a 'who's the real lumberjack' contest. Chainsaw's still trying to prove itself.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 160,
  "parentID": 90905,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 90908,
  "regionID": 1010021,
  "name": "Crocodile",
  "description": "Picture a creature that once tried to audition for 'Dancing with the Stars: Swamp Edition.' The dance floor is still drying out.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 162,
  "parentID": 90906,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 90909,
  "regionID": 1010021,
  "name": "Giant Snake",
  "description": "This snake once tried to teach a mongoose the art of 'snake charming.' Let's just say the mongoose didn't charm its way out of that lesson.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 164,
  "zoneType": "boss",
  "parentID": 90908,
  "angleFromParent": 45,
  "distanceFromParent": 120
}, {
  "id": 91001,
  "regionID": 1010022,
  "name": "Grizzly Bear",
  "description": "The grizzly bear, a creature with a 'bear-y' grizzly sense of humor, once tried stand-up comedy. The audience's review? \"His jokes were un-bear-able.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 166,
  "parentID": 90909,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 40,
  "y": 425
}, {
  "id": 91002,
  "regionID": 1010022,
  "name": "Polar Bear",
  "description": "This bear once declared itself 'King of the Arctic,' and all the icebergs just rolled their eyes and floated away.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 168,
  "parentID": 91001,
  "angleFromParent": 310,
  "distanceFromParent": 120
}, {
  "id": 91003,
  "regionID": 1010022,
  "name": "Gorilla",
  "description": "Imagine a gorilla that once entered a bodybuilding contest with a group of bodybuilders. They renamed it 'Harambe Schwarzenegger.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 170,
  "parentID": 91002,
  "angleFromParent": 35,
  "distanceFromParent": 210
}, {
  "id": 91004,
  "regionID": 1010022,
  "name": "Chimpanzee",
  "description": "The chimpanzee once tried to teach a human the art of 'jungle etiquette.' The human is still working on its 'swing.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 172,
  "parentID": 91003,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 91005,
  "regionID": 1010022,
  "name": "Orangutan",
  "description": "This red-haired fellow once tried to audition for the role of 'Tarzan.' They told him his tree-swinging needed more 'ape-peal.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 174,
  "parentID": 91004,
  "angleFromParent": 235,
  "distanceFromParent": 60
}, {
  "id": 91006,
  "regionID": 1010022,
  "name": "Mandrill",
  "description": "The mandrill, with a face that could stop traffic, once tried to become a traffic cop. Drivers just couldn't take it seriously.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 176,
  "parentID": 91005,
  "angleFromParent": 265,
  "distanceFromParent": 150
}, {
  "id": 91008,
  "regionID": 1010022,
  "name": "Baboon",
  "description": "Imagine a baboon that once convinced a lion to go vegan. Now the lion's a 'Grr-ass-eater.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 178,
  "parentID": 91006,
  "angleFromParent": 235,
  "distanceFromParent": 140
}, {
  "id": 91009,
  "regionID": 1010022,
  "name": "Gelada",
  "description": "This monkey once tried to teach its fellow primates the art of 'Zen and the Art of Social Grooming.' The troop now has a waiting list for meditation sessions.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 180,
  "zoneType": "boss",
  "parentID": 91008,
  "angleFromParent": 335,
  "distanceFromParent": 240
}, {
  "id": 91101,
  "regionID": 1010023,
  "name": "Howler Monkey",
  "description": "The howler monkey once tried to form a heavy metal band. It's still working on finding the right scream for the chorus.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 182,
  "parentID": 91009,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 30,
  "y": 45
}, {
  "id": 91102,
  "regionID": 1010023,
  "name": "Capuchin Monkey",
  "description": "Picture a capuchin monkey that once joined a pickpocket training program for humans. It's now the star pupil.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 184,
  "parentID": 91101,
  "angleFromParent": 35,
  "distanceFromParent": 100
}, {
  "id": 91103,
  "regionID": 1010023,
  "name": "Ocelot",
  "description": "The ocelot, a creature with spots to die for, once convinced a leopard to trade patterns. The leopard now blends into the grass.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 186,
  "parentID": 91102,
  "angleFromParent": 35,
  "distanceFromParent": 90
}, {
  "id": 91104,
  "regionID": 1010023,
  "name": "Jaguar",
  "description": "This big cat once auditioned for 'America's Got Talent' with its rendition of 'Eye of the Jaguar.' The judges were speechless\u2014mostly out of fear.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 188,
  "parentID": 91103,
  "angleFromParent": 35,
  "distanceFromParent": 90
}, {
  "id": 91105,
  "regionID": 1010023,
  "name": "Cougar",
  "description": "Imagine a cougar that once declared itself the 'Puma Prowler of the Night.' The pumas just rolled their eyes and continued napping.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 190,
  "parentID": 91104,
  "angleFromParent": 60,
  "distanceFromParent": 215
}, {
  "id": 91123,
  "regionID": 1010023,
  "name": "Trainer",
  "description": "Trainer",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 190,
  "parentID": 91105,
  "angleFromParent": 180,
  "distanceFromParent": 30
}, {
  "id": 91106,
  "regionID": 1010023,
  "name": "Harpy Eagle",
  "description": "The harpy eagle, a bird of prey with an eagle eye for humor, once told a joke that made the clouds laugh so hard they rained.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 192,
  "parentID": 91105,
  "angleFromParent": 135,
  "distanceFromParent": 100
}, {
  "id": 91108,
  "regionID": 1010023,
  "name": "Andean Condor",
  "description": "Picture a condor that once tried to break the record for the world's highest dive. It's still free-falling, waiting for someone to say 'stop.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 194,
  "parentID": 91106,
  "angleFromParent": 10,
  "distanceFromParent": 60
}, {
  "id": 91109,
  "regionID": 1010023,
  "name": "California Condor",
  "description": "This condor once tried to convince a bald eagle to join a 'Feather Preservation Society.' The bald eagle politely declined.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "deltaShard",
  "prodBase": 1,
  "baseConquestTime": 196,
  "zoneType": "boss",
  "parentID": 91108,
  "angleFromParent": 350,
  "distanceFromParent": 90
}, {
  "id": 91201,
  "regionID": 1010024,
  "name": "Vulture",
  "description": "Imagine a vulture that once tried to audition for 'The Walking Dead' but was told it was 'too real' for the zombie role.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 198,
  "parentID": 91109,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 20,
  "y": 455
}, {
  "id": 91202,
  "regionID": 1010024,
  "name": "Giant Anteater",
  "description": "The giant anteater once applied for a job as a vacuum cleaner. It was turned down for 'sucking' too well.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 200,
  "parentID": 91201,
  "angleFromParent": 345,
  "distanceFromParent": 90,
  "outsideRegionConnectionIDs": [91602]
}, {
  "id": 91203,
  "regionID": 1010024,
  "name": "Armadillo",
  "description": "Picture an armadillo that once challenged a tank to a game of 'Rolling Ball.' The tank's still trying to catch up.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 202,
  "parentID": 91202,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 91204,
  "regionID": 1010024,
  "name": "Sloth",
  "description": "The sloth, a creature so slow that it once tried to teach a snail to 'hurry up.' The snail got to the finish line before the sloth finished the sentence.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 204,
  "parentID": 91203,
  "angleFromParent": 325,
  "distanceFromParent": 60
}, {
  "id": 91205,
  "regionID": 1010024,
  "name": "Manatee",
  "description": "Imagine a manatee that once tried to audition for a synchronized swimming team but was told it was 'too chill' for the sport.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 206,
  "parentID": 91204,
  "angleFromParent": 320,
  "distanceFromParent": 60
}, {
  "id": 91206,
  "regionID": 1010024,
  "name": "Walrus",
  "description": "The walrus once declared itself 'Lord of the Ice Floes' and tried to impose a 'tusk tax' on all passing ships. The ships sailed on without paying.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 208,
  "parentID": 91205,
  "angleFromParent": 200,
  "distanceFromParent": 60
}, {
  "id": 91208,
  "regionID": 1010024,
  "name": "Moose",
  "description": "The moose, nature's way of saying, \"I had leftover parts.\" One glance from those antlers and you'll swear you stumbled into the world's angriest chandelier.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 210,
  "parentID": 91206,
  "angleFromParent": 335,
  "distanceFromParent": 60
}, {
  "id": 91209,
  "regionID": 1010024,
  "name": "Elk",
  "description": "This forest aristocrat once challenged a tree to a game of 'Who's the Tallest?' The tree's still wondering why it wasted its time.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 212,
  "zoneType": "boss",
  "parentID": 91208,
  "angleFromParent": 335,
  "distanceFromParent": 60
}, {
  "id": 91301,
  "regionID": 1010025,
  "name": "Bighorn Sheep",
  "description": "The bighorn sheep, with horns so massive it once applied for a job as a battering ram. Buildings now fear its resume.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 214,
  "parentID": 91404,
  "angleFromParent": 90,
  "distanceFromParent": 150,
  "x": 450,
  "y": 155
}, {
  "id": 91302,
  "regionID": 1010025,
  "name": "Muskox",
  "description": "This furry fortress of solitude once tried to become a hair model. The hairstylist is still untangling.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 216,
  "parentID": 91301,
  "angleFromParent": 245,
  "distanceFromParent": 90
}, {
  "id": 91303,
  "regionID": 1010025,
  "name": "Bison",
  "description": "The bison, a creature that once challenged a tornado to a 'who can flip the most cars' contest. The tornado went home embarrassed.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 218,
  "parentID": 91302,
  "angleFromParent": 130,
  "distanceFromParent": 90
}, {
  "id": 91304,
  "regionID": 1010025,
  "name": "Caribou",
  "description": "Imagine a caribou that once tried to get a speeding ticket for Santa's sleigh. The cop just shook his head and let it go.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 220,
  "parentID": 91303,
  "angleFromParent": 85,
  "distanceFromParent": 120
}, {
  "id": 91305,
  "regionID": 1010025,
  "name": "Dire Wolf",
  "description": "This wolf once challenged Little Red Riding Hood to a game of 'Who's Afraid of Whom?' Granny's still recovering.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 222,
  "parentID": 91304,
  "angleFromParent": 110,
  "distanceFromParent": 140
}, {
  "id": 91306,
  "regionID": 1010025,
  "name": "Saber Toothed Cat",
  "description": "Picture a cat with teeth so long it once auditioned for 'Jaws: The Feline Edition.' The sharks are still salty about it.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 224,
  "parentID": 91305,
  "angleFromParent": 225,
  "distanceFromParent": 130
}, {
  "id": 91307,
  "regionID": 1010025,
  "name": "Wooly Mammoth",
  "description": "The Wooly mammoth, a creature so fuzzy it once tried to enter a 'Fluffiest Beast' contest. The competition said, 'You win, just don't sit on us.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 226,
  "parentID": 91306,
  "angleFromParent": 185,
  "distanceFromParent": 90,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 91308,
  "regionID": 1010025,
  "name": "Mastodon",
  "description": "This ancient giant once tried to teach a glacier how to speed up. The glacier's response? 'You first.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 228,
  "parentID": 91306,
  "angleFromParent": 225,
  "distanceFromParent": 150
}, {
  "id": 91309,
  "regionID": 1010025,
  "name": "Glyptodon",
  "description": "Imagine a creature that once tried to get into a 'Rolling Armored Parade.' It didn't roll so well and caused a traffic jam.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 230,
  "zoneType": "boss",
  "parentID": 91308,
  "angleFromParent": 270,
  "distanceFromParent": 90
}, {
  "id": 91401,
  "regionID": 1010026,
  "name": "Megatherium",
  "description": "The megatherium, a sloth the size of a house, once auditioned for a circus as a 'sloth contortionist.' The audience thought it was part of the tent.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 232,
  "parentID": 91004,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 350,
  "y": 45
}, {
  "id": 91402,
  "regionID": 1010026,
  "name": "Diprotodon",
  "description": "Picture a creature that once challenged a river to a drinking contest. The river's still flowing, but the diprotodon's not looking so good.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 234,
  "parentID": 91401,
  "angleFromParent": 165,
  "distanceFromParent": 80
}, {
  "id": 91403,
  "regionID": 1010026,
  "name": "Thylacoleo",
  "description": "This marsupial lion once tried to host a 'Roaring Contest' with a real lion. The real lion won, but the thylacoleo had better 'mane' jokes.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 236,
  "parentID": 91402,
  "angleFromParent": 190,
  "distanceFromParent": 90
}, {
  "id": 91404,
  "regionID": 1010026,
  "name": "Megalania",
  "description": "Imagine a lizard so big it once tried to enter a 'Dino Yoga Class.' Downward-facing mammoth, anyone?",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 238,
  "parentID": 91403,
  "angleFromParent": 145,
  "distanceFromParent": 150,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 91405,
  "regionID": 1010026,
  "name": "Titanoboa",
  "description": "This giant snake once challenged an anaconda to a 'who can wear more pythons as accessories' competition. Let's just say the anaconda lost its style.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 240,
  "parentID": 91404,
  "angleFromParent": 90,
  "distanceFromParent": 150
}, {
  "id": 91406,
  "regionID": 1010026,
  "name": "Quetzalcoatlus",
  "description": "The quetzalcoatlus, a colossal winged creature, once tried to teach pterodactyls the art of 'air traffic control.' The pterodactyls just circled aimlessly.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 242,
  "parentID": 91405,
  "angleFromParent": 35,
  "distanceFromParent": 110
}, {
  "id": 91408,
  "regionID": 1010026,
  "name": "Phorusrhacos",
  "description": "Picture a bird with an attitude so big it once tried to be the 'head rooster' in a farm. The chickens just laughed and continued pecking.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 244,
  "parentID": 91406,
  "angleFromParent": 0,
  "distanceFromParent": 160
}, {
  "id": 91409,
  "regionID": 1010026,
  "name": "Megalodon",
  "description": "The megalodon, a prehistoric shark, once tried to host a 'Bite the Biggest Ship' competition. Ships just stayed out of its way.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 246,
  "zoneType": "boss",
  "parentID": 91408,
  "angleFromParent": 30,
  "distanceFromParent": 120
}, {
  "id": 91501,
  "regionID": 1010027,
  "name": "Liopleurodon",
  "description": "Imagine a sea creature so fierce it once tried to enroll in 'Shark School.' The sharks begged for a transfer.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 248,
  "parentID": 91409,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 40,
  "y": 260
}, {
  "id": 91502,
  "regionID": 1010027,
  "name": "Titanosaur",
  "description": "The titanosaur, a dino of colossal proportions, once played hide-and-seek with mountains. It's still waiting to be found.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 250,
  "parentID": 91501,
  "angleFromParent": 350,
  "distanceFromParent": 90
}, {
  "id": 91503,
  "regionID": 1010027,
  "name": "Triceratops",
  "description": "Picture a dino that once challenged a bulldozer to a 'who's better at knocking stuff down' contest. The bulldozer said, 'I quit.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 252,
  "parentID": 91502,
  "angleFromParent": 90,
  "distanceFromParent": 150
}, {
  "id": 91504,
  "regionID": 1010027,
  "name": "Ankylosaurus",
  "description": "This armored dino once tried to enter a ballet audition as a 'living wrecking ball.' The ballerinas pirouetted away.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 254,
  "parentID": 91502,
  "angleFromParent": 335,
  "distanceFromParent": 90
}, {
  "id": 91505,
  "regionID": 1010027,
  "name": "Stegosaurus",
  "description": "Imagine a dino with plates on its back that once declared itself 'Nature's Dishwasher.' Dinosaurs lined up to hand over their dirty dishes.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 256,
  "parentID": 91504,
  "angleFromParent": 290,
  "distanceFromParent": 90
}, {
  "id": 91506,
  "regionID": 1010027,
  "name": "Allosaurus",
  "description": "The allosaurus, a meat-eating menace, once tried a vegetarian diet. It lasted one leaf.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 258,
  "parentID": 91505,
  "angleFromParent": 305,
  "distanceFromParent": 90
}, {
  "id": 91508,
  "regionID": 1010027,
  "name": "Tyrannosaurus Rex",
  "description": "You know, the T. rex once tried stand-up comedy, but every joke ended with 'and then I ate them.' It's a killer punchline.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 260,
  "parentID": 91504,
  "angleFromParent": 340,
  "distanceFromParent": 110
}, {
  "id": 91509,
  "regionID": 1010027,
  "name": "Velociraptor",
  "description": "Imagine a creature so cunning that it once played chess with a supercomputer just to sharpen its talons. Checkmate and a new keyboard.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 262,
  "zoneType": "boss",
  "parentID": 91508,
  "angleFromParent": 350,
  "distanceFromParent": 100
}, {
  "id": 91601,
  "regionID": 1010028,
  "name": "Pteranodon",
  "description": "This ancient flyer once tried to start its own airline. They said, 'Sorry, you don't meet the height requirements.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 264,
  "parentID": 91509,
  "angleFromParent": 270,
  "distanceFromParent": 170,
  "x": 30,
  "y": 100
}, {
  "id": 91602,
  "regionID": 1010028,
  "name": "Wooly Rhinoceros",
  "description": "The Wooly rhinoceros, nature's snowplow, once tried to join Santa's reindeer team. Rudolph had a meltdown.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 266,
  "parentID": 91601,
  "angleFromParent": 345,
  "distanceFromParent": 100,
  "outsideRegionConnectionIDs": [91202]
}, {
  "id": 91603,
  "regionID": 1010028,
  "name": "Cave Lion",
  "description": "Picture a feline so fierce it once challenged the 'King of the Jungle' to a 'Who's Scarier' showdown. Mufasa still has nightmares.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 268,
  "parentID": 91602,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 91604,
  "regionID": 1010028,
  "name": "Cave Bear",
  "description": "The cave bear, a bear so big it once auditioned for 'The Real Housebears of Prehistory.' They said it was 'too grizzly.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 270,
  "parentID": 91603,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 91605,
  "regionID": 1010028,
  "name": "Megaloceros",
  "description": "This giant deer once tried to become the world's first 'Buck-toothed Dentist.' Patients just kept fainting.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 272,
  "parentID": 91604,
  "angleFromParent": 90,
  "distanceFromParent": 90
}, {
  "id": 91606,
  "regionID": 1010028,
  "name": "Entelodon",
  "description": "Imagine a pig-like creature that once tried to become a perfume model. The fragrance was called 'Eau de Piggery,' and it was hogwash.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 274,
  "parentID": 91605,
  "angleFromParent": 135,
  "distanceFromParent": 60
}, {
  "id": 91608,
  "regionID": 1010028,
  "name": "Camel Spider",
  "description": "The camel spider, nature's surprise, once entered a 'Spiders Got Talent' competition. Simon Cowell's face still hasn't recovered.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 276,
  "parentID": 91606,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 91609,
  "regionID": 1010028,
  "name": "Tarantula Hawk Wasp",
  "description": "Picture a wasp that once tried to give motivational speeches to bees. The bees stung it mid-speech.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 278,
  "parentID": 91608,
  "angleFromParent": 145,
  "distanceFromParent": 140,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 91701,
  "regionID": 1010029,
  "name": "Killer Bee",
  "description": "The killer bee once applied for a job as a taste tester at a honey factory. Let's just say the honey didn't make it to market.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 280,
  "parentID": 91804,
  "angleFromParent": 90,
  "distanceFromParent": 150,
  "x": 450,
  "y": 400
}, {
  "id": 91702,
  "regionID": 1010029,
  "name": "Giant Centipede",
  "description": "Imagine a centipede so long it once tried to enter a 'Limbo World Record' competition. The limbo pole snapped.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 282,
  "parentID": 91701,
  "angleFromParent": 270,
  "distanceFromParent": 60
}, {
  "id": 91703,
  "regionID": 1010029,
  "name": "Scorpion",
  "description": "The scorpion, a creature so shady it once auditioned for a role as 'James Bond's Villainous Sidekick.' They called it 'Stinger.' It got the part.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 284,
  "parentID": 91702,
  "angleFromParent": 225,
  "distanceFromParent": 60
}, {
  "id": 91704,
  "regionID": 1010029,
  "name": "Emperor Scorpion",
  "description": "This scorpion once tried to conquer a sandbox. The sandcastle builders revolted, and it was exiled to the garden.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 286,
  "parentID": 91703,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 91705,
  "regionID": 1010029,
  "name": "Giant Katydid",
  "description": "Picture a giant katydid that once auditioned for an ASMR channel. Viewers couldn't hear it over the leaf-munching.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 288,
  "parentID": 91704,
  "angleFromParent": 235,
  "distanceFromParent": 60
}, {
  "id": 91706,
  "regionID": 1010029,
  "name": "Goliath Beetle",
  "description": "The goliath beetle, a beetle so hefty it once tried to get into the Guinness World Records for 'Heaviest Beetle.' It broke the scales.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 290,
  "parentID": 91705,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 91708,
  "regionID": 1010029,
  "name": "Atlas Beetle",
  "description": "Imagine a beetle that once challenged the Goliath beetle to a 'Who's Bigger' competition. They're still measuring.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 292,
  "parentID": 91705,
  "angleFromParent": 235,
  "distanceFromParent": 60
}, {
  "id": 91709,
  "regionID": 1010029,
  "name": "Goliath Birdeater Tarantula",
  "description": "This tarantula once tried to attend a 'Spider Networking Event.' They said, 'You're not on the web.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 294,
  "zoneType": "boss",
  "parentID": 91708,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 91801,
  "regionID": 1010030,
  "name": "Giant Weta",
  "description": "Picture an insect so massive it once auditioned for 'Jurassic Park' as a dino stand-in. Spielberg said, 'We need more CGI.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 296,
  "parentID": 91406,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 250,
  "y": 35
}, {
  "id": 91802,
  "regionID": 1010030,
  "name": "Hercules Beetle",
  "description": "The Hercules beetle, a bug so strong it once arm-wrestled an ant colony. The ants are now in therapy.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 298,
  "parentID": 91801,
  "angleFromParent": 135,
  "distanceFromParent": 110
}, {
  "id": 91803,
  "regionID": 1010030,
  "name": "Giant Stag Beetle",
  "description": "Imagine a beetle that once declared itself the 'King of Insects.' The ants declared it 'King of Delusion.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 300,
  "parentID": 91802,
  "angleFromParent": 145,
  "distanceFromParent": 90
}, {
  "id": 91804,
  "regionID": 1010030,
  "name": "Titan Longhorn Beetle",
  "description": "This beetle tried to launch its own line of 'Titanic Bug Fashion.' It sank faster than the ship.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 302,
  "parentID": 91803,
  "angleFromParent": 115,
  "distanceFromParent": 200
}, {
  "id": 91805,
  "regionID": 1010030,
  "name": "Harpy",
  "description": "The harpy, a creature with wings and talons, once tried to become a flight instructor for angels. The angels flew away.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 304,
  "parentID": 91804,
  "angleFromParent": 345,
  "distanceFromParent": 90
}, {
  "id": 91806,
  "regionID": 1010030,
  "name": "Werewolf",
  "description": "Picture a creature with a howl so chilling it once auditioned for a ghost tour as the 'Phantom Background Music.' The ghosts weren't impressed.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 306,
  "parentID": 91805,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 91820,
  "regionID": 1010030,
  "name": "Werewolf Grandfather",
  "description": "...opa?",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 542,
  "parentID": 91806,
  "angleFromParent": 315,
  "distanceFromParent": 200,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 91808,
  "regionID": 1010030,
  "name": "Cyclops",
  "description": "Imagine a one-eyed giant that once tried to become a cyclopscope for lighthouses. Ships kept crashing, so they went back to regular lights.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 308,
  "parentID": 91806,
  "angleFromParent": 45,
  "distanceFromParent": 110,
  "outsideRegionConnectionIDs": [92208]
}, {
  "id": 91809,
  "regionID": 1010030,
  "name": "Medusa",
  "description": "Medusa, a creature so vain it once tried to enter a beauty contest but turned all the judges to stone. Self-confidence level: Petrified.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 310,
  "zoneType": "boss",
  "parentID": 91808,
  "angleFromParent": 15,
  "distanceFromParent": 150
}, {
  "id": 91901,
  "regionID": 1010031,
  "name": "Centaur",
  "description": "Imagine a creature so conflicted it once joined a support group for 'Half-Horse, Half-Human' identity issues. The group disbanded due to arguments over horse-sized vs. human-sized drinks.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 312,
  "parentID": 91809,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 45,
  "y": 450,
  "outsideRegionConnectionIDs": [92301]
}, {
  "id": 91902,
  "regionID": 1010031,
  "name": "Minotaur",
  "description": "The minotaur, a bull-headed brawler, once tried to play hide-and-seek with a labyrinth. The labyrinth still hasn't found it.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 314,
  "parentID": 91901,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 91903,
  "regionID": 1010031,
  "name": "Unicorn",
  "description": "This mythical beast once tried to start its own fashion line with 'Single-Horn Couture.' Models kept getting poked, and the line folded.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 316,
  "parentID": 91902,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 91904,
  "regionID": 1010031,
  "name": "Griffin",
  "description": "Imagine a creature so majestic it once attempted to become a flight instructor for baby birds. The chicks couldn't keep up.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 318,
  "parentID": 91903,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 91905,
  "regionID": 1010031,
  "name": "Sphinx",
  "description": "The sphinx, a creature with riddles galore, once applied for a job as a 'Who Wants to Be a Millionaire?' question writer. They were rejected for making contestants cry.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 320,
  "parentID": 91904,
  "angleFromParent": 335,
  "distanceFromParent": 60
}, {
  "id": 91906,
  "regionID": 1010031,
  "name": "Gorgon",
  "description": "Picture a gorgon so fearsome it once challenged a mirror to a 'who's the fairest of them all' contest. The mirror's still shattered.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 322,
  "parentID": 91905,
  "angleFromParent": 0,
  "distanceFromParent": 135
}, {
  "id": 91908,
  "regionID": 1010031,
  "name": "Curupira",
  "description": "This forest guardian once tried to start a 'Lost and Found for Lost Souls.' Souls said, 'We'll pass.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 324,
  "parentID": 91906,
  "angleFromParent": 75,
  "distanceFromParent": 60
}, {
  "id": 91909,
  "regionID": 1010031,
  "name": "Oni",
  "description": "Imagine a creature that once tried to audition for 'Demonic Idol.' Simon Cowell said, 'Even I'm scared, and I'm Simon Cowell.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 326,
  "zoneType": "boss",
  "parentID": 91908,
  "angleFromParent": 65,
  "distanceFromParent": 90
}, {
  "id": 92001,
  "regionID": 1010032,
  "name": "Rakshasa",
  "description": "The rakshasa, a shape-shifting fiend, once auditioned for a role as a 'Method Actor.' The other actors kept asking, 'Who's this method guy?'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 328,
  "parentID": 91909,
  "angleFromParent": 270,
  "distanceFromParent": 160,
  "x": 25,
  "y": 400
}, {
  "id": 92002,
  "regionID": 1010032,
  "name": "Cerberus",
  "description": "Picture a three-headed hound that once tried to be a life coach. The clients kept saying, 'You're barking up the wrong tree.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 330,
  "parentID": 92001,
  "angleFromParent": 295,
  "distanceFromParent": 120
}, {
  "id": 92003,
  "regionID": 1010032,
  "name": "Mimic Octopus",
  "description": "This octopus once tried to become a 'Master of Disguise' but couldn't stop mimicking everything. It's still blending into backgrounds.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 332,
  "parentID": 92002,
  "angleFromParent": 15,
  "distanceFromParent": 90
}, {
  "id": 92004,
  "regionID": 1010032,
  "name": "Vampire Squid",
  "description": "Imagine a squid that once auditioned for 'Twilight' but was rejected for being too 'sucky.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 334,
  "parentID": 92003,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 92005,
  "regionID": 1010032,
  "name": "Giant Squid",
  "description": "The giant squid once challenged a Kraken to a game of 'Who Can Tangle More Ships?' The Kraken won but asked the giant squid for tips.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 336,
  "parentID": 92004,
  "angleFromParent": 360,
  "distanceFromParent": 110
}, {
  "id": 92006,
  "regionID": 1010032,
  "name": "Colossal Squid",
  "description": "This squid once tried to join a 'Calamari Cooking Class.' The other squids said, 'You're just too much to handle.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 338,
  "parentID": 92005,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 92007,
  "regionID": 1010032,
  "name": "Kraken",
  "description": "Picture a tentacled terror that once challenged a whirlpool to a 'Who Can Sink More Ships' contest. The whirlpool withdrew.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 340,
  "parentID": 92006,
  "angleFromParent": 295,
  "distanceFromParent": 90,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 92008,
  "regionID": 1010032,
  "name": "Sea Serpent",
  "description": "The sea serpent once tried to become a lifeguard for beachgoers. The beachgoers asked for more sunscreen and fewer serpents.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 342,
  "parentID": 92006,
  "angleFromParent": 225,
  "distanceFromParent": 140
}, {
  "id": 92009,
  "regionID": 1010032,
  "name": "Merfolk",
  "description": "Imagine creatures of the deep that once attempted to start an underwater hair salon. The seaweed extensions didn't quite catch on.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 344,
  "zoneType": "boss",
  "parentID": 92008,
  "angleFromParent": 295,
  "distanceFromParent": 140
}, {
  "id": 92101,
  "regionID": 1010033,
  "name": "Selkie",
  "description": "Selkies, seals that can transform into humans, once tried to enter a 'Best Human Impersonation' contest. The judges said, 'You need more practice.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 346,
  "parentID": 91701,
  "angleFromParent": 180,
  "distanceFromParent": 200,
  "x": 415,
  "y": 80,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 92102,
  "regionID": 1010033,
  "name": "Kelpie",
  "description": "This water horse once tried to get into the horse racing world. The other horses said, 'You're all wet, mate.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 348,
  "parentID": 92101,
  "angleFromParent": 135,
  "distanceFromParent": 90
}, {
  "id": 92103,
  "regionID": 1010033,
  "name": "Siren",
  "description": "Picture sirens that once auditioned for a music reality show. The judges asked for earplugs.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 350,
  "parentID": 92102,
  "angleFromParent": 225,
  "distanceFromParent": 90
}, {
  "id": 92104,
  "regionID": 1010033,
  "name": "Dragon Turtle",
  "description": "The dragon turtle, a creature with scales and a shell, once applied for a 'Medieval Tortoise' role in a fantasy film. They wanted a more 'grr-' and less 'slow-'.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 352,
  "parentID": 92103,
  "angleFromParent": 180,
  "distanceFromParent": 90
}, {
  "id": 92105,
  "regionID": 1010033,
  "name": "Hippocampus",
  "description": "Imagine a creature that once tried to join a marine biology lecture but couldn't understand why they were only talking about fish.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 354,
  "parentID": 92104,
  "angleFromParent": 135,
  "distanceFromParent": 150
}, {
  "id": 92106,
  "regionID": 1010033,
  "name": "Charybdis",
  "description": "This whirlpool monster once applied for a job as a water slide at a water park. The parkgoers asked for life vests.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 356,
  "parentID": 92105,
  "angleFromParent": 115,
  "distanceFromParent": 160
}, {
  "id": 92108,
  "regionID": 1010033,
  "name": "Scylla",
  "description": "Picture a multi-headed sea monster that once challenged a hydra to a 'who's got more heads' competition. They're still counting.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 358,
  "parentID": 92106,
  "angleFromParent": 30,
  "distanceFromParent": 210
}, {
  "id": 92109,
  "regionID": 1010033,
  "name": "Leviathan",
  "description": "The leviathan, a sea monster of epic proportions, once tried to break the world record for 'Deepest Dive Without Gills.' The record books had to be rewritten.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 360,
  "zoneType": "boss",
  "parentID": 92108,
  "angleFromParent": 350,
  "distanceFromParent": 240
}, {
  "id": 92201,
  "regionID": 1010034,
  "name": "Asura",
  "description": "Imagine a creature that once tried to become a motivational speaker for demons. The demons said, 'We're already motivated by mayhem.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 362,
  "parentID": 92109,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 45,
  "y": 415
}, {
  "id": 92202,
  "regionID": 1010034,
  "name": "Preta",
  "description": "This ghostly entity once tried to become a 'Poltergeist Lifestyle Coach.' The ghosts just wanted to throw more parties.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 364,
  "parentID": 92201,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 92203,
  "regionID": 1010034,
  "name": "Manticore",
  "description": "Picture a creature that once auditioned for a role in 'The Lion King' but couldn't understand why everyone was singing instead of devouring each other.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 366,
  "parentID": 92202,
  "angleFromParent": 315,
  "distanceFromParent": 90,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 92204,
  "regionID": 1010034,
  "name": "Phoenix",
  "description": "The phoenix, a fiery bird of rebirth, once hosted a BBQ for the gods. They're still raving about the 'eternal flame-grilled' taste.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 368,
  "parentID": 92203,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 92205,
  "regionID": 1010034,
  "name": "Thunderbird",
  "description": "The thunderbird, a creature with wings so mighty it once challenged Zeus to an 'Olympic Flight' competition. Zeus blinked, and the thunderbird won.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 370,
  "parentID": 92204,
  "angleFromParent": 340,
  "distanceFromParent": 100
}, {
  "id": 92206,
  "regionID": 1010034,
  "name": "Roc",
  "description": "Imagine a bird that's basically the king of all birds, but it once tried to become an ornithologist. Other birds just squawked in laughter.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 372,
  "parentID": 92205,
  "angleFromParent": 240,
  "distanceFromParent": 100
}, {
  "id": 92208,
  "regionID": 1010034,
  "name": "Yaksha",
  "description": "This guardian spirit once tried to enroll in a 'Zen Meditation for Overprotective Spirits' class. The class exorcised it.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 374,
  "parentID": 92206,
  "angleFromParent": 315,
  "distanceFromParent": 180,
  "outsideRegionConnectionIDs": [91808]
}, {
  "id": 92209,
  "regionID": 1010034,
  "name": "Pegasus",
  "description": "Pegasus, the horse with wings, once attempted to be a flight attendant. Passengers just kept asking for 'winged' peanuts.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 376,
  "zoneType": "boss",
  "parentID": 92208,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 92301,
  "regionID": 1010035,
  "name": "Hippogriff",
  "description": "Picture a creature so majestic it once tried to get a job as a runway model. The runway kept disappearing under its feet.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 378,
  "parentID": 92209,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 45,
  "y": 95,
  "outsideRegionConnectionIDs": [91901]
}, {
  "id": 92302,
  "regionID": 1010035,
  "name": "Amphiptere",
  "description": "This serpent with wings once applied to be an air traffic controller but kept confusing planes with pterosaurs.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 380,
  "parentID": 92301,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92303,
  "regionID": 1010035,
  "name": "Questing Beast",
  "description": "Imagine a beast that once tried to get a job as a GPS navigator but could only say, 'Left or right?' It wasn't very helpful.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 382,
  "parentID": 92302,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 92304,
  "regionID": 1010035,
  "name": "Lindworm",
  "description": "The lindworm, a creature with no limbs but plenty of personality, once tried to audition for a role in 'Dancing with the Stars.' It just rolled around.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 384,
  "parentID": 92303,
  "angleFromParent": 15,
  "distanceFromParent": 100
}, {
  "id": 92305,
  "regionID": 1010035,
  "name": "Worm",
  "description": "This lowly creature once attempted to become a motivational speaker for apples. The apples stayed grounded.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 386,
  "parentID": 92304,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 92306,
  "regionID": 1010035,
  "name": "J\xF6rmungandr",
  "description": "Picture a serpent so long it once challenged the equator to a 'Who's Straighter' showdown. The equator couldn't keep up.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 388,
  "parentID": 92305,
  "angleFromParent": 115,
  "distanceFromParent": 100
}, {
  "id": 92308,
  "regionID": 1010035,
  "name": "N\u0101ga",
  "description": "The n\u0101ga, a serpentine deity, once tried to teach yoga to cobras. The cobras said, 'We're already pretty bendy.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 390,
  "parentID": 92306,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 92309,
  "regionID": 1010035,
  "name": "Quetzalcoatl",
  "description": "Imagine a feathered serpent that once tried to host a 'Feathered Serpent Fashion Show.' Feathers flew, but fashion didn't.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 392,
  "zoneType": "boss",
  "parentID": 92308,
  "angleFromParent": 15,
  "distanceFromParent": 100
}, {
  "id": 92401,
  "regionID": 1010036,
  "name": "Ladon",
  "description": "The ladon, a dragon with multiple heads, once applied to be a shampoo model. The shampoo bottles felt insecure.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 394,
  "parentID": 92309,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 45,
  "y": 445
}, {
  "id": 92402,
  "regionID": 1010036,
  "name": "Illuyanka",
  "description": "Picture a serpent that once tried to enroll in 'Anger Management for Angry Serpents' but kept hissing at the therapist.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 396,
  "parentID": 92401,
  "angleFromParent": 290,
  "distanceFromParent": 150
}, {
  "id": 92403,
  "regionID": 1010036,
  "name": "Tiamat",
  "description": "Tiamat, a chaos dragon, once tried to be the referee in a 'Whose Chaos is Better' contest. Chaos erupted.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 398,
  "parentID": 92402,
  "angleFromParent": 275,
  "distanceFromParent": 150
}, {
  "id": 92404,
  "regionID": 1010036,
  "name": "Bahamut",
  "description": "Imagine a colossal fish that once tried to break the world record for 'Biggest Belly Flop.' The ocean's still recovering.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 400,
  "parentID": 92403,
  "angleFromParent": 315,
  "distanceFromParent": 100
}, {
  "id": 92405,
  "regionID": 1010036,
  "name": "Suparna",
  "description": "The suparna, a divine bird, once tried to teach eagles how to 'Soar to Spiritual Heights.' The eagles just wanted to catch prey.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 402,
  "parentID": 92404,
  "angleFromParent": 345,
  "distanceFromParent": 90
}, {
  "id": 92406,
  "regionID": 1010036,
  "name": "Gandharva",
  "description": "Picture a celestial musician that once auditioned for 'Heaven's Got Talent.' The angels said, 'Stick to the harp.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 404,
  "parentID": 92405,
  "angleFromParent": 15,
  "distanceFromParent": 90
}, {
  "id": 92408,
  "regionID": 1010036,
  "name": "Cetus",
  "description": "This sea monster once applied for a job as a lifeguard. Swimmers took one look and screamed for help.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 406,
  "parentID": 92406,
  "angleFromParent": 85,
  "distanceFromParent": 120
}, {
  "id": 92409,
  "regionID": 1010036,
  "name": "Echidna",
  "description": "Imagine a creature with the body of a snake and the head of a woman that once attempted to become a 'Medusa Stylist.' The snakes ended up looking frizzier.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 408,
  "zoneType": "boss",
  "parentID": 92408,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 92501,
  "regionID": 1010041,
  "name": "Leviathan",
  "description": "The leviathan, a sea monster of epic proportions, once tried to break the world record for 'Deepest Dive Without Gills.' The record books had to be rewritten.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 410,
  "parentID": 92409,
  "angleFromParent": 270,
  "distanceFromParent": 170,
  "x": 45,
  "y": 445
}, {
  "id": 92502,
  "regionID": 1010041,
  "name": "Kraken",
  "description": "Picture a tentacled terror that once challenged a whirlpool to a 'Who Can Sink More Ships' contest. The whirlpool withdrew.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 412,
  "parentID": 92501,
  "angleFromParent": 270,
  "distanceFromParent": 90
}, {
  "id": 92503,
  "regionID": 1010041,
  "name": "Megalodon",
  "description": "The megalodon, a prehistoric shark, once tried to host a 'Bite the Biggest Ship' competition. Ships just stayed out of its way.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 414,
  "parentID": 92502,
  "angleFromParent": 285,
  "distanceFromParent": 90
}, {
  "id": 92504,
  "regionID": 1010041,
  "name": "Lusca",
  "description": "Imagine a sea monster that once tried to host a 'Tentacle Tango' dance class for squids. The squids inked out in embarrassment.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 416,
  "parentID": 92503,
  "angleFromParent": 270,
  "distanceFromParent": 90
}, {
  "id": 92505,
  "regionID": 1010041,
  "name": "Akkorokamui",
  "description": "This colossal squid once tried to get a job as a sushi chef. It said, 'You can't serve what you can't catch.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 418,
  "parentID": 92504,
  "angleFromParent": 325,
  "distanceFromParent": 90
}, {
  "id": 92506,
  "regionID": 1010041,
  "name": "J\xF6rmungandr",
  "description": "Picture a serpent so long it once challenged the equator to a 'Who's Straighter' showdown. The equator couldn't keep up.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 420,
  "parentID": 92505,
  "angleFromParent": 300,
  "distanceFromParent": 90
}, {
  "id": 92508,
  "regionID": 1010041,
  "name": "Midgard Serpent",
  "description": "The Midgard serpent, a creature that wraps around the world, once attempted to become a 'Global Hug Therapist.' The world just spun away.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 422,
  "parentID": 92506,
  "angleFromParent": 350,
  "distanceFromParent": 60
}, {
  "id": 92509,
  "regionID": 1010041,
  "name": "Questing Beast",
  "description": "Imagine a beast that once tried to get a job as a GPS navigator but could only say, 'Left or right?' It wasn't very helpful.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 424,
  "parentID": 92508,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 92510,
  "regionID": 1010041,
  "name": "Amphiptere",
  "description": "This serpent with wings once applied to be an air traffic controller but kept confusing planes with pterosaurs.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 426,
  "parentID": 92509,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92511,
  "regionID": 1010041,
  "name": "Sea Bishop",
  "description": "Picture a sea bishop that once tried to start a 'Sea Sermon' podcast for aquatic life. The fish said, 'We can't hear you underwater, dude.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 428,
  "parentID": 92510,
  "angleFromParent": 35,
  "distanceFromParent": 60
}, {
  "id": 92512,
  "regionID": 1010041,
  "name": "Tarasque",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 430,
  "parentID": 92511,
  "angleFromParent": 90,
  "distanceFromParent": 130
}, {
  "id": 92513,
  "regionID": 1010041,
  "name": "Cetus",
  "description": "This sea monster once applied for a job as a lifeguard. Swimmers took one look and screamed for help.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 432,
  "parentID": 92512,
  "angleFromParent": 90,
  "distanceFromParent": 130
}, {
  "id": 92514,
  "regionID": 1010041,
  "name": "Aspidochelone",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 434,
  "zoneType": "boss",
  "parentID": 92513,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92601,
  "regionID": 1010042,
  "name": "Moby Dick",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 436,
  "parentID": 92514,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 45,
  "y": 355
}, {
  "id": 92602,
  "regionID": 1010042,
  "name": "Lotan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 438,
  "parentID": 92601,
  "angleFromParent": 325,
  "distanceFromParent": 90
}, {
  "id": 92603,
  "regionID": 1010042,
  "name": "Yamata no Orochi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 440,
  "parentID": 92602,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 92604,
  "regionID": 1010042,
  "name": "Bakunawa",
  "description": "evolve force realm1->2",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 442,
  "parentID": 92603,
  "angleFromParent": 345,
  "distanceFromParent": 90
}, {
  "id": 92605,
  "regionID": 1010042,
  "name": "N\u0101ga",
  "description": "The n\u0101ga, a serpentine deity, once tried to teach yoga to cobras. The cobras said, 'We're already pretty bendy.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 444,
  "parentID": 92604,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92606,
  "regionID": 1010042,
  "name": "Illuyanka",
  "description": "Picture a serpent that once tried to enroll in 'Anger Management for Angry Serpents' but kept hissing at the therapist.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 446,
  "parentID": 92605,
  "angleFromParent": 80,
  "distanceFromParent": 60
}, {
  "id": 92607,
  "regionID": 1010042,
  "name": "Quetzalcoatl",
  "description": "Imagine a feathered serpent that once tried to host a 'Feathered Serpent Fashion Show.' Feathers flew, but fashion didn't.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 448,
  "parentID": 92606,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 92608,
  "regionID": 1010042,
  "name": "Feathered Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 450,
  "parentID": 92607,
  "angleFromParent": 155,
  "distanceFromParent": 110
}, {
  "id": 92609,
  "regionID": 1010042,
  "name": "Thunderbird",
  "description": "The thunderbird, a creature with wings so mighty it once challenged Zeus to an 'Olympic Flight' competition. Zeus blinked, and the thunderbird won.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 452,
  "parentID": 92608,
  "angleFromParent": 25,
  "distanceFromParent": 60
}, {
  "id": 92611,
  "regionID": 1010042,
  "name": "Rukh",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 454,
  "parentID": 92609,
  "angleFromParent": 0,
  "distanceFromParent": 60,
  "outsideRegionConnectionIDs": [93108]
}, {
  "id": 92612,
  "regionID": 1010042,
  "name": "Simurgh",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 456,
  "parentID": 92611,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 92613,
  "regionID": 1010042,
  "name": "Griffin",
  "description": "Imagine a creature so majestic it once attempted to become a flight instructor for baby birds. The chicks couldn't keep up.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "epsilonShard",
  "prodBase": 1,
  "baseConquestTime": 458,
  "zoneType": "boss",
  "parentID": 92612,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 92701,
  "regionID": 1010043,
  "name": "Hippogriff",
  "description": "Picture a creature so majestic it once tried to get a job as a runway model. The runway kept disappearing under its feet.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 460,
  "parentID": 92613,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 450
}, {
  "id": 92702,
  "regionID": 1010043,
  "name": "Sphinx",
  "description": "The sphinx, a creature with riddles galore, once applied for a job as a 'Who Wants to Be a Millionaire?' question writer. They were rejected for making contestants cry.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 462,
  "parentID": 92701,
  "angleFromParent": 270,
  "distanceFromParent": 90
}, {
  "id": 92703,
  "regionID": 1010043,
  "name": "Chimera",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 464,
  "parentID": 92702,
  "angleFromParent": 255,
  "distanceFromParent": 90
}, {
  "id": 92704,
  "regionID": 1010043,
  "name": "Manticore",
  "description": "Picture a creature that once auditioned for a role in 'The Lion King' but couldn't understand why everyone was singing instead of devouring each other.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 466,
  "parentID": 92703,
  "angleFromParent": 285,
  "distanceFromParent": 110
}, {
  "id": 92705,
  "regionID": 1010043,
  "name": "Revenant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 468,
  "parentID": 92704,
  "angleFromParent": 10,
  "distanceFromParent": 110
}, {
  "id": 92706,
  "regionID": 1010043,
  "name": "Cerberus",
  "description": "Picture a three-headed hound that once tried to be a life coach. The clients kept saying, 'You're barking up the wrong tree.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 470,
  "parentID": 92705,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 92707,
  "regionID": 1010043,
  "name": "Orthrus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "zetaShard",
  "prodBase": 1,
  "baseConquestTime": 472,
  "parentID": 92706,
  "angleFromParent": 325,
  "distanceFromParent": 160,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 92708,
  "regionID": 1010043,
  "name": "Orhturs' Father",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 512,
  "zoneType": "boss",
  "parentID": 92706,
  "angleFromParent": 45,
  "distanceFromParent": 160
}, {
  "id": 92801,
  "regionID": 1010044,
  "name": "Alkonost",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 498,
  "parentID": 92708,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 45,
  "y": 350
}, {
  "id": 92802,
  "regionID": 1010044,
  "name": "Alicanto",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 500,
  "parentID": 92801,
  "angleFromParent": 270,
  "distanceFromParent": 60
}, {
  "id": 92803,
  "regionID": 1010044,
  "name": "Adarna",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 502,
  "parentID": 92802,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92804,
  "regionID": 1010044,
  "name": "Stymphalian Birds",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 504,
  "parentID": 92803,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92805,
  "regionID": 1010044,
  "name": "Lamia",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 506,
  "parentID": 92804,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 92806,
  "regionID": 1010044,
  "name": "Empusa",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 508,
  "parentID": 92805,
  "angleFromParent": 135,
  "distanceFromParent": 60
}, {
  "id": 92808,
  "regionID": 1010044,
  "name": "Encantado",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 510,
  "parentID": 92806,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 92809,
  "regionID": 1010044,
  "name": "Bunyip",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 512,
  "zoneType": "boss",
  "parentID": 92808,
  "angleFromParent": 345,
  "distanceFromParent": 190
}, {
  "id": 92901,
  "regionID": 1010045,
  "name": "Taniwha",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 514,
  "parentID": 92809,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 420
}, {
  "id": 92902,
  "regionID": 1010045,
  "name": "Waheela",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 516,
  "parentID": 92901,
  "angleFromParent": 270,
  "distanceFromParent": 90
}, {
  "id": 92903,
  "regionID": 1010045,
  "name": "Amarok",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 518,
  "parentID": 92902,
  "angleFromParent": 285,
  "distanceFromParent": 90
}, {
  "id": 92904,
  "regionID": 1010045,
  "name": "Ahool",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 520,
  "parentID": 92903,
  "angleFromParent": 300,
  "distanceFromParent": 90
}, {
  "id": 92905,
  "regionID": 1010045,
  "name": "Jersey Devil",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 522,
  "parentID": 92904,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 92906,
  "regionID": 1010045,
  "name": "Mothman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 524,
  "parentID": 92905,
  "angleFromParent": 330,
  "distanceFromParent": 90
}, {
  "id": 92908,
  "regionID": 1010045,
  "name": "Ozark Howler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 526,
  "parentID": 92906,
  "angleFromParent": 90,
  "distanceFromParent": 160
}, {
  "id": 92909,
  "regionID": 1010045,
  "name": "Beast of Bray Road",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 528,
  "zoneType": "boss",
  "parentID": 92908,
  "angleFromParent": 35,
  "distanceFromParent": 200
}, {
  "id": 93001,
  "regionID": 1010046,
  "name": "Mongolian Death Worm",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 530,
  "parentID": 92514,
  "angleFromParent": 180,
  "distanceFromParent": 170,
  "x": 425,
  "y": 70
}, {
  "id": 93002,
  "regionID": 1010046,
  "name": "El Chupacabra",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 532,
  "parentID": 93001,
  "angleFromParent": 90,
  "distanceFromParent": 160,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 93003,
  "regionID": 1010046,
  "name": "Ogopogo",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 534,
  "parentID": 93002,
  "angleFromParent": 135,
  "distanceFromParent": 90
}, {
  "id": 93004,
  "regionID": 1010046,
  "name": "Tsuchinoko",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 536,
  "parentID": 93003,
  "angleFromParent": 155,
  "distanceFromParent": 90
}, {
  "id": 93005,
  "regionID": 1010046,
  "name": "Minotaur",
  "description": "The minotaur, a bull-headed brawler, once tried to play hide-and-seek with a labyrinth. The labyrinth still hasn't found it.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 538,
  "parentID": 93004,
  "angleFromParent": 155,
  "distanceFromParent": 150
}, {
  "id": 93006,
  "regionID": 1010046,
  "name": "Cyclops",
  "description": "Imagine a one-eyed giant that once tried to become a cyclopscope for lighthouses. Ships kept crashing, so they went back to regular lights.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 540,
  "parentID": 93005,
  "angleFromParent": 15,
  "distanceFromParent": 100
}, {
  "id": 93008,
  "regionID": 1010046,
  "name": "Werewolf",
  "description": "Picture a creature with a howl so chilling it once auditioned for a ghost tour as the 'Phantom Background Music.' The ghosts weren't impressed.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 542,
  "parentID": 93006,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 93009,
  "regionID": 1010046,
  "name": "Werebear",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 544,
  "zoneType": "boss",
  "parentID": 93008,
  "angleFromParent": 350,
  "distanceFromParent": 90
}, {
  "id": 93101,
  "regionID": 1010047,
  "name": "Rougarou",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 546,
  "parentID": 93009,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 350
}, {
  "id": 93102,
  "regionID": 1010047,
  "name": "Beast of Gevaudan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 548,
  "parentID": 93101,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 93103,
  "regionID": 1010047,
  "name": "Aswang",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 550,
  "parentID": 93102,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 93104,
  "regionID": 1010047,
  "name": "Manananggal",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 552,
  "parentID": 93103,
  "angleFromParent": 65,
  "distanceFromParent": 90
}, {
  "id": 93105,
  "regionID": 1010047,
  "name": "Penanggalan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 554,
  "parentID": 93104,
  "angleFromParent": 345,
  "distanceFromParent": 90
}, {
  "id": 93106,
  "regionID": 1010047,
  "name": "Tiyanak",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 556,
  "parentID": 93105,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 93108,
  "regionID": 1010047,
  "name": "Skeleton",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 558,
  "parentID": 93106,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "outsideRegionConnectionIDs": [92611]
}, {
  "id": 93109,
  "regionID": 1010047,
  "name": "Krasue",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 560,
  "zoneType": "boss",
  "parentID": 93108,
  "angleFromParent": 325,
  "distanceFromParent": 140
}, {
  "id": 93201,
  "regionID": 1010048,
  "name": "Jikininki",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 562,
  "parentID": 93109,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 55,
  "y": 250
}, {
  "id": 93202,
  "regionID": 1010048,
  "name": "Mummy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 564,
  "parentID": 93201,
  "angleFromParent": 90,
  "distanceFromParent": 170
}, {
  "id": 93203,
  "regionID": 1010048,
  "name": "Kuchi-sake-onna",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 566,
  "parentID": 93202,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 93204,
  "regionID": 1010048,
  "name": "Zombie",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 568,
  "parentID": 93203,
  "angleFromParent": 15,
  "distanceFromParent": 110,
  "outsideRegionConnectionIDs": [93705]
}, {
  "id": 93205,
  "regionID": 1010048,
  "name": "Ghast",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 570,
  "parentID": 93204,
  "angleFromParent": 285,
  "distanceFromParent": 190
}, {
  "id": 93206,
  "regionID": 1010048,
  "name": "Wraith",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 572,
  "parentID": 93205,
  "angleFromParent": 235,
  "distanceFromParent": 90
}, {
  "id": 93208,
  "regionID": 1010048,
  "name": "Wisp",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 574,
  "parentID": 93206,
  "angleFromParent": 315,
  "distanceFromParent": 180
}, {
  "id": 93209,
  "regionID": 1010048,
  "name": "Tatarimokke",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 576,
  "zoneType": "boss",
  "parentID": 93208,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 93301,
  "regionID": 1010049,
  "name": "Gashadokuro",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 578,
  "parentID": 93209,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 50
}, {
  "id": 93302,
  "regionID": 1010049,
  "name": "Will-o'-the-wisp",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 580,
  "parentID": 93301,
  "angleFromParent": 90,
  "distanceFromParent": 160
}, {
  "id": 93303,
  "regionID": 1010049,
  "name": "Djinni",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 582,
  "parentID": 93302,
  "angleFromParent": 45,
  "distanceFromParent": 200
}, {
  "id": 93304,
  "regionID": 1010049,
  "name": "Each-uisge",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 584,
  "parentID": 93303,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 93305,
  "regionID": 1010049,
  "name": "Afanc",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 586,
  "parentID": 93304,
  "angleFromParent": 270,
  "distanceFromParent": 200
}, {
  "id": 93306,
  "regionID": 1010049,
  "name": "Afrit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 588,
  "parentID": 93305,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 93308,
  "regionID": 1010049,
  "name": "Baobhan Sith",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 590,
  "parentID": 93306,
  "angleFromParent": 315,
  "distanceFromParent": 150
}, {
  "id": 93309,
  "regionID": 1010049,
  "name": "Effrit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 592,
  "zoneType": "boss",
  "parentID": 93308,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 93401,
  "regionID": 1010050,
  "name": "Gwrach-y-rhibyn",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 594,
  "parentID": 93309,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 75
}, {
  "id": 93402,
  "regionID": 1010050,
  "name": "Efreet",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 596,
  "parentID": 93401,
  "angleFromParent": 0,
  "distanceFromParent": 150
}, {
  "id": 93403,
  "regionID": 1010050,
  "name": "Ghul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 598,
  "parentID": 93402,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 93404,
  "regionID": 1010050,
  "name": "Soucouyant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 600,
  "parentID": 93403,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 93405,
  "regionID": 1010050,
  "name": "Loogaroo",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 602,
  "parentID": 93404,
  "angleFromParent": 75,
  "distanceFromParent": 110
}, {
  "id": 93406,
  "regionID": 1010050,
  "name": "La Llorona",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 604,
  "parentID": 93405,
  "angleFromParent": 45,
  "distanceFromParent": 110
}, {
  "id": 93407,
  "regionID": 1010050,
  "name": "El Silb\xF3n",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 606,
  "parentID": 93406,
  "angleFromParent": 180,
  "distanceFromParent": 90,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 93408,
  "regionID": 1010050,
  "name": "Sack Man",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 608,
  "parentID": 93406,
  "angleFromParent": 135,
  "distanceFromParent": 90
}, {
  "id": 93409,
  "regionID": 1010050,
  "name": "Butzemann",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 610,
  "parentID": 93408,
  "angleFromParent": 135,
  "distanceFromParent": 90,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 93501,
  "regionID": 1010051,
  "name": "Krampus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 612,
  "parentID": 93008,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 310,
  "y": 30
}, {
  "id": 93502,
  "regionID": 1010051,
  "name": "Kallikantzaros",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 614,
  "parentID": 93501,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 93503,
  "regionID": 1010051,
  "name": "Bwbachod",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 616,
  "parentID": 93502,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 93513,
  "regionID": 1010051,
  "name": "The Wolf of Odyssos",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 616,
  "parentID": 93503,
  "angleFromParent": 180,
  "distanceFromParent": 230,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 93504,
  "regionID": 1010051,
  "name": "P\xFAca",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 618,
  "parentID": 93503,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 93505,
  "regionID": 1010051,
  "name": "Ogre",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 620,
  "parentID": 93504,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 93506,
  "regionID": 1010051,
  "name": "Troll",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 622,
  "parentID": 93505,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 93508,
  "regionID": 1010051,
  "name": "Radande",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 624,
  "parentID": 93506,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 93509,
  "regionID": 1010051,
  "name": "Giant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 626,
  "zoneType": "boss",
  "parentID": 93508,
  "angleFromParent": 90,
  "distanceFromParent": 150
}, {
  "id": 93601,
  "regionID": 1010052,
  "name": "Black Shuck",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 628,
  "parentID": 93509,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 450
}, {
  "id": 93602,
  "regionID": 1010052,
  "name": "Gwyllgi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 630,
  "parentID": 93601,
  "angleFromParent": 315,
  "distanceFromParent": 150
}, {
  "id": 93603,
  "regionID": 1010052,
  "name": "Undead",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 632,
  "parentID": 93602,
  "angleFromParent": 345,
  "distanceFromParent": 50
}, {
  "id": 93604,
  "regionID": 1010052,
  "name": "Gabriel Hound",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 634,
  "parentID": 93603,
  "angleFromParent": 5,
  "distanceFromParent": 90
}, {
  "id": 93605,
  "regionID": 1010052,
  "name": "Krsnik",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 636,
  "parentID": 93604,
  "angleFromParent": 345,
  "distanceFromParent": 90
}, {
  "id": 93606,
  "regionID": 1010052,
  "name": "Vukodlak",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 638,
  "parentID": 93605,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 93608,
  "regionID": 1010052,
  "name": "Strigoi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 640,
  "parentID": 93606,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 93609,
  "regionID": 1010052,
  "name": "Nachzehrer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 642,
  "zoneType": "boss",
  "parentID": 93608,
  "angleFromParent": 45,
  "distanceFromParent": 60
}, {
  "id": 93701,
  "regionID": 1010053,
  "name": "Shtriga",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 644,
  "parentID": 93609,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 450
}, {
  "id": 93702,
  "regionID": 1010053,
  "name": "Varcolac",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 646,
  "parentID": 93701,
  "angleFromParent": 270,
  "distanceFromParent": 140
}, {
  "id": 93703,
  "regionID": 1010053,
  "name": "Upier",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 648,
  "parentID": 93702,
  "angleFromParent": 315,
  "distanceFromParent": 170
}, {
  "id": 93704,
  "regionID": 1010053,
  "name": "Estrie",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 650,
  "parentID": 93703,
  "angleFromParent": 270,
  "distanceFromParent": 60
}, {
  "id": 93705,
  "regionID": 1010053,
  "name": "Langsuir",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 652,
  "parentID": 93704,
  "angleFromParent": 315,
  "distanceFromParent": 90,
  "outsideRegionConnectionIDs": [93204]
}, {
  "id": 93706,
  "regionID": 1010053,
  "name": "Automaton",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 654,
  "parentID": 93705,
  "angleFromParent": 45,
  "distanceFromParent": 100
}, {
  "id": 93708,
  "regionID": 1010053,
  "name": "Jiangshi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 656,
  "parentID": 93706,
  "angleFromParent": 90,
  "distanceFromParent": 160
}, {
  "id": 93709,
  "regionID": 1010053,
  "name": "Gaki",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 658,
  "zoneType": "boss",
  "parentID": 93708,
  "angleFromParent": 5,
  "distanceFromParent": 160
}, {
  "id": 93801,
  "regionID": 1010054,
  "name": "Preta",
  "description": "This ghostly entity once tried to become a 'Poltergeist Lifestyle Coach.' The ghosts just wanted to throw more parties.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 660,
  "parentID": 93709,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 300
}, {
  "id": 93802,
  "regionID": 1010054,
  "name": "Onry\u014D",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 662,
  "parentID": 93801,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 93803,
  "regionID": 1010054,
  "name": "Shikigami",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 664,
  "parentID": 93802,
  "angleFromParent": 270,
  "distanceFromParent": 120
}, {
  "id": 93804,
  "regionID": 1010054,
  "name": "Tsukumogami",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 666,
  "parentID": 93803,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 93805,
  "regionID": 1010054,
  "name": "Nekomata",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 668,
  "parentID": 93804,
  "angleFromParent": 325,
  "distanceFromParent": 90
}, {
  "id": 93806,
  "regionID": 1010054,
  "name": "Bakeneko",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 670,
  "parentID": 93805,
  "angleFromParent": 340,
  "distanceFromParent": 150
}, {
  "id": 93808,
  "regionID": 1010054,
  "name": "Jinmenken",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 672,
  "parentID": 93806,
  "angleFromParent": 70,
  "distanceFromParent": 250
}, {
  "id": 93809,
  "regionID": 1010054,
  "name": "Ittan-momen",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 674,
  "zoneType": "boss",
  "parentID": 93808,
  "angleFromParent": 90,
  "distanceFromParent": 90
}, {
  "id": 93901,
  "regionID": 1010055,
  "name": "Y\u014Dkai",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 676,
  "parentID": 93809,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 450
}, {
  "id": 93902,
  "regionID": 1010055,
  "name": "Karakasa",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 678,
  "parentID": 93901,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 93903,
  "regionID": 1010055,
  "name": "Golem",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 680,
  "parentID": 93902,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 93904,
  "regionID": 1010055,
  "name": "Nukekubi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 682,
  "parentID": 93903,
  "angleFromParent": 330,
  "distanceFromParent": 90
}, {
  "id": 93905,
  "regionID": 1010055,
  "name": "Titan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 684,
  "parentID": 93904,
  "angleFromParent": 245,
  "distanceFromParent": 90
}, {
  "id": 93906,
  "regionID": 1010055,
  "name": "Yuki-otoko",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 686,
  "parentID": 93905,
  "angleFromParent": 180,
  "distanceFromParent": 200
}, {
  "id": 93908,
  "regionID": 1010055,
  "name": "Behemoth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 688,
  "parentID": 93906,
  "angleFromParent": 270,
  "distanceFromParent": 170
}, {
  "id": 93909,
  "regionID": 1010055,
  "name": "Namahage",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 690,
  "zoneType": "boss",
  "parentID": 93908,
  "angleFromParent": 15,
  "distanceFromParent": 200
}, {
  "id": 94001,
  "regionID": 1010056,
  "name": "Noppera-b\u014D",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 692,
  "parentID": 93509,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 425,
  "y": 25
}, {
  "id": 94002,
  "regionID": 1010056,
  "name": "Hitotsume-koz\u014D",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 694,
  "parentID": 94001,
  "angleFromParent": 190,
  "distanceFromParent": 120
}, {
  "id": 94003,
  "regionID": 1010056,
  "name": "Kasa-obake",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 696,
  "parentID": 94002,
  "angleFromParent": 135,
  "distanceFromParent": 100
}, {
  "id": 94004,
  "regionID": 1010056,
  "name": "Ch\u014Dchinobake",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 698,
  "parentID": 94003,
  "angleFromParent": 130,
  "distanceFromParent": 160
}, {
  "id": 94005,
  "regionID": 1010056,
  "name": "Shirime",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 700,
  "parentID": 94004,
  "angleFromParent": 90,
  "distanceFromParent": 200
}, {
  "id": 94006,
  "regionID": 1010056,
  "name": "Futakuchi-onna",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 702,
  "parentID": 94005,
  "angleFromParent": 340,
  "distanceFromParent": 90
}, {
  "id": 94008,
  "regionID": 1010056,
  "name": "Kamaitachi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 704,
  "parentID": 94006,
  "angleFromParent": 340,
  "distanceFromParent": 100
}, {
  "id": 94009,
  "regionID": 1010056,
  "name": "Nue",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 706,
  "zoneType": "boss",
  "parentID": 94008,
  "angleFromParent": 15,
  "distanceFromParent": 105
}, {
  "id": 94101,
  "regionID": 1010057,
  "name": "Blemmyes",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 708,
  "parentID": 94009,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 400
}, {
  "id": 94102,
  "regionID": 1010057,
  "name": "Crocotta",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 710,
  "parentID": 94101,
  "angleFromParent": 20,
  "distanceFromParent": 90
}, {
  "id": 94103,
  "regionID": 1010057,
  "name": "Cynocephaly",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 712,
  "parentID": 94102,
  "angleFromParent": 240,
  "distanceFromParent": 120
}, {
  "id": 94104,
  "regionID": 1010057,
  "name": "Monopod",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 714,
  "parentID": 94103,
  "angleFromParent": 315,
  "distanceFromParent": 100
}, {
  "id": 94105,
  "regionID": 1010057,
  "name": "Astomi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 716,
  "parentID": 94104,
  "angleFromParent": 315,
  "distanceFromParent": 100
}, {
  "id": 94106,
  "regionID": 1010057,
  "name": "Pandi",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 718,
  "parentID": 94105,
  "angleFromParent": 285,
  "distanceFromParent": 170
}, {
  "id": 94108,
  "regionID": 1010057,
  "name": "Knocker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 720,
  "parentID": 94106,
  "angleFromParent": 0,
  "distanceFromParent": 100
}, {
  "id": 94109,
  "regionID": 1010057,
  "name": "Kobold",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 722,
  "zoneType": "boss",
  "parentID": 94108,
  "angleFromParent": 35,
  "distanceFromParent": 120
}, {
  "id": 94201,
  "regionID": 1010058,
  "name": "Goblin",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 724,
  "parentID": 94109,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 15,
  "y": 40
}, {
  "id": 94202,
  "regionID": 1010058,
  "name": "Hobgoblin",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 726,
  "parentID": 94201,
  "angleFromParent": 45,
  "distanceFromParent": 100
}, {
  "id": 94203,
  "regionID": 1010058,
  "name": "Gremlin",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 728,
  "parentID": 94202,
  "angleFromParent": 45,
  "distanceFromParent": 110
}, {
  "id": 94204,
  "regionID": 1010058,
  "name": "Quasit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 730,
  "parentID": 94203,
  "angleFromParent": 75,
  "distanceFromParent": 90
}, {
  "id": 94205,
  "regionID": 1010058,
  "name": "Imp",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 732,
  "parentID": 94204,
  "angleFromParent": 75,
  "distanceFromParent": 90
}, {
  "id": 94206,
  "regionID": 1010058,
  "name": "Brownie",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 734,
  "parentID": 94205,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 94207,
  "regionID": 1010058,
  "name": "Pixie",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 736,
  "parentID": 94206,
  "angleFromParent": 80,
  "distanceFromParent": 75,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 94208,
  "regionID": 1010058,
  "name": "Sprite",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 738,
  "parentID": 94206,
  "angleFromParent": 325,
  "distanceFromParent": 90
}, {
  "id": 94209,
  "regionID": 1010058,
  "name": "Dwarf",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 740,
  "zoneType": "boss",
  "parentID": 94208,
  "angleFromParent": 325,
  "distanceFromParent": 110
}, {
  "id": 94301,
  "regionID": 1010059,
  "name": "Leprechaun",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 742,
  "parentID": 94209,
  "angleFromParent": 270,
  "distanceFromParent": 210,
  "x": 55,
  "y": 250
}, {
  "id": 94302,
  "regionID": 1010059,
  "name": "Redcap",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 744,
  "parentID": 94301,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 94303,
  "regionID": 1010059,
  "name": "Boggart",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 746,
  "parentID": 94302,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 94304,
  "regionID": 1010059,
  "name": "Bogeyman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 748,
  "parentID": 94303,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 94305,
  "regionID": 1010059,
  "name": "Bugbear",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 750,
  "parentID": 94304,
  "angleFromParent": 315,
  "distanceFromParent": 100
}, {
  "id": 94306,
  "regionID": 1010059,
  "name": "Bwca",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 752,
  "parentID": 94305,
  "angleFromParent": 300,
  "distanceFromParent": 150
}, {
  "id": 94308,
  "regionID": 1010059,
  "name": "Bwbach",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 754,
  "parentID": 94306,
  "angleFromParent": 250,
  "distanceFromParent": 130
}, {
  "id": 94309,
  "regionID": 1010059,
  "name": "Lubber fiend",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 756,
  "zoneType": "boss",
  "parentID": 94308,
  "angleFromParent": 335,
  "distanceFromParent": 220
}, {
  "id": 94401,
  "regionID": 1010060,
  "name": "Clurichaun",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 758,
  "parentID": 94309,
  "angleFromParent": 270,
  "distanceFromParent": 220,
  "x": 85,
  "y": 45
}, {
  "id": 94402,
  "regionID": 1010060,
  "name": "Far darrig",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 760,
  "parentID": 94401,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 94403,
  "regionID": 1010060,
  "name": "Ghillie Dhu",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 762,
  "parentID": 94402,
  "angleFromParent": 0,
  "distanceFromParent": 150
}, {
  "id": 94404,
  "regionID": 1010060,
  "name": "Barghest",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 764,
  "parentID": 94403,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 94405,
  "regionID": 1010060,
  "name": "Black Annis",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 766,
  "parentID": 94404,
  "angleFromParent": 75,
  "distanceFromParent": 80
}, {
  "id": 94406,
  "regionID": 1010060,
  "name": "Banshee",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 768,
  "parentID": 94405,
  "angleFromParent": 115,
  "distanceFromParent": 80
}, {
  "id": 94408,
  "regionID": 1010060,
  "name": "Beithir",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 770,
  "parentID": 94406,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 94409,
  "regionID": 1010060,
  "name": "Urisk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 772,
  "zoneType": "boss",
  "parentID": 94408,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 94501,
  "regionID": 1010061,
  "name": "Glaistig",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 774,
  "parentID": 94005,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 225,
  "y": 30
}, {
  "id": 94502,
  "regionID": 1010061,
  "name": "Gwragedd Annwn",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 776,
  "parentID": 94501,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 94503,
  "regionID": 1010061,
  "name": "Kelpie",
  "description": "This water horse once tried to get into the horse racing world. The other horses said, 'You're all wet, mate.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 778,
  "parentID": 94502,
  "angleFromParent": 150,
  "distanceFromParent": 130
}, {
  "id": 94504,
  "regionID": 1010061,
  "name": "Selkie",
  "description": "Selkies, seals that can transform into humans, once tried to enter a 'Best Human Impersonation' contest. The judges said, 'You need more practice.'",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 780,
  "parentID": 94503,
  "angleFromParent": 0,
  "distanceFromParent": 120
}, {
  "id": 94505,
  "regionID": 1010061,
  "name": "Abada",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 782,
  "parentID": 94504,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 94506,
  "regionID": 1010061,
  "name": "Ghoul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 784,
  "parentID": 94505,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 94508,
  "regionID": 1010061,
  "name": "Ifrit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 786,
  "parentID": 94506,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 94509,
  "regionID": 1010061,
  "name": "Marid",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 788,
  "parentID": 94508,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 94510,
  "regionID": 1010061,
  "name": "Ceffyl Dwr",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 790,
  "zoneType": "boss",
  "parentID": 94509,
  "angleFromParent": 315,
  "distanceFromParent": 60
}, {
  "id": 94601,
  "regionID": 1010062,
  "name": "C\u0175n Annwn",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 792,
  "parentID": 94510,
  "angleFromParent": 270,
  "distanceFromParent": 220,
  "x": 55,
  "y": 50
}, {
  "id": 94602,
  "regionID": 1010062,
  "name": "Hedley Kow",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 794,
  "parentID": 94601,
  "angleFromParent": 60,
  "distanceFromParent": 90
}, {
  "id": 94603,
  "regionID": 1010062,
  "name": "Bugul Noz",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 796,
  "parentID": 94602,
  "angleFromParent": 90,
  "distanceFromParent": 120
}, {
  "id": 94604,
  "regionID": 1010062,
  "name": "Fideal",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 798,
  "parentID": 94603,
  "angleFromParent": 80,
  "distanceFromParent": 90
}, {
  "id": 94605,
  "regionID": 1010062,
  "name": "Fuath",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 800,
  "parentID": 94604,
  "angleFromParent": 70,
  "distanceFromParent": 90
}, {
  "id": 94606,
  "regionID": 1010062,
  "name": "Phooka",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 802,
  "parentID": 94605,
  "angleFromParent": 350,
  "distanceFromParent": 90
}, {
  "id": 94608,
  "regionID": 1010062,
  "name": "Hag",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 804,
  "parentID": 94606,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 94609,
  "regionID": 1010062,
  "name": "Crone",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 806,
  "parentID": 94608,
  "angleFromParent": 315,
  "distanceFromParent": 180
}, {
  "id": 94610,
  "regionID": 1010062,
  "name": "Wendigo",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "etaShard",
  "prodBase": 1,
  "baseConquestTime": 808,
  "zoneType": "boss",
  "parentID": 94609,
  "angleFromParent": 275,
  "distanceFromParent": 110
}, {
  "id": 94701,
  "regionID": 1010063,
  "name": "Nagual",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 810,
  "parentID": 94610,
  "angleFromParent": 270,
  "distanceFromParent": 200,
  "x": 55,
  "y": 80
}, {
  "id": 94702,
  "regionID": 1010063,
  "name": "Skinwalker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 812,
  "parentID": 94701,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 94703,
  "regionID": 1010063,
  "name": "Pazuzu",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 814,
  "parentID": 94702,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 94704,
  "regionID": 1010063,
  "name": "Zu",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 816,
  "parentID": 94703,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 94705,
  "regionID": 1010063,
  "name": "Ammit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 818,
  "parentID": 94704,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 94706,
  "regionID": 1010063,
  "name": "Azi Dahaka",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 820,
  "parentID": 94705,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 94708,
  "regionID": 1010063,
  "name": "Zahhak",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 822,
  "parentID": 94706,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 94709,
  "regionID": 1010063,
  "name": "Samhid",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 824,
  "parentID": 94708,
  "angleFromParent": 315,
  "distanceFromParent": 100
}, {
  "id": 94710,
  "regionID": 1010063,
  "name": "Ahriman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 826,
  "zoneType": "boss",
  "parentID": 94709,
  "angleFromParent": 315,
  "distanceFromParent": 90
}, {
  "id": 94801,
  "regionID": 1010064,
  "name": "Nuckelavee",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 828,
  "parentID": 94710,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 25,
  "y": 50
}, {
  "id": 94802,
  "regionID": 1010064,
  "name": "Erlking",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 830,
  "parentID": 94801,
  "angleFromParent": 90,
  "distanceFromParent": 120
}, {
  "id": 94803,
  "regionID": 1010064,
  "name": "Horseman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 832,
  "parentID": 94802,
  "angleFromParent": 60,
  "distanceFromParent": 120
}, {
  "id": 94804,
  "regionID": 1010064,
  "name": "Dullahan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 834,
  "parentID": 94803,
  "angleFromParent": 30,
  "distanceFromParent": 120
}, {
  "id": 94805,
  "regionID": 1010064,
  "name": "Gan Ceann",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 836,
  "parentID": 94804,
  "angleFromParent": 0,
  "distanceFromParent": 90
}, {
  "id": 94806,
  "regionID": 1010064,
  "name": "Cwn Annwn",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 838,
  "parentID": 94805,
  "angleFromParent": 330,
  "distanceFromParent": 60
}, {
  "id": 94808,
  "regionID": 1010064,
  "name": "Hounds of the Hunter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 840,
  "parentID": 94806,
  "angleFromParent": 270,
  "distanceFromParent": 90
}, {
  "id": 94809,
  "regionID": 1010064,
  "name": "Wild Hunt",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 842,
  "zoneType": "boss",
  "parentID": 94808,
  "angleFromParent": 45,
  "distanceFromParent": 100,
  "outsideRegionConnectionIDs": [94905]
}, {
  "id": 94901,
  "regionID": 1010065,
  "name": "Fideal",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 844,
  "parentID": 94409,
  "angleFromParent": 180,
  "distanceFromParent": 150,
  "x": 405,
  "y": 30
}, {
  "id": 94902,
  "regionID": 1010065,
  "name": "Goborchinu",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 846,
  "parentID": 94901,
  "angleFromParent": 120,
  "distanceFromParent": 120
}, {
  "id": 94903,
  "regionID": 1010065,
  "name": "Black Dog",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 848,
  "parentID": 94902,
  "angleFromParent": 150,
  "distanceFromParent": 120
}, {
  "id": 94904,
  "regionID": 1010065,
  "name": "Church Grim",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 850,
  "parentID": 94903,
  "angleFromParent": 180,
  "distanceFromParent": 120
}, {
  "id": 94905,
  "regionID": 1010065,
  "name": "Hag",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 852,
  "parentID": 94904,
  "angleFromParent": 135,
  "distanceFromParent": 120,
  "outsideRegionConnectionIDs": [94809]
}, {
  "id": 94906,
  "regionID": 1010065,
  "name": "Crone",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 854,
  "parentID": 94905,
  "angleFromParent": 45,
  "distanceFromParent": 120
}, {
  "id": 94907,
  "regionID": 1010065,
  "name": "Vampire",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 856,
  "parentID": 94906,
  "angleFromParent": 320,
  "distanceFromParent": 120,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 94908,
  "regionID": 1010065,
  "name": "Lich",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 858,
  "parentID": 94906,
  "angleFromParent": 0,
  "distanceFromParent": 120
}, {
  "id": 94909,
  "regionID": 1010065,
  "name": "Draugr",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 860,
  "zoneType": "boss",
  "parentID": 94908,
  "angleFromParent": 25,
  "distanceFromParent": 190
}, {
  "id": 95001,
  "regionID": 1010081,
  "name": "Phoenix",
  "description": "The phoenix, a fiery bird of rebirth, once hosted a BBQ for the gods. They're still raving about the 'eternal flame-grilled' taste.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 862,
  "parentID": 94909,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95002,
  "regionID": 1010081,
  "name": "Firebird",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 864,
  "parentID": 95001,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95003,
  "regionID": 1010081,
  "name": "Thunderbird",
  "description": "The thunderbird, a creature with wings so mighty it once challenged Zeus to an 'Olympic Flight' competition. Zeus blinked, and the thunderbird won.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 866,
  "parentID": 95002,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95004,
  "regionID": 1010081,
  "name": "Garuda",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 868,
  "parentID": 95003,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95005,
  "regionID": 1010081,
  "name": "Simurgh",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 870,
  "parentID": 95004,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95006,
  "regionID": 1010081,
  "name": "Fenghuang",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 872,
  "parentID": 95005,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95008,
  "regionID": 1010081,
  "name": "Bennu",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 874,
  "parentID": 95006,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95009,
  "regionID": 1010081,
  "name": "Vermilion Bird",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 876,
  "zoneType": "boss",
  "parentID": 95008,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 95101,
  "regionID": 1010082,
  "name": "Sun Crow",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 878,
  "parentID": 95009,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95102,
  "regionID": 1010082,
  "name": "Solar Eagle",
  "description": "Hatched from a dying star",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 880,
  "parentID": 95101,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95103,
  "regionID": 1010082,
  "name": "Comet Dragon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 882,
  "parentID": 95102,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95104,
  "regionID": 1010082,
  "name": "Nova Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 884,
  "parentID": 95103,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95105,
  "regionID": 1010082,
  "name": "Eclipse Wyrm",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 886,
  "parentID": 95104,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95106,
  "regionID": 1010082,
  "name": "Nebula Drake",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 888,
  "parentID": 95105,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95108,
  "regionID": 1010082,
  "name": "Gravity Leviathan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 890,
  "parentID": 95106,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95109,
  "regionID": 1010082,
  "name": "Supernova Kraken",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 892,
  "zoneType": "boss",
  "parentID": 95108,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 95201,
  "regionID": 1010083,
  "name": "Pulsar Manticore",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 894,
  "parentID": 95109,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95202,
  "regionID": 1010083,
  "name": "Quasar Chimera",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 896,
  "parentID": 95201,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95203,
  "regionID": 1010083,
  "name": "Meteor Griffin",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 898,
  "parentID": 95202,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95204,
  "regionID": 1010083,
  "name": "Asteroid Hippogriff",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 900,
  "parentID": 95203,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95205,
  "regionID": 1010083,
  "name": "Satellite Pegasus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 902,
  "parentID": 95204,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95206,
  "regionID": 1010083,
  "name": "Space Unicorn",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 904,
  "parentID": 95205,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95208,
  "regionID": 1010083,
  "name": "Orion Centaur",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 906,
  "parentID": 95206,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95209,
  "regionID": 1010083,
  "name": "Ursa Major Minotaur",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 908,
  "zoneType": "boss",
  "parentID": 95208,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 95301,
  "regionID": 1010084,
  "name": "Polaris Cyclops",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 910,
  "parentID": 95209,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95302,
  "regionID": 1010084,
  "name": "Sirius Sphinx",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 912,
  "parentID": 95301,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95303,
  "regionID": 1010084,
  "name": "Aldebaran Gorgon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 914,
  "parentID": 95302,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95304,
  "regionID": 1010084,
  "name": "Betelgeuse Giant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 916,
  "parentID": 95303,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95305,
  "regionID": 1010084,
  "name": "Canopus Titan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 918,
  "parentID": 95304,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95306,
  "regionID": 1010084,
  "name": "Arcturus Colossus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 920,
  "parentID": 95305,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95308,
  "regionID": 1010084,
  "name": "Regulus Behemoth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 922,
  "parentID": 95306,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95309,
  "regionID": 1010084,
  "name": "Antares Leviathan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 924,
  "parentID": 95308,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95310,
  "regionID": 1010084,
  "name": "Altair Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "ThetaShard",
  "prodBase": 1,
  "baseConquestTime": 926,
  "zoneType": "boss",
  "parentID": 95309,
  "angleFromParent": 25,
  "distanceFromParent": 160
}, {
  "id": 95401,
  "regionID": 1010085,
  "name": "Deneb Dragon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 928,
  "parentID": 95310,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95402,
  "regionID": 1010085,
  "name": "Vega Wyrm",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 930,
  "parentID": 95401,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95403,
  "regionID": 1010085,
  "name": "Capella Snake",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 932,
  "parentID": 95402,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95404,
  "regionID": 1010085,
  "name": "Pollux Viper",
  "description": "evolve wisdom realm 1->2",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 934,
  "parentID": 95403,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95405,
  "regionID": 1010085,
  "name": "Castor Adder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 936,
  "parentID": 95404,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95406,
  "regionID": 1010085,
  "name": "Procyon Cobra",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 938,
  "parentID": 95405,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95408,
  "regionID": 1010085,
  "name": "Achernar Python",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 940,
  "parentID": 95406,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95409,
  "regionID": 1010085,
  "name": "Mira Boa",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 942,
  "parentID": 95408,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95410,
  "regionID": 1010085,
  "name": "Albireo Anaconda",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 944,
  "zoneType": "boss",
  "parentID": 95409,
  "angleFromParent": 25,
  "distanceFromParent": 160
}, {
  "id": 95501,
  "regionID": 1010086,
  "name": "Alnair King Cobra",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 946,
  "parentID": 95410,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95502,
  "regionID": 1010086,
  "name": "Avior Basilisk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 948,
  "parentID": 95501,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95503,
  "regionID": 1010086,
  "name": "Alphard Amphiptere",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 950,
  "parentID": 95502,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95504,
  "regionID": 1010086,
  "name": "Alnilam Cockatrice",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 952,
  "parentID": 95503,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95505,
  "regionID": 1010086,
  "name": "Mintaka Manticore",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 954,
  "parentID": 95504,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95506,
  "regionID": 1010086,
  "name": "Alnitak Griffin",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 956,
  "parentID": 95505,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95508,
  "regionID": 1010086,
  "name": "Alnilam Hippogriff",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 958,
  "parentID": 95506,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95509,
  "regionID": 1010086,
  "name": "Betelgeuse Chimera",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 960,
  "parentID": 95508,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95510,
  "regionID": 1010086,
  "name": "Rigel Gorgon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 962,
  "zoneType": "boss",
  "parentID": 95509,
  "angleFromParent": 25,
  "distanceFromParent": 160
}, {
  "id": 95601,
  "regionID": 1010087,
  "name": "Hadar Cyclops",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 964,
  "parentID": 95510,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95602,
  "regionID": 1010087,
  "name": "Meissa Giant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 966,
  "parentID": 95601,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95603,
  "regionID": 1010087,
  "name": "Bellatrix Titan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 968,
  "parentID": 95602,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95604,
  "regionID": 1010087,
  "name": "Rigel Colossus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 970,
  "parentID": 95603,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95605,
  "regionID": 1010087,
  "name": "Saiph Behemoth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 972,
  "parentID": 95604,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95606,
  "regionID": 1010087,
  "name": "Kaus Borealis Leviathan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 974,
  "parentID": 95605,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95607,
  "regionID": 1010087,
  "name": "Menkalinan Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 976,
  "parentID": 95606,
  "angleFromParent": 0,
  "distanceFromParent": 60,
  "isUnlockedByConnection": false,
  "zoneType": "legendaryBoss"
}, {
  "id": 95608,
  "regionID": 1010087,
  "name": "Atria Dragon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 978,
  "parentID": 95606,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95609,
  "regionID": 1010087,
  "name": "Sabik Wyrm",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 980,
  "parentID": 95608,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95610,
  "regionID": 1010087,
  "name": "Alnasl Snake",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 982,
  "zoneType": "boss",
  "parentID": 95609,
  "angleFromParent": 25,
  "distanceFromParent": 160
}, {
  "id": 95701,
  "regionID": 1010088,
  "name": "Alioth Viper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 984,
  "parentID": 95610,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95702,
  "regionID": 1010088,
  "name": "Megrez Adder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 986,
  "parentID": 95701,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95703,
  "regionID": 1010088,
  "name": "Phecda Cobra",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 988,
  "parentID": 95702,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95704,
  "regionID": 1010088,
  "name": "Merak Python",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 990,
  "parentID": 95703,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95705,
  "regionID": 1010088,
  "name": "Dubhe Boa",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 992,
  "parentID": 95704,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95706,
  "regionID": 1010088,
  "name": "Suhail Anaconda",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 994,
  "parentID": 95705,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95708,
  "regionID": 1010088,
  "name": "Diphda King Cobra",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 996,
  "parentID": 95706,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95709,
  "regionID": 1010088,
  "name": "Rasalhague Basilisk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 998,
  "parentID": 95708,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95710,
  "regionID": 1010088,
  "name": "Scheat Amphiptere",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1000,
  "zoneType": "boss",
  "parentID": 95709,
  "angleFromParent": 25,
  "distanceFromParent": 160
}, {
  "id": 95801,
  "regionID": 1010089,
  "name": "Markab Cockatrice",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1002,
  "parentID": 95710,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95802,
  "regionID": 1010089,
  "name": "Alpheratz Manticore",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1004,
  "parentID": 95801,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95803,
  "regionID": 1010089,
  "name": "Ankaa Griffin",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1006,
  "parentID": 95802,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95804,
  "regionID": 1010089,
  "name": "Schedar Hippogriff",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1008,
  "parentID": 95803,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95805,
  "regionID": 1010089,
  "name": "Denebola Chimera",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1010,
  "parentID": 95804,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95806,
  "regionID": 1010089,
  "name": "Zosma Gorgon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1012,
  "parentID": 95805,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95808,
  "regionID": 1010089,
  "name": "J\xF6rmungandr",
  "description": "Picture a serpent so long it once challenged the equator to a 'Who's Straighter' showdown. The equator couldn't keep up.",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1014,
  "parentID": 95806,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95809,
  "regionID": 1010089,
  "name": "Universal Nexus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1016,
  "parentID": 95808,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95810,
  "regionID": 1010089,
  "name": "Filament Dragon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1018,
  "zoneType": "boss",
  "parentID": 95809,
  "angleFromParent": 25,
  "distanceFromParent": 160
}, {
  "id": 95901,
  "regionID": 1010101,
  "name": "Cosmic Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1020,
  "parentID": 95810,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 95902,
  "regionID": 1010101,
  "name": "Celestial Being",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1022,
  "parentID": 95901,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 95903,
  "regionID": 1010101,
  "name": "Star Child",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1024,
  "parentID": 95902,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 95904,
  "regionID": 1010101,
  "name": "Planetary Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1026,
  "parentID": 95903,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 95905,
  "regionID": 1010101,
  "name": "Solar Protector",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1028,
  "parentID": 95904,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 95906,
  "regionID": 1010101,
  "name": "Interstellar Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1030,
  "parentID": 95905,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 95908,
  "regionID": 1010101,
  "name": "Stellar Titan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1032,
  "parentID": 95906,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 95909,
  "regionID": 1010101,
  "name": "Nova Launcher",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "prodBase": 1,
  "baseConquestTime": 1034,
  "parentID": 95908,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 95910,
  "regionID": 1010101,
  "name": "Quantum Whale",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "iotaShard",
  "zoneType": "boss",
  "prodBase": 1,
  "baseConquestTime": 1036,
  "parentID": 95909,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96001,
  "regionID": 1010102,
  "name": "Gravity Elemental",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1038,
  "parentID": 95910,
  "angleFromParent": 270,
  "distanceFromParent": 180,
  "x": 55,
  "y": 55
}, {
  "id": 96002,
  "regionID": 1010102,
  "name": "Time Bender",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1040,
  "parentID": 96001,
  "angleFromParent": 360,
  "distanceFromParent": 200
}, {
  "id": 96003,
  "regionID": 1010102,
  "name": "Dimension Walker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1042,
  "parentID": 96002,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96004,
  "regionID": 1010102,
  "name": "Crystal Giant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1044,
  "parentID": 96003,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96005,
  "regionID": 1010102,
  "name": "Plasma Golem",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1046,
  "parentID": 96004,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96006,
  "regionID": 1010102,
  "name": "Void Wraith",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1048,
  "parentID": 96005,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96008,
  "regionID": 1010102,
  "name": "Nebula Spirit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1050,
  "parentID": 96006,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96009,
  "regionID": 1010102,
  "name": "Asteroid Eidolon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1052,
  "parentID": 96008,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 96010,
  "regionID": 1010102,
  "name": "Meteorite Demon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1054,
  "parentID": 96009,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 96011,
  "regionID": 1010102,
  "name": "Comet Hunter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1056,
  "parentID": 96010,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 96012,
  "regionID": 1010102,
  "name": "Light Speeder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1058,
  "parentID": 96011,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96013,
  "regionID": 1010102,
  "name": "Warp Drifter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1060,
  "parentID": 96012,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96014,
  "regionID": 1010102,
  "name": "Wormhole Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1062,
  "parentID": 96013,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96015,
  "regionID": 1010102,
  "name": "Singularity Summoner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1064,
  "parentID": 96014,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96016,
  "regionID": 1010102,
  "name": "Black Hole Master",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1066,
  "parentID": 96015,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 96017,
  "regionID": 1010102,
  "name": "Supernova Survivor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1068,
  "parentID": 96016,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 96018,
  "regionID": 1010102,
  "name": "Galaxy Glider",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1070,
  "parentID": 96017,
  "angleFromParent": 180,
  "distanceFromParent": 60
}, {
  "id": 96019,
  "regionID": 1010102,
  "name": "Cosmic Surfer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1072,
  "parentID": 96018,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96020,
  "regionID": 1010102,
  "name": "Celestial Sentinel",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1074,
  "parentID": 96019,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96021,
  "regionID": 1010102,
  "name": "Planetary Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1076,
  "parentID": 96020,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96022,
  "regionID": 1010102,
  "name": "Solar Arbiter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1078,
  "parentID": 96021,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96023,
  "regionID": 1010102,
  "name": "Interstellar Nomad",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1080,
  "parentID": 96022,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96024,
  "regionID": 1010102,
  "name": "Stellar Luminary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1082,
  "parentID": 96023,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96025,
  "regionID": 1010102,
  "name": "Nova Specter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1084,
  "parentID": 96024,
  "angleFromParent": 270,
  "distanceFromParent": 60
}, {
  "id": 96026,
  "regionID": 1010102,
  "name": "Quantum Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "kappaShard",
  "prodBase": 1,
  "baseConquestTime": 1086,
  "zoneType": "boss",
  "parentID": 96025,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96101,
  "regionID": 1010103,
  "name": "Gravity Weaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1088,
  "parentID": 96026,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96102,
  "regionID": 1010103,
  "name": "Time Warlock",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1090,
  "parentID": 96101,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96103,
  "regionID": 1010103,
  "name": "Dimensional Observer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1092,
  "parentID": 96102,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96104,
  "regionID": 1010103,
  "name": "Crystal Behemoth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1094,
  "parentID": 96103,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96105,
  "regionID": 1010103,
  "name": "Plasma Phoenix",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1096,
  "parentID": 96104,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96106,
  "regionID": 1010103,
  "name": "Void Marauder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1098,
  "parentID": 96105,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96108,
  "regionID": 1010103,
  "name": "Nebula Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1100,
  "parentID": 96106,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96109,
  "regionID": 1010103,
  "name": "Asteroid Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1102,
  "zoneType": "boss",
  "parentID": 96108,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96201,
  "regionID": 1010104,
  "name": "Meteorite Crusader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96109,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96202,
  "regionID": 1010104,
  "name": "Comet Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96201,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96203,
  "regionID": 1010104,
  "name": "Light Speed Phantom",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96202,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96204,
  "regionID": 1010104,
  "name": "Warp Navigator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96203,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96205,
  "regionID": 1010104,
  "name": "Wormhole Seeker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96204,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96206,
  "regionID": 1010104,
  "name": "Singularity Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96205,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96207,
  "regionID": 1010104,
  "name": "Black Hole Tamer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96206,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96208,
  "regionID": 1010104,
  "name": "Supernova Explorer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96207,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96219,
  "regionID": 1010105,
  "name": "Galaxy Soarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96208,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96220,
  "regionID": 1010105,
  "name": "Cosmic Drifter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96219,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96221,
  "regionID": 1010105,
  "name": "Celestial Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96220,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96222,
  "regionID": 1010105,
  "name": "Planetary Watcher",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96221,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96223,
  "regionID": 1010105,
  "name": "Solar Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96222,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96224,
  "regionID": 1010105,
  "name": "Interstellar Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96223,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96225,
  "regionID": 1010105,
  "name": "Stellar Explorer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96224,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96226,
  "regionID": 1010105,
  "name": "Nova Navigator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96225,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96237,
  "regionID": 1010106,
  "name": "Quantum Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96226,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96238,
  "regionID": 1010106,
  "name": "Gravity Shaper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96237,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96239,
  "regionID": 1010106,
  "name": "Time Alchemist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96238,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96240,
  "regionID": 1010106,
  "name": "Dimensional Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96239,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96241,
  "regionID": 1010106,
  "name": "Crystal Colossus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96240,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96242,
  "regionID": 1010106,
  "name": "Plasma Elemental",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96241,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96243,
  "regionID": 1010106,
  "name": "Void Stalker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96242,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96244,
  "regionID": 1010106,
  "name": "Nebula Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96243,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96255,
  "regionID": 1010107,
  "name": "Asteroid Specter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96244,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96256,
  "regionID": 1010107,
  "name": "Meteorite Hunter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96255,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96257,
  "regionID": 1010107,
  "name": "Comet Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96256,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96258,
  "regionID": 1010107,
  "name": "Light Speeder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96257,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96259,
  "regionID": 1010107,
  "name": "Warp Surfer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96258,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96260,
  "regionID": 1010107,
  "name": "Wormhole Rider",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96259,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96261,
  "regionID": 1010107,
  "name": "Singularity Summoner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96260,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96262,
  "regionID": 1010107,
  "name": "Black Hole Wrangler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96261,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96273,
  "regionID": 1010108,
  "name": "Supernova Survivor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96262,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96274,
  "regionID": 1010108,
  "name": "Galaxy Rider",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96273,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96275,
  "regionID": 1010108,
  "name": "Cosmic Surfer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96274,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96276,
  "regionID": 1010108,
  "name": "Celestial Sentinel",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96275,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96277,
  "regionID": 1010108,
  "name": "Planetary Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96276,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96278,
  "regionID": 1010108,
  "name": "Solar Arbiter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96277,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96279,
  "regionID": 1010108,
  "name": "Interstellar Nomad",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96278,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96280,
  "regionID": 1010108,
  "name": "Stellar Luminary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96279,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96291,
  "regionID": 1010109,
  "name": "Nova Specter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96280,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96292,
  "regionID": 1010109,
  "name": "Quantum Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96291,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96293,
  "regionID": 1010109,
  "name": "Gravity Weaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96292,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96294,
  "regionID": 1010109,
  "name": "Time Warlock",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96293,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96295,
  "regionID": 1010109,
  "name": "Dimensional Observer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96294,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96296,
  "regionID": 1010109,
  "name": "Crystal Behemoth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96295,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96297,
  "regionID": 1010109,
  "name": "Plasma Phoenix",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96296,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96298,
  "regionID": 1010109,
  "name": "Void Marauder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96297,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96309,
  "regionID": 1010110,
  "name": "Nebula Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96298,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96310,
  "regionID": 1010110,
  "name": "Asteroid Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96309,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96311,
  "regionID": 1010110,
  "name": "Meteorite Crusader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96310,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96312,
  "regionID": 1010110,
  "name": "Comet Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96311,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96313,
  "regionID": 1010110,
  "name": "Light Speed Phantom",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96312,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96314,
  "regionID": 1010110,
  "name": "Warp Navigator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96313,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96315,
  "regionID": 1010110,
  "name": "Wormhole Seeker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96314,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96316,
  "regionID": 1010110,
  "name": "Singularity Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96315,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96327,
  "regionID": 1010111,
  "name": "Black Hole Tamer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96316,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96328,
  "regionID": 1010111,
  "name": "Supernova Explorer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96327,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96329,
  "regionID": 1010111,
  "name": "Galaxy Soarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96328,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96330,
  "regionID": 1010111,
  "name": "Cosmic Drifter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96329,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96331,
  "regionID": 1010111,
  "name": "Celestial Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96330,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96332,
  "regionID": 1010111,
  "name": "Planetary Watcher",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96331,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96333,
  "regionID": 1010111,
  "name": "Solar Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96332,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96334,
  "regionID": 1010111,
  "name": "Interstellar Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96333,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96345,
  "regionID": 1010112,
  "name": "Stellar Explorer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96334,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 100
}, {
  "id": 96346,
  "regionID": 1010112,
  "name": "Nova Navigator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96345,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96347,
  "regionID": 1010112,
  "name": "Quantum Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96346,
  "angleFromParent": 45,
  "distanceFromParent": 90
}, {
  "id": 96348,
  "regionID": 1010112,
  "name": "Gravity Shaper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96347,
  "angleFromParent": 315,
  "distanceFromParent": 120
}, {
  "id": 96349,
  "regionID": 1010112,
  "name": "Time Alchemist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96348,
  "angleFromParent": 360,
  "distanceFromParent": 150
}, {
  "id": 96350,
  "regionID": 1010112,
  "name": "Dimensional Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96349,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96351,
  "regionID": 1010112,
  "name": "Crystal Colossus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96350,
  "angleFromParent": 135,
  "distanceFromParent": 200
}, {
  "id": 96352,
  "regionID": 1010112,
  "name": "Plasma Elemental",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96351,
  "angleFromParent": 25,
  "distanceFromParent": 200
}, {
  "id": 96363,
  "regionID": 1010201,
  "name": "Celestial Gardener",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96352,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96364,
  "regionID": 1010201,
  "name": "Stellar Tender",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96363,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96365,
  "regionID": 1010201,
  "name": "Nebular Planter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96364,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96366,
  "regionID": 1010201,
  "name": "Galactic Arborist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96365,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96367,
  "regionID": 1010201,
  "name": "Cosmic Botanist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96366,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96368,
  "regionID": 1010201,
  "name": "Supernova Cultivator",
  "description": "evolve force realm2->3",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96367,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96369,
  "regionID": 1010201,
  "name": "Wormhole Farmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96368,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96370,
  "regionID": 1010201,
  "name": "Dimensional Cropper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96369,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96381,
  "regionID": 1010202,
  "name": "Multiversal Harvester",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96370,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96382,
  "regionID": 1010202,
  "name": "Transuniversal Rooter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96381,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96383,
  "regionID": 1010202,
  "name": "Omniversal Grafter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96382,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96384,
  "regionID": 1010202,
  "name": "Metaversal Pruner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96383,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96385,
  "regionID": 1010202,
  "name": "Ultraversal Trelliser",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96384,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96386,
  "regionID": 1010202,
  "name": "Xenoverse Fruiter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96385,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96387,
  "regionID": 1010202,
  "name": "Panverse Vintner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96386,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96388,
  "regionID": 1010202,
  "name": "Omniverse Ciderer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96387,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96399,
  "regionID": 1010203,
  "name": "Megaverse Meader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96388,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96400,
  "regionID": 1010203,
  "name": "Teraverse Brewer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96399,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96401,
  "regionID": 1010203,
  "name": "Petaverse Distiller",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96400,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96402,
  "regionID": 1010203,
  "name": "Exaverses Infuser",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96401,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96403,
  "regionID": 1010203,
  "name": "Zettaverse Tincturer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96402,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96404,
  "regionID": 1010203,
  "name": "Yottaverse Fermenter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96403,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96405,
  "regionID": 1010203,
  "name": "Brontoverse Barreler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96404,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96406,
  "regionID": 1010203,
  "name": "Gegaverse Cooper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96405,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96417,
  "regionID": 1010204,
  "name": "NanoCosmic Bottler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96406,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96418,
  "regionID": 1010204,
  "name": "Celestial Sower",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96417,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96419,
  "regionID": 1010204,
  "name": "Stellar Grower",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96418,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96420,
  "regionID": 1010204,
  "name": "Nebular Gardener",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96419,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96421,
  "regionID": 1010204,
  "name": "Galactic Horticulturist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96420,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96422,
  "regionID": 1010204,
  "name": "Cosmic Planter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96421,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96423,
  "regionID": 1010204,
  "name": "Supernova Farmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96422,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96424,
  "regionID": 1010204,
  "name": "Wormhole Agronomist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96423,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96435,
  "regionID": 1010205,
  "name": "Dimensional Agriculturist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96424,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96436,
  "regionID": 1010205,
  "name": "Multiversal Harvestmaster",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96435,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96437,
  "regionID": 1010205,
  "name": "Transuniversal Greenkeeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96436,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96438,
  "regionID": 1010205,
  "name": "Omniversal Orchestrator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96437,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96439,
  "regionID": 1010205,
  "name": "Metaversal Trimmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96438,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96440,
  "regionID": 1010205,
  "name": "Ultraversal Vinekeeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96439,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96441,
  "regionID": 1010205,
  "name": "Xenoverse Cultivator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96440,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96442,
  "regionID": 1010205,
  "name": "Panverse Viticulturist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96441,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96453,
  "regionID": 1010206,
  "name": "Omniverse Cider Maker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96442,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96454,
  "regionID": 1010206,
  "name": "Megaverse Mead Brewer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96453,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96455,
  "regionID": 1010206,
  "name": "Teraverse Distiller",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96454,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96456,
  "regionID": 1010206,
  "name": "Petaverse Infusionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96455,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96457,
  "regionID": 1010206,
  "name": "Exaverses Alchemist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96456,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96458,
  "regionID": 1010206,
  "name": "Zettaverse Mixer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96457,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96459,
  "regionID": 1010206,
  "name": "Yottaverse Fermentation Expert",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96458,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96460,
  "regionID": 1010206,
  "name": "Brontoverse Cooperage Master",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96459,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96471,
  "regionID": 1010207,
  "name": "Gegaverse Wine Artisan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96460,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96472,
  "regionID": 1010207,
  "name": "Celestial Botanist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96471,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96473,
  "regionID": 1010207,
  "name": "Stellar Plant Whisperer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96472,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96474,
  "regionID": 1010207,
  "name": "Nebular Tree Shepherd",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96473,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96475,
  "regionID": 1010207,
  "name": "Galactic Shrub Tamer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96474,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96476,
  "regionID": 1010207,
  "name": "Cosmic Flora Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96475,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96477,
  "regionID": 1010207,
  "name": "Supernova Bloom Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96476,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96478,
  "regionID": 1010207,
  "name": "Wormhole Garden Artist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96477,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96489,
  "regionID": 1010208,
  "name": "Dimensional Flora Steward",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96478,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96490,
  "regionID": 1010208,
  "name": "Multiversal Green Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96489,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96491,
  "regionID": 1010208,
  "name": "Transuniversal Arboreal Maestro",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96490,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96492,
  "regionID": 1010208,
  "name": "Omniversal Foliage Curator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96491,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96493,
  "regionID": 1010208,
  "name": "Metaversal Plant Connoisseur",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96492,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96494,
  "regionID": 1010208,
  "name": "Ultraversal Vine Cultivator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96493,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96495,
  "regionID": 1010208,
  "name": "Xenoverse Bonsai Artist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96494,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96496,
  "regionID": 1010208,
  "name": "Panverse Herbologist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96495,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96507,
  "regionID": 1010209,
  "name": "Omniverse Fungus Forager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96496,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96508,
  "regionID": 1010209,
  "name": "Megaverse Algae Farmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96507,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96509,
  "regionID": 1010209,
  "name": "Teraverse Moss Tender",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96508,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96510,
  "regionID": 1010209,
  "name": "Petaverse Lichen Cultivator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96509,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96511,
  "regionID": 1010209,
  "name": "Exaverses Fern Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96510,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96512,
  "regionID": 1010209,
  "name": "Zettaverse Thallus Curator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96511,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96513,
  "regionID": 1010209,
  "name": "Yottaverse Seaweed Farmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96512,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96514,
  "regionID": 1010209,
  "name": "Brontoverse Kelp Harvester",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96513,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96525,
  "regionID": 1010210,
  "name": "Gegaverse Seagrass Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96514,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96526,
  "regionID": 1010210,
  "name": "Celestial Agronomist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96525,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96527,
  "regionID": 1010210,
  "name": "Stellar Crop Whisperer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96526,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96528,
  "regionID": 1010210,
  "name": "Nebular Soil Shepherd",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96527,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96529,
  "regionID": 1010210,
  "name": "Galactic Harvest Tamer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96528,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96530,
  "regionID": 1010210,
  "name": "Cosmic Crop Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96529,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96531,
  "regionID": 1010210,
  "name": "Supernova Grain Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96530,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96532,
  "regionID": 1010210,
  "name": "Wormhole Farm Artist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96531,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96543,
  "regionID": 1010211,
  "name": "Dimensional Harvest Steward",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96532,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96544,
  "regionID": 1010211,
  "name": "Multiversal Crop Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96543,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96545,
  "regionID": 1010211,
  "name": "Transuniversal Agricultural Maestro",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96544,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96546,
  "regionID": 1010211,
  "name": "Omniversal Harvest Curator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96545,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96547,
  "regionID": 1010211,
  "name": "Metaversal Crop Connoisseur",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96546,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96548,
  "regionID": 1010211,
  "name": "Ultraversal Crop Cultivator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96547,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96549,
  "regionID": 1010211,
  "name": "Xenoverse Herbologist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96548,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96550,
  "regionID": 1010211,
  "name": "Panverse Fungus Forager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96549,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96561,
  "regionID": 1010212,
  "name": "Omniverse Algae Farmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96550,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96562,
  "regionID": 1010212,
  "name": "Megaverse Moss Tender",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96561,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96563,
  "regionID": 1010212,
  "name": "Teraverse Lichen Cultivator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96562,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96564,
  "regionID": 1010212,
  "name": "Petaverse Fern Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96563,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96565,
  "regionID": 1010212,
  "name": "Exaverses Thallus Curator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96564,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96566,
  "regionID": 1010212,
  "name": "Zettaverse Seaweed Farmer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96565,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96567,
  "regionID": 1010212,
  "name": "Yottaverse Kelp Harvester",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96566,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96568,
  "regionID": 1010212,
  "name": "Brontoverse Seagrass Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96567,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96579,
  "regionID": 1010213,
  "name": "Celestial Vintner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96568,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96580,
  "regionID": 1010213,
  "name": "Stellar Wine Whisperer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96579,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96581,
  "regionID": 1010213,
  "name": "Nebular Vine Shepherd",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96580,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96582,
  "regionID": 1010213,
  "name": "Galactic Grape Tamer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96581,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96583,
  "regionID": 1010213,
  "name": "Cosmic Winemaster",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96582,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96584,
  "regionID": 1010213,
  "name": "Supernova Wine Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96583,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96585,
  "regionID": 1010213,
  "name": "Wormhole Vineyard Artist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96584,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96586,
  "regionID": 1010213,
  "name": "Dimensional Winery Steward",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96585,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96597,
  "regionID": 1010214,
  "name": "Multiversal Winemaking Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96586,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96598,
  "regionID": 1010214,
  "name": "Transuniversal Vintner Maestro",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96597,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96599,
  "regionID": 1010214,
  "name": "Omniversal Viniculture Curator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96598,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96600,
  "regionID": 1010214,
  "name": "Metaversal Grape Connoisseur",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96599,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96601,
  "regionID": 1010214,
  "name": "Ultraversal Winemaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96600,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96602,
  "regionID": 1010214,
  "name": "Xenoverse Ciderologist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96601,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96603,
  "regionID": 1010214,
  "name": "Panverse Mead Artisan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96602,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96604,
  "regionID": 1010214,
  "name": "Omniverse Distillation Expert",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96603,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96615,
  "regionID": 1010215,
  "name": "Megaverse Infusion Master",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96604,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96616,
  "regionID": 1010215,
  "name": "Teraverse Tincture Tamer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96615,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96617,
  "regionID": 1010215,
  "name": "Petaverse Fermentation Whisperer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96616,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96618,
  "regionID": 1010215,
  "name": "Exaverses Brewing Shepherd",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96617,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96619,
  "regionID": 1010215,
  "name": "Zettaverse Bottling Artisan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96618,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96620,
  "regionID": 1010215,
  "name": "Yottaverse Brewing Maestro",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96619,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96621,
  "regionID": 1010215,
  "name": "Brontoverse Brew Whisperer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96620,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96622,
  "regionID": 1010215,
  "name": "Gegaverse Bottling Specialist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96621,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96633,
  "regionID": 1010301,
  "name": "Spiral Dancer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96622,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96634,
  "regionID": 1010301,
  "name": "Cosmic Acrobat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96633,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96635,
  "regionID": 1010301,
  "name": "Nebular Illusionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96634,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96636,
  "regionID": 1010301,
  "name": "Galactic Sorcerer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96635,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96637,
  "regionID": 1010301,
  "name": "Universal Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96636,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96638,
  "regionID": 1010301,
  "name": "Multiverse Magus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96637,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96639,
  "regionID": 1010301,
  "name": "Meta-Cosmic Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96638,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96640,
  "regionID": 1010301,
  "name": "Xenospheric Mesmerizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96639,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96651,
  "regionID": 1010302,
  "name": "Pan-Dimensional Hypnotist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96640,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96652,
  "regionID": 1010302,
  "name": "Omni-Versal Thought Reader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96651,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96653,
  "regionID": 1010302,
  "name": "Mega-Astral Projector",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96652,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96654,
  "regionID": 1010302,
  "name": "Tera-Etheric Levitationist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96653,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96655,
  "regionID": 1010302,
  "name": "Peta-Astral Teleporter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96654,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96656,
  "regionID": 1010302,
  "name": "Exa-Dimensional Jumper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96655,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96657,
  "regionID": 1010302,
  "name": "Zetta-Cosmic Telekinetic",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96656,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96658,
  "regionID": 1010302,
  "name": "Yotta-Galactic Clairvoyant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96657,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96669,
  "regionID": 1010303,
  "name": "Bronto-Celestial Telepath",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96658,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96670,
  "regionID": 1010303,
  "name": "Gega-Universal Empath",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96669,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96671,
  "regionID": 1010303,
  "name": "Nano-Omniscient Oracle",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96670,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96672,
  "regionID": 1010303,
  "name": "Celestial Choreographer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96671,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96673,
  "regionID": 1010303,
  "name": "Starry Acrobat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96672,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96674,
  "regionID": 1010303,
  "name": "Planetary Illusionist",
  "description": "evolve wisdom realm 2->3",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96673,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96675,
  "regionID": 1010303,
  "name": "Interstellar Sorcerer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96674,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96676,
  "regionID": 1010303,
  "name": "Cosmic Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96675,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96687,
  "regionID": 1010304,
  "name": "Multiplanar Magus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96676,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96688,
  "regionID": 1010304,
  "name": "Meta-Galactic Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96687,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96689,
  "regionID": 1010304,
  "name": "Xenocosmic Mesmerizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96688,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96690,
  "regionID": 1010304,
  "name": "Pan-Galactic Hypnotist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96689,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96691,
  "regionID": 1010304,
  "name": "Omni-Dimensional Mind Reader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96690,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96692,
  "regionID": 1010304,
  "name": "Mega-Celestial Projector",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96691,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96693,
  "regionID": 1010304,
  "name": "Tera-Spatial Levitationist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96692,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96694,
  "regionID": 1010304,
  "name": "Peta-Phenomenal Teleporter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96693,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96705,
  "regionID": 1010305,
  "name": "Exa-Reality Jumper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96694,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96706,
  "regionID": 1010305,
  "name": "Zetta-Stellar Telekinetic",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96705,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96707,
  "regionID": 1010305,
  "name": "Yotta-Nebular Clairvoyant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96706,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96708,
  "regionID": 1010305,
  "name": "Bronto-Auroral Telepath",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96707,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96709,
  "regionID": 1010305,
  "name": "Gega-Cosmic Empath",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96708,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96710,
  "regionID": 1010305,
  "name": "Nano-Stellar Sage",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96709,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96711,
  "regionID": 1010305,
  "name": "Nebula Dancer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96710,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96712,
  "regionID": 1010305,
  "name": "Cosmic Contortionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96711,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96723,
  "regionID": 1010306,
  "name": "Galactic Illusion Weaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96712,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96724,
  "regionID": 1010306,
  "name": "Universal Mage",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96723,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96725,
  "regionID": 1010306,
  "name": "Multi-Realm Magician",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96724,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96726,
  "regionID": 1010306,
  "name": "Meta-Galaxy Warlock",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96725,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96727,
  "regionID": 1010306,
  "name": "Xenocosmic Enchantress",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96726,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96728,
  "regionID": 1010306,
  "name": "Pan-Galactic Mesmerist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96727,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96729,
  "regionID": 1010306,
  "name": "Omni-Verse Illusionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96728,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96730,
  "regionID": 1010306,
  "name": "Mega-Celestial Soothsayer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96729,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96741,
  "regionID": 1010307,
  "name": "Tera-Reality Levitator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96730,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96742,
  "regionID": 1010307,
  "name": "Peta-Universal Telepath",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96741,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96743,
  "regionID": 1010307,
  "name": "Exa-Planetary Seer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96742,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96744,
  "regionID": 1010307,
  "name": "Zetta-Cosmic Prophet",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96743,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96745,
  "regionID": 1010307,
  "name": "Yotta-Stellar Visionary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96744,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96746,
  "regionID": 1010307,
  "name": "Bronto-Astrologer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96745,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96747,
  "regionID": 1010307,
  "name": "Gega-Galactic Oracle",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96746,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96748,
  "regionID": 1010307,
  "name": "Nano-Celestial Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96747,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96759,
  "regionID": 1010308,
  "name": "Stellar Choreographer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96748,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96760,
  "regionID": 1010308,
  "name": "Galactic Acrobat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96759,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96761,
  "regionID": 1010308,
  "name": "Universal Illusion Architect",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96760,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96762,
  "regionID": 1010308,
  "name": "Multi-Cosmic Wizard",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96761,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96763,
  "regionID": 1010308,
  "name": "Meta-Universal Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96762,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96764,
  "regionID": 1010308,
  "name": "Mega-Universal Illusionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96763,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96765,
  "regionID": 1010308,
  "name": "Pan-Stellar Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96764,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96766,
  "regionID": 1010308,
  "name": "Omni-Galactic Mesmerizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96765,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96777,
  "regionID": 1010309,
  "name": "Mega-Reality Hypnotist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96766,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96778,
  "regionID": 1010309,
  "name": "Tera-Interdimensional Reader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96777,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96779,
  "regionID": 1010309,
  "name": "Peta-Celestial Projector",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96778,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96780,
  "regionID": 1010309,
  "name": "Exa-Universal Levitationist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96779,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96781,
  "regionID": 1010309,
  "name": "Zetta-Multiverse Teleporter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96780,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96782,
  "regionID": 1010309,
  "name": "Yotta-Galactic Jumper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96781,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96783,
  "regionID": 1010309,
  "name": "Bronto-Exoplanetary Telekinetic",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96782,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96784,
  "regionID": 1010309,
  "name": "Gega-Universal Clairvoyant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96783,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96795,
  "regionID": 1010310,
  "name": "Nano-Cosmic Sage",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96784,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96796,
  "regionID": 1010310,
  "name": "Celestial Dreamweaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96795,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96797,
  "regionID": 1010310,
  "name": "Starry Contortionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96796,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96798,
  "regionID": 1010310,
  "name": "Planetary Illusion Artisan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96797,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96799,
  "regionID": 1010310,
  "name": "Interstellar Sorceress",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96798,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96800,
  "regionID": 1010310,
  "name": "Cosmic Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96799,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96801,
  "regionID": 1010310,
  "name": "Multi-Verse Weaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96800,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96802,
  "regionID": 1010310,
  "name": "Meta-Stellar Sorceress",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96801,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96813,
  "regionID": 1010311,
  "name": "Xenocosmic Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96802,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96814,
  "regionID": 1010311,
  "name": "Pan-Galactic Sorceress",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96813,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96815,
  "regionID": 1010311,
  "name": "Omni-Dimensional Weaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96814,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96816,
  "regionID": 1010311,
  "name": "Mega-Cosmic Muse",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96815,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96817,
  "regionID": 1010311,
  "name": "Tera-Spatial Sorceress",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96816,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96818,
  "regionID": 1010311,
  "name": "Peta-Planetary Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96817,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96819,
  "regionID": 1010311,
  "name": "Exa-Celestial Scribe",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96818,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96820,
  "regionID": 1010311,
  "name": "Zetta-Stellar Scholar",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96819,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96831,
  "regionID": 1010312,
  "name": "Yotta-Universal Savant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96820,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96832,
  "regionID": 1010312,
  "name": "Bronto-Cosmic Scholar",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96831,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96833,
  "regionID": 1010312,
  "name": "Gega-Nebular Sage",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96832,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96834,
  "regionID": 1010312,
  "name": "Nano-Galactic Oracle",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96833,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96835,
  "regionID": 1010312,
  "name": "Nebula Whisperer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96834,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96836,
  "regionID": 1010312,
  "name": "Cosmic Hypnotist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96835,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96837,
  "regionID": 1010312,
  "name": "Galactic Sorceress",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96836,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96838,
  "regionID": 1010312,
  "name": "Universal Clairvoyant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96837,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96849,
  "regionID": 1010313,
  "name": "Multiplanar Weaver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96838,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96850,
  "regionID": 1010313,
  "name": "Meta-Cosmic Enigma",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96849,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96851,
  "regionID": 1010313,
  "name": "Xenospheric Sorcerer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96850,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96852,
  "regionID": 1010313,
  "name": "Pan-Universal Illusionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96851,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96853,
  "regionID": 1010313,
  "name": "Omni-Versal Magus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96852,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96854,
  "regionID": 1010313,
  "name": "Mega-Astral Mesmerist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96853,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96855,
  "regionID": 1010313,
  "name": "Tera-Etheric Illusionist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96854,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96856,
  "regionID": 1010313,
  "name": "Peta-Astral Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96855,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96867,
  "regionID": 1010314,
  "name": "Exa-Dimensional Mind Reader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96856,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96868,
  "regionID": 1010314,
  "name": "Zetta-Celestial Sorcerer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96867,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96869,
  "regionID": 1010314,
  "name": "Yotta-Stellar Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96868,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96870,
  "regionID": 1010314,
  "name": "Bronto-Multiverse Magician",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96869,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96871,
  "regionID": 1010314,
  "name": "Gega-Universal Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96870,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96872,
  "regionID": 1010314,
  "name": "Nano-Cosmic Magus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96871,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96873,
  "regionID": 1010314,
  "name": "Celestial Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96872,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96874,
  "regionID": 1010314,
  "name": "Starry Mesmerizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96873,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96885,
  "regionID": 1010315,
  "name": "Planetary Hypnotist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96874,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96886,
  "regionID": 1010315,
  "name": "Interstellar Mind Reader",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96885,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96887,
  "regionID": 1010315,
  "name": "Cosmic Conjurer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96886,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96888,
  "regionID": 1010315,
  "name": "Multi-Dimensional Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96887,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96889,
  "regionID": 1010315,
  "name": "Meta-Cosmic Mesmerizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96888,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96890,
  "regionID": 1010315,
  "name": "Tera-Cosmic Hypnotist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96889,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96891,
  "regionID": 1010315,
  "name": "Pan-Dimensional Enchanter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96890,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96892,
  "regionID": 1010315,
  "name": "Omni-Galactic Sorcerer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96891,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96903,
  "regionID": 1010401,
  "name": "Andromeda Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96892,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96904,
  "regionID": 1010401,
  "name": "Triangulum Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96903,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96905,
  "regionID": 1010401,
  "name": "Milky Way Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96904,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96906,
  "regionID": 1010401,
  "name": "Large Magellanic Cloud Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96905,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96907,
  "regionID": 1010401,
  "name": "Small Magellanic Cloud Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96906,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96908,
  "regionID": 1010401,
  "name": "M31 Extraterrestrial",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96907,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96909,
  "regionID": 1010401,
  "name": "M33 Alien",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96908,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96910,
  "regionID": 1010401,
  "name": "M110 Astronaut",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96909,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96921,
  "regionID": 1010402,
  "name": "IC 10 Spacefarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96910,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96922,
  "regionID": 1010402,
  "name": "NGC 147 Cosmonaut",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96921,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96923,
  "regionID": 1010402,
  "name": "NGC 185 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96922,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96924,
  "regionID": 1010402,
  "name": "M32 Warp Driver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96923,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96925,
  "regionID": 1010402,
  "name": "M110 Hyperspace Pilot",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96924,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96926,
  "regionID": 1010402,
  "name": "Draco Dark Matter Being",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96925,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96927,
  "regionID": 1010402,
  "name": "Sculptor Dwarf Galaxy Consciousness",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96926,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96928,
  "regionID": 1010402,
  "name": "Andromeda Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96927,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96939,
  "regionID": 1010403,
  "name": "Triangulum Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96928,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96940,
  "regionID": 1010403,
  "name": "Milky Way Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96939,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96941,
  "regionID": 1010403,
  "name": "Large Magellanic Cloud Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96940,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96942,
  "regionID": 1010403,
  "name": "Small Magellanic Cloud Messenger",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96941,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96943,
  "regionID": 1010403,
  "name": "M31 Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96942,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96944,
  "regionID": 1010403,
  "name": "M33 Negotiator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96943,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96945,
  "regionID": 1010403,
  "name": "M110 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96944,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96946,
  "regionID": 1010403,
  "name": "IC 10 Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96945,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96957,
  "regionID": 1010404,
  "name": "NGC 147 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96946,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96958,
  "regionID": 1010404,
  "name": "NGC 185 Attache",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96957,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96959,
  "regionID": 1010404,
  "name": "M32 Cosmic Pilot",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96958,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96960,
  "regionID": 1010404,
  "name": "M110 Star Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96959,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96961,
  "regionID": 1010404,
  "name": "Draco Dark Matter Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96960,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96962,
  "regionID": 1010404,
  "name": "Sculptor Dwarf Galaxy Cognizance",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96961,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96963,
  "regionID": 1010404,
  "name": "Andromeda Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96962,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96964,
  "regionID": 1010404,
  "name": "Triangulum Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96963,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96975,
  "regionID": 1010405,
  "name": "Milky Way Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96964,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96976,
  "regionID": 1010405,
  "name": "Large Magellanic Cloud Mediator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96975,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96977,
  "regionID": 1010405,
  "name": "Small Magellanic Cloud Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96976,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96978,
  "regionID": 1010405,
  "name": "M31 Visitor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96977,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96979,
  "regionID": 1010405,
  "name": "M33 Cosmic Nomad",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96978,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96980,
  "regionID": 1010405,
  "name": "M110 Wayfarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96979,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96981,
  "regionID": 1010405,
  "name": "IC 10 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96980,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96982,
  "regionID": 1010405,
  "name": "NGC 147 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96981,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96993,
  "regionID": 1010406,
  "name": "NGC 185 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 96982,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 96994,
  "regionID": 1010406,
  "name": "M32 Astral Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 96993,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 96995,
  "regionID": 1010406,
  "name": "M110 Warp Navigator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 96994,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 96996,
  "regionID": 1010406,
  "name": "Draco Dark Matter Being",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 96995,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 96997,
  "regionID": 1010406,
  "name": "Sculptor Dwarf Galaxy Awareness",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 96996,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 96998,
  "regionID": 1010406,
  "name": "Andromeda Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 96997,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 96999,
  "regionID": 1010406,
  "name": "Triangulum Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 96998,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97000,
  "regionID": 1010406,
  "name": "Milky Way Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 96999,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97011,
  "regionID": 1010407,
  "name": "Large Magellanic Cloud Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97000,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97012,
  "regionID": 1010407,
  "name": "Small Magellanic Cloud Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97011,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97013,
  "regionID": 1010407,
  "name": "M31 Cosmic Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97012,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97014,
  "regionID": 1010407,
  "name": "M33 Alien Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97013,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97015,
  "regionID": 1010407,
  "name": "M110 Astral Explorer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97014,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97016,
  "regionID": 1010407,
  "name": "IC 10 Cosmic Nomad",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97015,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97017,
  "regionID": 1010407,
  "name": "NGC 147 Spacefarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97016,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97018,
  "regionID": 1010407,
  "name": "NGC 185 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97017,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97029,
  "regionID": 1010408,
  "name": "M32 Interstellar Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97018,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97030,
  "regionID": 1010408,
  "name": "M110 Hyperspace Pilot",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97029,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97031,
  "regionID": 1010408,
  "name": "Draco Dark Matter Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97030,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97032,
  "regionID": 1010408,
  "name": "Sculptor Dwarf Galaxy Cognizance",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97031,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97033,
  "regionID": 1010408,
  "name": "Andromeda Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97032,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97034,
  "regionID": 1010408,
  "name": "Triangulum Emissary",
  "description": "evolve energy realm 1->2",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97033,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97035,
  "regionID": 1010408,
  "name": "Milky Way Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97034,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97036,
  "regionID": 1010408,
  "name": "Large Magellanic Cloud Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97035,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97047,
  "regionID": 1010409,
  "name": "Small Magellanic Cloud Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97036,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97048,
  "regionID": 1010409,
  "name": "M31 Extraterrestrial",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97047,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97049,
  "regionID": 1010409,
  "name": "M33 Alien",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97048,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97050,
  "regionID": 1010409,
  "name": "M110 Astronaut",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97049,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97051,
  "regionID": 1010409,
  "name": "IC 10 Spacefarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97050,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97052,
  "regionID": 1010409,
  "name": "NGC 147 Cosmonaut",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97051,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97053,
  "regionID": 1010409,
  "name": "NGC 185 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97052,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97054,
  "regionID": 1010409,
  "name": "M32 Warp Driver",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97053,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97065,
  "regionID": 1010410,
  "name": "M110 Hyperspace Pilot",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97054,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97066,
  "regionID": 1010410,
  "name": "Draco Dark Matter Being",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97065,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97067,
  "regionID": 1010410,
  "name": "Sculptor Dwarf Galaxy Consciousness",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97066,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97068,
  "regionID": 1010410,
  "name": "Andromeda Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97067,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97069,
  "regionID": 1010410,
  "name": "Triangulum Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97068,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97070,
  "regionID": 1010410,
  "name": "Milky Way Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97069,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97071,
  "regionID": 1010410,
  "name": "Large Magellanic Cloud Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97070,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97072,
  "regionID": 1010410,
  "name": "Small Magellanic Cloud Messenger",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97071,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97083,
  "regionID": 1010411,
  "name": "M31 Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97072,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97084,
  "regionID": 1010411,
  "name": "M33 Negotiator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97083,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97085,
  "regionID": 1010411,
  "name": "M110 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97084,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97086,
  "regionID": 1010411,
  "name": "IC 10 Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97085,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97087,
  "regionID": 1010411,
  "name": "NGC 147 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97086,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97088,
  "regionID": 1010411,
  "name": "NGC 185 Attache",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97087,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97089,
  "regionID": 1010411,
  "name": "M32 Cosmic Pilot",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97088,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97090,
  "regionID": 1010411,
  "name": "M110 Star Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97089,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97101,
  "regionID": 1010412,
  "name": "Draco Dark Matter Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97090,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97102,
  "regionID": 1010412,
  "name": "Sculptor Dwarf Galaxy Cognizance",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97101,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97103,
  "regionID": 1010412,
  "name": "Andromeda Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97102,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97104,
  "regionID": 1010412,
  "name": "Triangulum Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97103,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97105,
  "regionID": 1010412,
  "name": "Milky Way Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97104,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97106,
  "regionID": 1010412,
  "name": "Large Magellanic Cloud Mediator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97105,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97107,
  "regionID": 1010412,
  "name": "Small Magellanic Cloud Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97106,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97108,
  "regionID": 1010412,
  "name": "M31 Visitor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97107,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97119,
  "regionID": 1010413,
  "name": "M33 Cosmic Nomad",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97108,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97120,
  "regionID": 1010413,
  "name": "M110 Wayfarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97119,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97121,
  "regionID": 1010413,
  "name": "IC 10 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97120,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97122,
  "regionID": 1010413,
  "name": "NGC 147 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97121,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97123,
  "regionID": 1010413,
  "name": "NGC 185 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97122,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97124,
  "regionID": 1010413,
  "name": "M32 Astral Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97123,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97125,
  "regionID": 1010413,
  "name": "M110 Warp Navigator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97124,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97126,
  "regionID": 1010413,
  "name": "Draco Dark Matter Being",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97125,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97137,
  "regionID": 1010414,
  "name": "Sculptor Dwarf Galaxy Awareness",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97126,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97138,
  "regionID": 1010414,
  "name": "Andromeda Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97137,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97139,
  "regionID": 1010414,
  "name": "Triangulum Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97138,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97140,
  "regionID": 1010414,
  "name": "Milky Way Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97139,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97141,
  "regionID": 1010414,
  "name": "Large Magellanic Cloud Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97140,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97142,
  "regionID": 1010414,
  "name": "Small Magellanic Cloud Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97141,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97143,
  "regionID": 1010414,
  "name": "M31 Cosmic Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97142,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97144,
  "regionID": 1010414,
  "name": "M33 Alien Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97143,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97155,
  "regionID": 1010415,
  "name": "M110 Astral Explorer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97144,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97156,
  "regionID": 1010415,
  "name": "IC 10 Cosmic Nomad",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97155,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97157,
  "regionID": 1010415,
  "name": "NGC 147 Spacefarer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97156,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97158,
  "regionID": 1010415,
  "name": "NGC 185 Voyager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97157,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97159,
  "regionID": 1010415,
  "name": "M32 Interstellar Traveler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97158,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97160,
  "regionID": 1010415,
  "name": "M110 Hyperspace Pilot",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97159,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97161,
  "regionID": 1010415,
  "name": "Draco Dark Matter Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97160,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97162,
  "regionID": 1010415,
  "name": "Sculptor Dwarf Galaxy Cognizance",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97161,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97173,
  "regionID": 1010501,
  "name": "Virgo Liaison",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97162,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97174,
  "regionID": 1010501,
  "name": "Leo Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97173,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97175,
  "regionID": 1010501,
  "name": "Cancer Legate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97174,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97176,
  "regionID": 1010501,
  "name": "Ursa Major Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97175,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97177,
  "regionID": 1010501,
  "name": "Canes Venatici Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97176,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97178,
  "regionID": 1010501,
  "name": "Coma Berenices Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97177,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97179,
  "regionID": 1010501,
  "name": "Bo\xF6tes Assistant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97178,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97180,
  "regionID": 1010501,
  "name": "Corona Borealis Secretary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97179,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97191,
  "regionID": 1010502,
  "name": "Hercules Aide",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97180,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97192,
  "regionID": 1010502,
  "name": "Draco Messenger",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97191,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97193,
  "regionID": 1010502,
  "name": "Ursa Minor Courier",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97192,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97194,
  "regionID": 1010502,
  "name": "Lynx Go-Between",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97193,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97195,
  "regionID": 1010502,
  "name": "Sextans Intermediary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97194,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97196,
  "regionID": 1010502,
  "name": "Leo I Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97195,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97197,
  "regionID": 1010502,
  "name": "Leo II Deputy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97196,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97198,
  "regionID": 1010502,
  "name": "NGC 3109 Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97197,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97209,
  "regionID": 1010503,
  "name": "Antlia Negotiator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97198,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97210,
  "regionID": 1010503,
  "name": "Crater II Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97209,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97211,
  "regionID": 1010503,
  "name": "NGC 3109 Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97210,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97212,
  "regionID": 1010503,
  "name": "Virgo Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97211,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97213,
  "regionID": 1010503,
  "name": "Leo Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97212,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97214,
  "regionID": 1010503,
  "name": "Cancer Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97213,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97215,
  "regionID": 1010503,
  "name": "Ursa Major Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97214,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97216,
  "regionID": 1010503,
  "name": "Canes Venatici Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97215,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97227,
  "regionID": 1010504,
  "name": "Coma Berenices Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97216,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97228,
  "regionID": 1010504,
  "name": "Bo\xF6tes Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97227,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97229,
  "regionID": 1010504,
  "name": "Corona Borealis Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97228,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97230,
  "regionID": 1010504,
  "name": "Hercules Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97229,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97231,
  "regionID": 1010504,
  "name": "Draco Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97230,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97232,
  "regionID": 1010504,
  "name": "Ursa Minor Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97231,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97233,
  "regionID": 1010504,
  "name": "Lynx Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97232,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97234,
  "regionID": 1010504,
  "name": "Sextans Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97233,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97245,
  "regionID": 1010601,
  "name": "Laniakea Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97234,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97246,
  "regionID": 1010601,
  "name": "Perseus-Pisces Plenary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97245,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97247,
  "regionID": 1010601,
  "name": "Fornax Emissary Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97246,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97248,
  "regionID": 1010601,
  "name": "Eridanus Legate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97247,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97249,
  "regionID": 1010601,
  "name": "Horologium-Reticulum Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97248,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97250,
  "regionID": 1010601,
  "name": "Pavo-Indus Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97249,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97251,
  "regionID": 1010601,
  "name": "Grus Administrator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97250,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97252,
  "regionID": 1010601,
  "name": "Phoenix Viceroy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97251,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97263,
  "regionID": 1010602,
  "name": "Tucana Magistrate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97252,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97264,
  "regionID": 1010602,
  "name": "Dorado Vicegerent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97263,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97265,
  "regionID": 1010602,
  "name": "Telescopium Vizier",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97264,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97266,
  "regionID": 1010602,
  "name": "Pictor Aide",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97265,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97267,
  "regionID": 1010602,
  "name": "Reticulum Assistant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97266,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97268,
  "regionID": 1010602,
  "name": "Puppis Secretary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97267,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97269,
  "regionID": 1010602,
  "name": "Canis Major Messenger",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97268,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97270,
  "regionID": 1010602,
  "name": "Laniakea Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97269,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97281,
  "regionID": 1010603,
  "name": "Perseus-Pisces Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97270,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97282,
  "regionID": 1010603,
  "name": "Fornax Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97281,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97283,
  "regionID": 1010603,
  "name": "Eridanus Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97282,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97284,
  "regionID": 1010603,
  "name": "Horologium-Reticulum Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97283,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97285,
  "regionID": 1010603,
  "name": "Pavo-Indus Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97284,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97286,
  "regionID": 1010603,
  "name": "Grus Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97285,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97287,
  "regionID": 1010603,
  "name": "Phoenix Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97286,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97288,
  "regionID": 1010603,
  "name": "Tucana Legate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97287,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97299,
  "regionID": 1010604,
  "name": "Reticulum Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97288,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97300,
  "regionID": 1010604,
  "name": "Telescopium Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97299,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97301,
  "regionID": 1010604,
  "name": "Pictor Assistant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97300,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97302,
  "regionID": 1010604,
  "name": "Reticulum Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97301,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97303,
  "regionID": 1010604,
  "name": "Puppis Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97302,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97304,
  "regionID": 1010604,
  "name": "Canis Major Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97303,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97305,
  "regionID": 1010604,
  "name": "Laniakea Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97304,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97306,
  "regionID": 1010604,
  "name": "Perseus-Pisces Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97305,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97317,
  "regionID": 1010605,
  "name": "Fornax Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97306,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97318,
  "regionID": 1010605,
  "name": "Eridanus Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97317,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97319,
  "regionID": 1010605,
  "name": "Horologium-Reticulum Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97318,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97320,
  "regionID": 1010605,
  "name": "Pavo-Indus Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97319,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97321,
  "regionID": 1010605,
  "name": "Grus Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97320,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97322,
  "regionID": 1010605,
  "name": "Phoenix Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97321,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97323,
  "regionID": 1010605,
  "name": "Tucana Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97322,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97324,
  "regionID": 1010605,
  "name": "Dorado Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97323,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97335,
  "regionID": 1010606,
  "name": "Telescopium Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97324,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97336,
  "regionID": 1010606,
  "name": "Pictor Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97335,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97337,
  "regionID": 1010606,
  "name": "Reticulum Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97336,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97338,
  "regionID": 1010606,
  "name": "Puppis Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97337,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97339,
  "regionID": 1010606,
  "name": "Canis Major Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97338,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97340,
  "regionID": 1010606,
  "name": "Laniakea Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97339,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97341,
  "regionID": 1010606,
  "name": "Perseus-Pisces Administrator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97340,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97342,
  "regionID": 1010606,
  "name": "Fornax Viceroy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97341,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97353,
  "regionID": 1010607,
  "name": "Eridanus Magistrate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97342,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97354,
  "regionID": 1010607,
  "name": "Horologium-Reticulum Vicegerent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97353,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97355,
  "regionID": 1010607,
  "name": "Pavo-Indus Vizier",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97354,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97356,
  "regionID": 1010607,
  "name": "Grus Aide",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97355,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97357,
  "regionID": 1010607,
  "name": "Phoenix Assistant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97356,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97358,
  "regionID": 1010607,
  "name": "Tucana Secretary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97357,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97359,
  "regionID": 1010607,
  "name": "Dorado Messenger",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97358,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97360,
  "regionID": 1010607,
  "name": "Canis Major Administrator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97359,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97371,
  "regionID": 1010608,
  "name": "Pictor Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97360,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97372,
  "regionID": 1010608,
  "name": "Reticulum Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97371,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97373,
  "regionID": 1010608,
  "name": "Puppis Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97372,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97374,
  "regionID": 1010608,
  "name": "Canis Major Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97373,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97375,
  "regionID": 1010608,
  "name": "Laniakea Legate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97374,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97376,
  "regionID": 1010608,
  "name": "Perseus-Pisces Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97375,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97377,
  "regionID": 1010608,
  "name": "Fornax Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97376,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97378,
  "regionID": 1010608,
  "name": "Eridanus Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97377,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97389,
  "regionID": 1010609,
  "name": "Horologium-Reticulum Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97378,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97390,
  "regionID": 1010609,
  "name": "Pavo-Indus Assistant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97389,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97391,
  "regionID": 1010609,
  "name": "Grus Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97390,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97392,
  "regionID": 1010609,
  "name": "Phoenix Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97391,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97393,
  "regionID": 1010609,
  "name": "Tucana Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97392,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97394,
  "regionID": 1010609,
  "name": "Dorado Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97393,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97395,
  "regionID": 1010609,
  "name": "Telescopium Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97394,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97396,
  "regionID": 1010609,
  "name": "Pictor Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97395,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97407,
  "regionID": 1010701,
  "name": "Asgard Liaison",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97396,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97408,
  "regionID": 1010701,
  "name": "Olympus Executive",
  "description": "evolve energy realm 2->3",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97407,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97409,
  "regionID": 1010701,
  "name": "Shangri-La Director",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97408,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97410,
  "regionID": 1010701,
  "name": "Valhalla Chairman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97409,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97411,
  "regionID": 1010701,
  "name": "Elysium CEO",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97410,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97412,
  "regionID": 1010701,
  "name": "Paradise CFO",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97411,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97413,
  "regionID": 1010701,
  "name": "Heaven COO",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97412,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97414,
  "regionID": 1010701,
  "name": "Eden VP",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97413,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97425,
  "regionID": 1010702,
  "name": "Arcadia Manager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97414,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97426,
  "regionID": 1010702,
  "name": "Avalon Supervisor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97425,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97427,
  "regionID": 1010702,
  "name": "Atlantis Engineer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97426,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97428,
  "regionID": 1010702,
  "name": "El Dorado Architect",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97427,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97429,
  "regionID": 1010702,
  "name": "Xanadu Planner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97428,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97430,
  "regionID": 1010702,
  "name": "Utopia Designer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97429,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97431,
  "regionID": 1010702,
  "name": "Eutopia Builder",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97430,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97432,
  "regionID": 1010702,
  "name": "Cloud Nine Constructor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97431,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97443,
  "regionID": 1010703,
  "name": "Empyrean Maker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97432,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97444,
  "regionID": 1010703,
  "name": "The Beyond Artisan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97443,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97445,
  "regionID": 1010703,
  "name": "The Beyonds Craftsman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97444,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97446,
  "regionID": 1010703,
  "name": "Dimension X Technician",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97445,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97447,
  "regionID": 1010703,
  "name": "Plane Y Machinist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97446,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97448,
  "regionID": 1010703,
  "name": "System Z Manufacturer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97447,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97449,
  "regionID": 1010703,
  "name": "Asgard Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97448,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97450,
  "regionID": 1010703,
  "name": "Olympus Officer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97449,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97461,
  "regionID": 1010704,
  "name": "Shangri-La Manager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97450,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97462,
  "regionID": 1010704,
  "name": "Valhalla Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97461,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97463,
  "regionID": 1010704,
  "name": "Elysium Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97462,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97464,
  "regionID": 1010704,
  "name": "Paradise Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97463,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97465,
  "regionID": 1010704,
  "name": "Heaven Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97464,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97466,
  "regionID": 1010704,
  "name": "Eden Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97465,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97467,
  "regionID": 1010704,
  "name": "Arcadia Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97466,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97468,
  "regionID": 1010704,
  "name": "Avalon Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97467,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97479,
  "regionID": 1010705,
  "name": "Atlantis Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97468,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97480,
  "regionID": 1010705,
  "name": "El Dorado Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97479,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97481,
  "regionID": 1010705,
  "name": "Xanadu Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97480,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97482,
  "regionID": 1010705,
  "name": "Utopia Assistant",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97481,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97483,
  "regionID": 1010705,
  "name": "Eutopia Aide",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97482,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97484,
  "regionID": 1010705,
  "name": "Cloud Nine Secretary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97483,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97485,
  "regionID": 1010705,
  "name": "Empyrean Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97484,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97486,
  "regionID": 1010705,
  "name": "The Beyond Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97485,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97497,
  "regionID": 1010706,
  "name": "The Beyonds Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97486,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97498,
  "regionID": 1010706,
  "name": "Dimension X Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97497,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97499,
  "regionID": 1010706,
  "name": "Plane Y Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97498,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97500,
  "regionID": 1010706,
  "name": "System Z Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97499,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97501,
  "regionID": 1010706,
  "name": "Asgard Representative",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97500,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97502,
  "regionID": 1010706,
  "name": "Olympus Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97501,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97503,
  "regionID": 1010706,
  "name": "Shangri-La Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97502,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97504,
  "regionID": 1010706,
  "name": "Valhalla Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97503,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97515,
  "regionID": 1010707,
  "name": "Elysium Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97504,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97516,
  "regionID": 1010707,
  "name": "Paradise Delegate",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97515,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97517,
  "regionID": 1010707,
  "name": "Heaven Consul",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97516,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97518,
  "regionID": 1010707,
  "name": "Eden Ambassador",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97517,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97519,
  "regionID": 1010707,
  "name": "Arcadia Emissary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97518,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97520,
  "regionID": 1010707,
  "name": "Avalon Plenipotentiary",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97519,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97521,
  "regionID": 1010707,
  "name": "Atlantis Attach\xE9",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97520,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97522,
  "regionID": 1010707,
  "name": "El Dorado Agent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97521,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97533,
  "regionID": 1010708,
  "name": "Xanadu Diplomat",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97522,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97534,
  "regionID": 1010708,
  "name": "Utopia Envoy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97533,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97535,
  "regionID": 1010708,
  "name": "Eutopia Clerk",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97534,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97536,
  "regionID": 1010708,
  "name": "Cloud Nine Spokesperson",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97535,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97537,
  "regionID": 1010708,
  "name": "Empyrean Officer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97536,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97538,
  "regionID": 1010708,
  "name": "The Beyond Manager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97537,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97539,
  "regionID": 1010708,
  "name": "The Beyonds Chairman",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97538,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97540,
  "regionID": 1010708,
  "name": "Dimension X CEO",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97539,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97551,
  "regionID": 1010709,
  "name": "Plane Y CFO",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97540,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97552,
  "regionID": 1010709,
  "name": "System Z COO",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97551,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97553,
  "regionID": 1010709,
  "name": "Asgard VP",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97552,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97554,
  "regionID": 1010709,
  "name": "Olympus Manager",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97553,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97555,
  "regionID": 1010709,
  "name": "Shangri-La Supervisor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97554,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97556,
  "regionID": 1010709,
  "name": "Valhalla Engineer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97555,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97557,
  "regionID": 1010709,
  "name": "Elysium Architect",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97556,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97558,
  "regionID": 1010709,
  "name": "Paradise Planner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97557,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97569,
  "regionID": 1010801,
  "name": "Nullifier",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97558,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97570,
  "regionID": 1010801,
  "name": "Vacuumator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97569,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97571,
  "regionID": 1010801,
  "name": "Negator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97570,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97572,
  "regionID": 1010801,
  "name": "Obliterator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97571,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97573,
  "regionID": 1010801,
  "name": "Annihilator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97572,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97574,
  "regionID": 1010801,
  "name": "Disintegrator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97573,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97575,
  "regionID": 1010801,
  "name": "Atomizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97574,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97576,
  "regionID": 1010801,
  "name": "Pulverizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97575,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97587,
  "regionID": 1010802,
  "name": "Disassembler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97576,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97588,
  "regionID": 1010802,
  "name": "Dismantler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97587,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97589,
  "regionID": 1010802,
  "name": "Decimator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97588,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97590,
  "regionID": 1010802,
  "name": "Destroyer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97589,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97591,
  "regionID": 1010802,
  "name": "Eradicator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97590,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97592,
  "regionID": 1010802,
  "name": "Eliminator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97591,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97593,
  "regionID": 1010802,
  "name": "Extirpator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97592,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97594,
  "regionID": 1010802,
  "name": "Exterminator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97593,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97605,
  "regionID": 1010803,
  "name": "Terminator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97594,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97606,
  "regionID": 1010803,
  "name": "Cosmic Cleaner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97605,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97607,
  "regionID": 1010803,
  "name": "Universal Sweeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97606,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97608,
  "regionID": 1010803,
  "name": "Multiversal Sanitizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97607,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97609,
  "regionID": 1010803,
  "name": "Omniversal Sterilizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97608,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97610,
  "regionID": 1010803,
  "name": "Null & Void Maintenance",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97609,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97611,
  "regionID": 1010803,
  "name": "Nullification Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97610,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97612,
  "regionID": 1010803,
  "name": "Void Vacuum",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97611,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97623,
  "regionID": 1010804,
  "name": "Negative Energy Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97612,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97624,
  "regionID": 1010804,
  "name": "Oblivion Bringer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97623,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97625,
  "regionID": 1010804,
  "name": "Annihilation Harbinger",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97624,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97626,
  "regionID": 1010804,
  "name": "Disintegration Specter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97625,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97627,
  "regionID": 1010804,
  "name": "Atom Smasher",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97626,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97628,
  "regionID": 1010804,
  "name": "Particle Pulverizer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97627,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97629,
  "regionID": 1010804,
  "name": "Matter Disassembler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97628,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97630,
  "regionID": 1010804,
  "name": "Dimension Dismantler",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97629,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97641,
  "regionID": 1010805,
  "name": "Reality Decimator",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97630,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97642,
  "regionID": 1010805,
  "name": "Destruction Avatar",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97641,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97643,
  "regionID": 1010805,
  "name": "Eradication Force",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97642,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97644,
  "regionID": 1010805,
  "name": "Elimination Wraith",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97643,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97645,
  "regionID": 1010805,
  "name": "Extirpation Serpent",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97644,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97646,
  "regionID": 1010805,
  "name": "Extermination Behemoth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97645,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97647,
  "regionID": 1010805,
  "name": "Termination Titan",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97646,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97648,
  "regionID": 1010805,
  "name": "Cosmic Cleansing Spirit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97647,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97659,
  "regionID": 1010806,
  "name": "Universal Sweeping Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97648,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97660,
  "regionID": 1010806,
  "name": "Multiverse Sanitation Force",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97659,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97661,
  "regionID": 1010806,
  "name": "Omniverse Sterilization Being",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97660,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97662,
  "regionID": 1010806,
  "name": "Null & Void Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97661,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97663,
  "regionID": 1010806,
  "name": "Nullification Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97662,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97664,
  "regionID": 1010806,
  "name": "Void Vacuum Cleaner",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97663,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97665,
  "regionID": 1010806,
  "name": "Atom Smashing Warden",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97664,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97666,
  "regionID": 1010806,
  "name": "Oblivion Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97665,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97677,
  "regionID": 1010807,
  "name": "Annihilation Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97666,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97678,
  "regionID": 1010807,
  "name": "Disintegration Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97677,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97679,
  "regionID": 1010807,
  "name": "Atom Smashing Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97678,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97680,
  "regionID": 1010807,
  "name": "Particle Pulverization Spirit",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97679,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97681,
  "regionID": 1010807,
  "name": "Matter Disassembly Entity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97680,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97682,
  "regionID": 1010807,
  "name": "Dimension Dismantling Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97681,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97683,
  "regionID": 1010807,
  "name": "Reality Decimation Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97682,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97684,
  "regionID": 1010807,
  "name": "Destruction Custodian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97683,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97695,
  "regionID": 1010808,
  "name": "Eradication Watcher",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97684,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97696,
  "regionID": 1010808,
  "name": "Elimination Overseer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97695,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97697,
  "regionID": 1010808,
  "name": "Extirpation Sentinel",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97696,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97698,
  "regionID": 1010808,
  "name": "Extermination Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97697,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97699,
  "regionID": 1010808,
  "name": "Termination Steward",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97698,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97700,
  "regionID": 1010808,
  "name": "Cosmic Cleansing Keeper",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97699,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97701,
  "regionID": 1010808,
  "name": "Universal Sweeping Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97700,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97702,
  "regionID": 1010808,
  "name": "Multiverse Sanitation Overseer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97701,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97713,
  "regionID": 1010809,
  "name": "Omniverse Sterilization Warden",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97702,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97714,
  "regionID": 1010809,
  "name": "Null & Void Maintenance Specialist",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97713,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97715,
  "regionID": 1010809,
  "name": "Nullification Supervisor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97714,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97716,
  "regionID": 1010809,
  "name": "Void Vacuum Overseer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97715,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97717,
  "regionID": 1010809,
  "name": "Particle Pulverization Overseer",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97716,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97718,
  "regionID": 1010809,
  "name": "Oblivion Caretaker",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97717,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97719,
  "regionID": 1010809,
  "name": "Annihilation Guardian",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97718,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97720,
  "regionID": 1010809,
  "name": "Disintegration Supervisor",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97719,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97731,
  "regionID": 1010901,
  "name": "Chronos",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97720,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97732,
  "regionID": 1010901,
  "name": "The Cosmic Timekeeper; Gaia",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97731,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97733,
  "regionID": 1010901,
  "name": "The Universal Life Force; Erebus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97732,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97734,
  "regionID": 1010901,
  "name": "The Primeval Darkness; Eros",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97733,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97735,
  "regionID": 1010901,
  "name": "The Procreative Urge; Thanatos",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97734,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97736,
  "regionID": 1010901,
  "name": "The Death Drive; Ananke",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97735,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97737,
  "regionID": 1010901,
  "name": "Necessity Incarnate; Nemesis",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97736,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97738,
  "regionID": 1010901,
  "name": "The Retribution Principle; Phanes",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97737,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97749,
  "regionID": 1010902,
  "name": "The Prime Creator; Chaos",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97738,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97750,
  "regionID": 1010902,
  "name": "The First Condition; Nyx",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97749,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97751,
  "regionID": 1010902,
  "name": "Primordial Night; Pontus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97750,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97752,
  "regionID": 1010902,
  "name": "The Unfathomable Deep; Erebus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97751,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97753,
  "regionID": 1010902,
  "name": "The Darkness Below; Tartarus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97752,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97754,
  "regionID": 1010902,
  "name": "The Sunless Pit; Eros",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97753,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97755,
  "regionID": 1010902,
  "name": "The Sexual Desire; Gaia",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97754,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97756,
  "regionID": 1010902,
  "name": "The Earth Mother; Uranus",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97755,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97767,
  "regionID": 1010903,
  "name": "The Starry Sky; Ourea",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97756,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97768,
  "regionID": 1010903,
  "name": "The Lofty Mountains; Okeanos",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97767,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97769,
  "regionID": 1010903,
  "name": "The Earth-Encircling River; Thesis",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97768,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97770,
  "regionID": 1010903,
  "name": "Creation; Physis",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97769,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97771,
  "regionID": 1010903,
  "name": "Growth; Psyche",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97770,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97772,
  "regionID": 1010903,
  "name": "The Soul; Cosmo",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97771,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97773,
  "regionID": 1010903,
  "name": "The Celestial Being; Nebula",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97772,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97774,
  "regionID": 1010903,
  "name": "The Cosmic Mist; Nova",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97773,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97785,
  "regionID": 1010904,
  "name": "The Stellar Explosion; Quasar",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97774,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97786,
  "regionID": 1010904,
  "name": "The Cosmic Beacon; Photon",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97785,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97787,
  "regionID": 1010904,
  "name": "The Light Particle; Graviton",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97786,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97788,
  "regionID": 1010904,
  "name": "The Gravity Carrier; Dark Matter",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97787,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97789,
  "regionID": 1010904,
  "name": "The Hidden Force; Quantum",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97788,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97790,
  "regionID": 1010904,
  "name": "The Fundamental Unit; Singularity",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97789,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97791,
  "regionID": 1010904,
  "name": "The Cosmic Point; Starbirth",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97790,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97792,
  "regionID": 1010904,
  "name": "The Stellar Nursery; Planetsong",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97791,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97803,
  "regionID": 1010905,
  "name": "The Celestial Harmony; Galaxia",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97792,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97804,
  "regionID": 1010905,
  "name": "The Cosmic Dance; Andromeda",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97803,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97805,
  "regionID": 1010905,
  "name": "The Spiral Beauty; Orion",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97804,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97806,
  "regionID": 1010905,
  "name": "The Starry Hunter; Ursa Major",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97805,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97807,
  "regionID": 1010905,
  "name": "The Great Bear; Cassiopeia",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97806,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97808,
  "regionID": 1010905,
  "name": "The Queen of the Sky; Pulsar",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97807,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97809,
  "regionID": 1010905,
  "name": "The Cosmic Lighthouse; Black Hole",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97808,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97810,
  "regionID": 1010905,
  "name": "The Cosmic Abyss; Supernova",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97809,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97821,
  "regionID": 1010906,
  "name": "The Stellar Spectacle; Nebulae",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1104,
  "parentID": 97810,
  "angleFromParent": 270,
  "distanceFromParent": 150,
  "x": 55,
  "y": 250
}, {
  "id": 97822,
  "regionID": 1010906,
  "name": "The Cosmic Canvases; Asteroid",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1106,
  "parentID": 97821,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97823,
  "regionID": 1010906,
  "name": "The Celestial Wanderer; Comet",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1108,
  "parentID": 97822,
  "angleFromParent": 120,
  "distanceFromParent": 60
}, {
  "id": 97824,
  "regionID": 1010906,
  "name": "The Cosmic Visitor; Hubble",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1110,
  "parentID": 97823,
  "angleFromParent": 150,
  "distanceFromParent": 60
}, {
  "id": 97825,
  "regionID": 1010906,
  "name": "The Cosmic Observer; Galaxy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1112,
  "parentID": 97824,
  "angleFromParent": 360,
  "distanceFromParent": 60
}, {
  "id": 97826,
  "regionID": 1010906,
  "name": "The Cosmic Island; Supercluster",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1114,
  "parentID": 97825,
  "angleFromParent": 0,
  "distanceFromParent": 60
}, {
  "id": 97827,
  "regionID": 1010906,
  "name": "The Cosmic Confluence; Void",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "zoneType": "progressionBoss",
  "prodBase": 1,
  "baseConquestTime": 1116,
  "parentID": 97826,
  "angleFromParent": 90,
  "distanceFromParent": 60
}, {
  "id": 97828,
  "regionID": 1010906,
  "name": "The Cosmic Emptiness; Dark Energy",
  "description": "note",
  "note": "",
  "costType": "force",
  "costBase": 100,
  "prodType": "alphaShard",
  "prodBase": 1,
  "baseConquestTime": 1118,
  "zoneType": "boss",
  "parentID": 97827,
  "angleFromParent": 120,
  "distanceFromParent": 60
}];
},{}],"assets/gameData/*.json":[function(require,module,exports) {
module.exports = {
  "achieveData": require("./achieveData.json"),
  "achieveSetData": require("./achieveSetData.json"),
  "artifactData": require("./artifactData.json"),
  "essenceUpgradeData": require("./essenceUpgradeData.json"),
  "fighterData": require("./fighterData.json"),
  "forgeUpgradeData": require("./forgeUpgradeData.json"),
  "generatorData": require("./generatorData.json"),
  "interfaceElementData": require("./interfaceElementData.json"),
  "radianceUpgradeData": require("./radianceUpgradeData.json"),
  "realmUpgradeData": require("./realmUpgradeData.json"),
  "tabData": require("./tabData.json"),
  "skillData": require("./skillData.json"),
  "regionData": require("./regionData.json"),
  "worldData": require("./worldData.json"),
  "trainingData": require("./trainingData.json"),
  "zoneData": require("./zoneData.json")
};
},{"./achieveData.json":"assets/gameData/achieveData.json","./achieveSetData.json":"assets/gameData/achieveSetData.json","./artifactData.json":"assets/gameData/artifactData.json","./essenceUpgradeData.json":"assets/gameData/essenceUpgradeData.json","./fighterData.json":"assets/gameData/fighterData.json","./forgeUpgradeData.json":"assets/gameData/forgeUpgradeData.json","./generatorData.json":"assets/gameData/generatorData.json","./interfaceElementData.json":"assets/gameData/interfaceElementData.json","./radianceUpgradeData.json":"assets/gameData/radianceUpgradeData.json","./realmUpgradeData.json":"assets/gameData/realmUpgradeData.json","./tabData.json":"assets/gameData/tabData.json","./skillData.json":"assets/gameData/skillData.json","./regionData.json":"assets/gameData/regionData.json","./worldData.json":"assets/gameData/worldData.json","./trainingData.json":"assets/gameData/trainingData.json","./zoneData.json":"assets/gameData/zoneData.json"}],"assets/icons/achievementIcons/AchievementIcon_01.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_01.72696ffb.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_02.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_02.825bf6af.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_03.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_03.f60b16db.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_05.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_05.b43e8556.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_04.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_04.9b54cb1c.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_06.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_06.6531bb79.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_07.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_07.454d7ceb.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_08.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_08.ba368459.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_10.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_10.317665ae.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_11.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_11.675e9e99.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_09.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_09.4ff17546.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_12.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_12.e5671e31.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_13.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_13.4998c81c.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_14.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_14.1b6f6695.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_16.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_16.9add6b78.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_15.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_15.39bdc014.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_17.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_17.0e39c093.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_18.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_18.9ac65abe.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_19.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_19.02449b0f.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_20.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_20.d8b1f505.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_21.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_21.deb54bed.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_22.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_22.e22c93ad.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_23.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_23.73d610fd.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_25.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_25.212fc8d8.png";
},{}],"assets/icons/achievementIcons/AchievementIcon_24.png":[function(require,module,exports) {
module.exports = "/AchievementIcon_24.44dda674.png";
},{}],"assets/icons/achievementIcons/*.png":[function(require,module,exports) {
module.exports = {
  "AchievementIcon_01": require("./AchievementIcon_01.png"),
  "AchievementIcon_02": require("./AchievementIcon_02.png"),
  "AchievementIcon_03": require("./AchievementIcon_03.png"),
  "AchievementIcon_05": require("./AchievementIcon_05.png"),
  "AchievementIcon_04": require("./AchievementIcon_04.png"),
  "AchievementIcon_06": require("./AchievementIcon_06.png"),
  "AchievementIcon_07": require("./AchievementIcon_07.png"),
  "AchievementIcon_08": require("./AchievementIcon_08.png"),
  "AchievementIcon_10": require("./AchievementIcon_10.png"),
  "AchievementIcon_11": require("./AchievementIcon_11.png"),
  "AchievementIcon_09": require("./AchievementIcon_09.png"),
  "AchievementIcon_12": require("./AchievementIcon_12.png"),
  "AchievementIcon_13": require("./AchievementIcon_13.png"),
  "AchievementIcon_14": require("./AchievementIcon_14.png"),
  "AchievementIcon_16": require("./AchievementIcon_16.png"),
  "AchievementIcon_15": require("./AchievementIcon_15.png"),
  "AchievementIcon_17": require("./AchievementIcon_17.png"),
  "AchievementIcon_18": require("./AchievementIcon_18.png"),
  "AchievementIcon_19": require("./AchievementIcon_19.png"),
  "AchievementIcon_20": require("./AchievementIcon_20.png"),
  "AchievementIcon_21": require("./AchievementIcon_21.png"),
  "AchievementIcon_22": require("./AchievementIcon_22.png"),
  "AchievementIcon_23": require("./AchievementIcon_23.png"),
  "AchievementIcon_25": require("./AchievementIcon_25.png"),
  "AchievementIcon_24": require("./AchievementIcon_24.png")
};
},{"./AchievementIcon_01.png":"assets/icons/achievementIcons/AchievementIcon_01.png","./AchievementIcon_02.png":"assets/icons/achievementIcons/AchievementIcon_02.png","./AchievementIcon_03.png":"assets/icons/achievementIcons/AchievementIcon_03.png","./AchievementIcon_05.png":"assets/icons/achievementIcons/AchievementIcon_05.png","./AchievementIcon_04.png":"assets/icons/achievementIcons/AchievementIcon_04.png","./AchievementIcon_06.png":"assets/icons/achievementIcons/AchievementIcon_06.png","./AchievementIcon_07.png":"assets/icons/achievementIcons/AchievementIcon_07.png","./AchievementIcon_08.png":"assets/icons/achievementIcons/AchievementIcon_08.png","./AchievementIcon_10.png":"assets/icons/achievementIcons/AchievementIcon_10.png","./AchievementIcon_11.png":"assets/icons/achievementIcons/AchievementIcon_11.png","./AchievementIcon_09.png":"assets/icons/achievementIcons/AchievementIcon_09.png","./AchievementIcon_12.png":"assets/icons/achievementIcons/AchievementIcon_12.png","./AchievementIcon_13.png":"assets/icons/achievementIcons/AchievementIcon_13.png","./AchievementIcon_14.png":"assets/icons/achievementIcons/AchievementIcon_14.png","./AchievementIcon_16.png":"assets/icons/achievementIcons/AchievementIcon_16.png","./AchievementIcon_15.png":"assets/icons/achievementIcons/AchievementIcon_15.png","./AchievementIcon_17.png":"assets/icons/achievementIcons/AchievementIcon_17.png","./AchievementIcon_18.png":"assets/icons/achievementIcons/AchievementIcon_18.png","./AchievementIcon_19.png":"assets/icons/achievementIcons/AchievementIcon_19.png","./AchievementIcon_20.png":"assets/icons/achievementIcons/AchievementIcon_20.png","./AchievementIcon_21.png":"assets/icons/achievementIcons/AchievementIcon_21.png","./AchievementIcon_22.png":"assets/icons/achievementIcons/AchievementIcon_22.png","./AchievementIcon_23.png":"assets/icons/achievementIcons/AchievementIcon_23.png","./AchievementIcon_25.png":"assets/icons/achievementIcons/AchievementIcon_25.png","./AchievementIcon_24.png":"assets/icons/achievementIcons/AchievementIcon_24.png"}],"components/Features/Achievements/Achievement.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Achievement = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Achievement(eventManager, id, name, note, iconFilename, description, unlockCategory, conditionType, dependentID, radianceReward, triggerType, triggerValue, conditionValue, setID) {
    var _this;
    _classCallCheck(this, Achievement);
    _this = _callSuper(this, Achievement, [eventManager, id, name, note, description, (0, _decimal.DEC)(0), (0, _decimal.DEC)(1), null, null, null, null, null, null, false]);
    _this.featureType = "achievement";
    _this.unlockCategory = unlockCategory;
    _this.conditionType = conditionType;
    _this.conditionValue = conditionValue;
    _this.triggerType = triggerType;
    _this.triggerValue = triggerValue;
    _this.dependentID = dependentID;
    _this.dependent = null;
    _this.radianceReward = (0, _decimal.DEC)(radianceReward);
    _this.isClaimable = false;
    _this.isClaimed = false;
    _this.setID = setID;
    _this.set = null;
    _this.iconFilename = iconFilename;
    _this.image = null;
    return _this;
  }
  _inherits(Achievement, _GameFeature);
  return _createClass(Achievement, [{
    key: "setActive",
    value: function setActive() {
      this.isClaimable = true;
      this.set.visible = true;
      _get(_getPrototypeOf(Achievement.prototype), "setActive", this).call(this);
    }
  }, {
    key: "claim",
    value: function claim() {
      this.level = this.level.plus(1);
      this.isClaimed = true;
      this.isClaimable = false;
      this.active = true;
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: 'radiance',
        value: this.radianceReward,
        operation: 'add'
      });
      this.set.checkCompletion();
      var _iterator = _createForOfIteratorHelper(this.observers),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var observer = _step.value;
          observer.active = true;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.updateObservers();
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Achievements/AchievementSet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var AchievementSet = exports.default = /*#__PURE__*/function (_GameFeature) {
  function AchievementSet(eventManager, id, name, color, bonusType, bonusValue) {
    var _this;
    _classCallCheck(this, AchievementSet);
    _this = _callSuper(this, AchievementSet, [eventManager, id, name, "", (0, _decimal.DEC)(0), (0, _decimal.DEC)(1), null, null, null, null, null, null, false]);
    _this.eventManager = eventManager;
    _this.id = id;
    _this.name = name;
    _this.color = color;
    _this.achievements = [];
    _this.bonusType = bonusType;
    _this.bonusValue = bonusValue;
    _this.completed = false;
    _this.visible = false;
    return _this;
  }
  _inherits(AchievementSet, _GameFeature);
  return _createClass(AchievementSet, [{
    key: "checkCompletion",
    value: function checkCompletion() {
      // check if all achievements are claimed
      if (this.achievements.every(function (a) {
        return a.isClaimed;
      })) {
        this.completed = true;
        this.applyBonus();
      }
    }
  }, {
    key: "applyBonus",
    value: function applyBonus() {
      if (this.completed) {
        if (this.bonusType !== "mod") {
          this.eventManager.dispatchEvent('updatePropertyValue', {
            property: this.bonusType,
            value: this.bonusValue,
            operation: 'add'
          });
        } else {
          this.levelUp("manual", (0, _decimal.DEC)(1));
          this.updateObservers();
        }
      }
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Builder/AchievementBuilder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
var _ = _interopRequireDefault(require("../../assets/icons//achievementIcons/*.png"));
var _achieveData = _interopRequireDefault(require("../../assets/gameData/achieveData.json"));
var _achieveSetData = _interopRequireDefault(require("../../assets/gameData/achieveSetData.json"));
var _Achievement = _interopRequireDefault(require("../Features/Achievements/Achievement.js"));
var _AchievementSet = _interopRequireDefault(require("../Features/Achievements/AchievementSet.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AchievementBuilder = exports.default = /*#__PURE__*/function () {
  function AchievementBuilder(builder) {
    _classCallCheck(this, AchievementBuilder);
    this.builder = builder;
    this.achievements = [];
    this.achievementSets = [];
  }
  return _createClass(AchievementBuilder, [{
    key: "initAchievements",
    value: function initAchievements() {
      this.initAchievementObjects();
      this.initAchievementSets();
      this.assignAchievementsToSets();
    }
  }, {
    key: "initAchievementObjects",
    value: function initAchievementObjects() {
      var _this = this;
      var achievementUnlockData = [];
      var unlockID = 6501;
      _achieveData.default.forEach(function (data) {
        var id = data.id,
          name = data.name,
          note = data.note,
          iconFilename = data.iconFilename,
          description = data.description,
          unlockCategory = data.unlockCategory,
          conditionType = data.conditionType,
          dependentID = data.dependentID,
          radianceReward = data.radianceReward,
          triggerType = data.triggerType,
          triggerCategory = data.triggerCategory,
          conditionValue = data.conditionValue,
          setID = data.setID,
          mods = data.mods;

        //allows for huge values defined as strings
        var conditionValueDecimal = (0, _decimal.DEC)(conditionValue);
        var achievement = new _Achievement.default(_this.builder.eventManager, id, name, note, iconFilename, description, unlockCategory, conditionType, dependentID, radianceReward, triggerType, triggerCategory, conditionValueDecimal, setID);
        if (achievement.targetID) {
          achievement.target = _this.builder.findObjectById(achievement.targetID);
        }
        if (achievement.dependentID) {
          achievement.dependent = _this.builder.findObjectById(achievement.dependentID);
        }
        if (achievement.iconFilename) {
          achievement.image = _.default[iconFilename];
        } else {
          // console.error("achievement has no corresponding image for " + achievement.id);
        }

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            modData.id = achievement.id + 1000;
            modData.name = "achievementMod" + achievement.id;
            if (!modData.sourceID) {
              modData.sourceID = achievement.id;
            }
            _this.builder.modsWaiting.push(modData);
            if (achievement.dependent) {
              achievement.description = "<b>Condition:</b> ".concat(achievement.dependent.name, " ").concat(achievement.conditionType, " ").concat(achievement.conditionValue);
            } else {
              achievement.description = "<b>Condition:</b> ".concat((0, _decimal.DEC)(achievement.conditionValue).toFixed(0), " ").concat(achievement.conditionType);
            }
            achievement.description += "\n<b>Reward:</b> ".concat(modData.targetType, " ").concat(modData.type, " ").concat(modData.runningCalcType, " ").concat(modData.value, " ");
          });
        }

        //populate unlocks for each achievement, to be processed after loop
        achievementUnlockData.push({
          id: unlockID,
          category: achievement.unlockCategory,
          type: null,
          dependentID: achievement.dependentID,
          targetID: achievement.id,
          conditionType: achievement.conditionType,
          conditionValue: achievement.conditionValue,
          triggerType: achievement.triggerType,
          triggerValue: achievement.triggerValue
        });
        unlockID++;
        _this.achievements.push(achievement);
        _this.builder.gameManager.gameContent.achievements.push(achievement);
        _this.builder.gameManager.gameContent.achievementsGrid.achievements.push(achievement);
        _this.builder.gameManager.gameContent.idToObjectMap.set(id, achievement);
      });
      this.builder.createUnlocks(achievementUnlockData);
    }
  }, {
    key: "initAchievementSets",
    value: function initAchievementSets() {
      var _this2 = this;
      _achieveSetData.default.forEach(function (data) {
        var id = data.id,
          name = data.name,
          color = data.color,
          bonusType = data.bonusType,
          bonusValue = data.bonusValue,
          mods = data.mods;
        var achievementSet = new _AchievementSet.default(_this2.builder.eventManager, id, name, color, bonusType, bonusValue);

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            modData.id = achievementSet.id + 200;
            modData.name = "achieveSetMod" + achievementSet.id;
            if (!modData.sourceID) {
              modData.sourceID = achievementSet.id;
            }
            _this2.builder.modsWaiting.push(modData);

            //create artifact description based off of mod values
            achievementSet.description = "".concat(modData.targetType, " ").concat(modData.type, " ").concat(modData.runningCalcType, " ").concat(modData.value);
          });
        }
        _this2.achievementSets.push(achievementSet);
        _this2.builder.gameManager.gameContent.achievementSets.push(achievementSet);
        _this2.builder.gameManager.gameContent.achievementsGrid.achievementSets.push(achievementSet);
        _this2.builder.gameManager.gameContent.idToObjectMap.set(id, achievementSet);
      });
    }
  }, {
    key: "assignAchievementsToSets",
    value: function assignAchievementsToSets() {
      var _iterator = _createForOfIteratorHelper(this.achievements),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var achievement = _step.value;
          var achievementSet = this.builder.findObjectById(achievement.setID);
          achievement.set = achievementSet;
          achievementSet.achievements.push(achievement);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js","../../assets/icons//achievementIcons/*.png":"assets/icons/achievementIcons/*.png","../../assets/gameData/achieveData.json":"assets/gameData/achieveData.json","../../assets/gameData/achieveSetData.json":"assets/gameData/achieveSetData.json","../Features/Achievements/Achievement.js":"components/Features/Achievements/Achievement.js","../Features/Achievements/AchievementSet.js":"components/Features/Achievements/AchievementSet.js"}],"components/Features/Skills/Skill.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _GameFeature2 = _interopRequireDefault(require("../../Core/GameFeature.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Skill = exports.default = /*#__PURE__*/function (_GameFeature) {
  function Skill(eventManager, id, name, skillType, note, description, color, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, unlocked, connections) {
    var _this;
    _classCallCheck(this, Skill);
    _this = _callSuper(this, Skill, [eventManager, id, name, note, description,
    // description
    level,
    // level
    maxLevel,
    // maxLevel
    costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active]);
    _this.featureType = "skill";
    _this.skillType = skillType;
    _this.connections = connections;
    _this.connectionSkillIds = [];
    _this.unlocked = unlocked;
    _this.unlockingID;
    _this.unlockedConnections = [];
    _this.color = color;
    return _this;
  }
  _inherits(Skill, _GameFeature);
  return _createClass(Skill, [{
    key: "setUnlocked",
    value: function setUnlocked() {
      this.unlocked = true;
    }
  }, {
    key: "updateFeatureValues",
    value: function updateFeatureValues(isNewLvl, gameManager) {
      this.costNextSingle = this.calcCostNextSingle();
      this.prodNextSingle = this.calcProdNextSingle();

      //dont update values if inactive || (level 0 & not being levelled up)
      if (!this.active || this.level.eq(0) && !isNewLvl) {
        return;
      }
      // handle if an active feature's multiplier is being updated but not its level
      // aka being upgraded or a mod is activated
      // also handles evolutions
      else if (this.active && !isNewLvl) {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
      //handle features that are being levelled manually or generator autopurchase
      else {
        this.prodPrevious = this.prodCurrentGlobal;
        this.prodCurrentGlobal = this.calculateProdN(this.level, (0, _decimal.DEC)(0));
      }
    }
  }, {
    key: "refundSkill",
    value: function refundSkill() {
      this.level = (0, _decimal.DEC)(0);
      this.manualLevel = (0, _decimal.DEC)(0);
      this.costNextSingle = this.costBase;
      // this.active = false;

      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: this.costType,
        value: this.costBase,
        operation: 'add'
      });
      var _iterator = _createForOfIteratorHelper(this.unlockedConnections),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var connection = _step.value;
          this.eventManager.dispatchEvent('reEngage-unlock', {
            detail: {
              id: connection.id
            }
          });
          connection.active = false;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.deactivateObservers();
    }
  }]);
}(_GameFeature2.default);
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","../../Core/GameFeature.js":"components/Core/GameFeature.js"}],"components/Features/Skills/SkillNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var SkillNode = exports.default = /*#__PURE__*/_createClass(function SkillNode(skill, x, y) {
  _classCallCheck(this, SkillNode);
  this.skill = skill;
  this.x = x;
  this.y = y;
  this.connections = {
    north: null,
    east: null,
    south: null,
    west: null
  };
});
},{}],"components/Builder/SkillBuilder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _skillData = _interopRequireDefault(require("../../assets/gameData/skillData.json"));
var _Unlock = _interopRequireDefault(require("../Core/Unlock.js"));
var _Skill = _interopRequireDefault(require("../Features/Skills/Skill.js"));
var _SkillNode = _interopRequireDefault(require("../Features/Skills/SkillNode.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SkillBuilder = exports.default = /*#__PURE__*/function () {
  function SkillBuilder(builder) {
    _classCallCheck(this, SkillBuilder);
    this.builder = builder;
    this.skills = [];
  }
  return _createClass(SkillBuilder, [{
    key: "initSkills",
    value: function initSkills() {
      var _this = this;
      _skillData.default.forEach(function (data) {
        var id = data.id,
          name = data.name,
          _data$skillType = data.skillType,
          skillType = _data$skillType === void 0 ? "normal" : _data$skillType,
          note = data.note,
          description = data.description,
          color = data.color,
          level = data.level,
          maxLevel = data.maxLevel,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          active = data.active,
          _data$unlocked = data.unlocked,
          unlocked = _data$unlocked === void 0 ? true : _data$unlocked,
          connections = data.connections,
          mods = data.mods;
        var skill = new _Skill.default(_this.builder.eventManager, id, name, skillType, note, description, color, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, unlocked, connections);

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            modData.id = skill.id + 1000;
            modData.name = "skillMod" + skill.id;
            if (!modData.sourceID) {
              modData.sourceID = skill.id;
            }
            _this.builder.modsWaiting.push(modData);

            // discontinued this until skills have multiple levels again
            // skill.description = `${modData.targetType} ${modData.type} ${modData.runningCalcType} (${modData.value} ${modData.sourceCalcType} skill level)`;

            //create skill description based off of mod values
            skill.description = "".concat(modData.targetType, " ").concat(modData.type, " ").concat(modData.runningCalcType, " ").concat(modData.value);
          });
        }
        _this.skills.push(skill);
        _this.builder.gameManager.gameContent.skillTree.skills.push(skill);
        _this.builder.gameManager.gameContent.skills.push(skill);
        _this.builder.gameManager.gameContent.idToObjectMap.set(id, skill);
      });
      this.buildSkillTree();
    }
  }, {
    key: "buildSkillTree",
    value: function buildSkillTree() {
      var _this2 = this;
      var baseSkill = this.builder.gameManager.gameContent.skillTree.skills.find(function (s) {
        return s.id === 40001;
      });
      var baseSkillNode = new _SkillNode.default(baseSkill, 100, 200);
      baseSkill.node = baseSkillNode;
      var processConnectedNodes = function processConnectedNodes(skill) {
        var _loop = function _loop() {
          var connectedSkillId = skill.connections[direction];
          var connectedSkill = _this2.builder.gameManager.gameContent.skillTree.skills.find(function (s) {
            return s.id === connectedSkillId;
          });
          skill.connectionSkillIds.push(connectedSkillId);
          if (connectedSkill && !connectedSkill.node) {
            var position = _this2.calculateNodePosition(skill.node, direction);
            var skillNode = new _SkillNode.default(connectedSkill, position.x, position.y);
            connectedSkill.node = skillNode;
            processConnectedNodes(connectedSkill);
          }
        };
        for (var direction in skill.connections) {
          _loop();
        }
      };
      processConnectedNodes(baseSkill);
      this.builder.gameManager.gameContent.skillTree.skills.forEach(function (skill) {
        var _loop2 = function _loop2() {
          var targetSkillId = skill.connections[direction];
          var targetSkill = _this2.builder.gameManager.gameContent.skillTree.skills.find(function (s) {
            return s.id === targetSkillId;
          });
          if (targetSkill) {
            skill.node.connections[direction] = targetSkill.node;
            targetSkill.node.connections[_this2.oppositeDirection(direction)] = skill.node;
          }
        };
        for (var direction in skill.connections) {
          _loop2();
        }
      });
    }
  }, {
    key: "initSkillConnectionUnlocks",
    value: function initSkillConnectionUnlocks() {
      var _this3 = this;
      var unlockID = 42001;
      var unlocksDone = [];
      this.skills.forEach(function (skill) {
        var _loop3 = function _loop3(direction) {
          var unlock = new _Unlock.default(unlockID, "id", null, skill.id, skill.connections[direction], "level", 1, "setActive", null);

          //don't push unlock if a target skill is already unlocked (to handle bidirectional unlock directions) - also don't create any unlock for sk1
          if (!unlocksDone.some(function (existingUnlock) {
            return existingUnlock.targetID === unlock.targetID;
          }) && unlock.targetID !== 40001) {
            //don't auto-create unlocks for otherwise unlocked skill paths
            if (!Array.from(_this3.builder.unlocks.values()).find(function (u) {
              return u.targetID === skill.connections[direction];
            })) {
              //save reference to unlock on the unlocked skill for refunding skill and re-engaging unlock
              var targetSkill = _this3.builder.gameManager.findObjectById(skill.connections[direction]);
              targetSkill.unlockingID = unlockID;
              skill.unlockedConnections.push(targetSkill);
              _this3.builder.unlocks.set(unlockID, unlock);
              _this3.builder.gameManager.unlockManager.unlocks.set(unlockID, unlock);
              _this3.builder.gameManager.gameContent.unlocks.set(unlockID, unlock);
              _this3.builder.gameManager.gameContent.idToObjectMap.set(unlockID, unlock);
              unlockID++;
            }
          }
        };
        for (var direction in skill.connections) {
          _loop3(direction);
        }
      });
    }
  }, {
    key: "calculateNodePosition",
    value: function calculateNodePosition(skillNode, direction) {
      var fixedLineLength = 50; // Adjust this value to control the spacing between nodes

      var x, y;
      switch (direction) {
        case 'north':
          x = skillNode.x;
          y = skillNode.y - fixedLineLength;
          break;
        case 'south':
          x = skillNode.x;
          y = skillNode.y + fixedLineLength;
          break;
        case 'east':
          x = skillNode.x + fixedLineLength;
          y = skillNode.y;
          break;
        case 'west':
          x = skillNode.x - fixedLineLength;
          y = skillNode.y;
          break;
      }
      return {
        x: x,
        y: y
      };
    }

    // Helper function to get the opposite direction
  }, {
    key: "oppositeDirection",
    value: function oppositeDirection(direction) {
      switch (direction) {
        case 'north':
          return 'south';
        case 'south':
          return 'north';
        case 'east':
          return 'west';
        case 'west':
          return 'east';
        default:
          return null;
      }
    }
  }]);
}();
},{"../../assets/gameData/skillData.json":"assets/gameData/skillData.json","../Core/Unlock.js":"components/Core/Unlock.js","../Features/Skills/Skill.js":"components/Features/Skills/Skill.js","../Features/Skills/SkillNode.js":"components/Features/Skills/SkillNode.js"}],"components/Builder/Builder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
var _ModTree = _interopRequireDefault(require("../Core/ModTree.js"));
var _Mod = _interopRequireDefault(require("../Core/Mod.js"));
var _Unlock = _interopRequireDefault(require("../Core/Unlock.js"));
var _PseudoFeature = _interopRequireDefault(require("../Core/PseudoFeature.js"));
var _Realm = _interopRequireDefault(require("../Features/Training/Realm.js"));
var _Training = _interopRequireDefault(require("../Features/Training/Training.js"));
var _Generator = _interopRequireDefault(require("../Features/Training/Generator.js"));
var _GeneratorChain = _interopRequireDefault(require("../Features/Training/GeneratorChain.js"));
var _RealmUpgrade = _interopRequireDefault(require("../Features/Upgrades/RealmUpgrade.js"));
var _ForgeUpgrade = _interopRequireDefault(require("../Features/Upgrades/ForgeUpgrade.js"));
var _RadianceUpgrade = _interopRequireDefault(require("../Features/Upgrades/RadianceUpgrade.js"));
var _EssenceUpgrade = _interopRequireDefault(require("../Features/Upgrades/EssenceUpgrade.js"));
var _Artifact = _interopRequireDefault(require("../Features/Odyssey/Artifact.js"));
var _Zone = _interopRequireDefault(require("../Features/Odyssey/Zone.js"));
var _Region = _interopRequireDefault(require("../Features/Odyssey/Region.js"));
var _World = _interopRequireDefault(require("../Features/Odyssey/World.js"));
var _Fighter = _interopRequireDefault(require("../Features/Tournament/Fighter.js"));
var _FighterTier = _interopRequireDefault(require("../Features/Tournament/FighterTier.js"));
var _Tournament = _interopRequireDefault(require("../Features/Tournament/Tournament.js"));
var _ = _interopRequireDefault(require("../../assets/maps/*.jpg"));
var _2 = _interopRequireDefault(require("../../assets/gameData/*.json"));
var _AchievementBuilder = _interopRequireDefault(require("./AchievementBuilder.js"));
var _SkillBuilder = _interopRequireDefault(require("./SkillBuilder.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // import Skill from '../Features/Skills/Skill.js';
// import SkillNode from '../Features/Skills/SkillNode.js';
var Builder = exports.default = /*#__PURE__*/function () {
  function Builder(eventManager, gameManager) {
    _classCallCheck(this, Builder);
    this.eventManager = eventManager;
    this.gameManager = gameManager;

    //storage
    this.trainings = [];
    this.realmUpgrades = [];
    this.essenceUpgrades = [];
    this.forgeUpgrades = [];
    this.radianceUpgrades = [];
    this.realms = [];
    // this.skills = [];
    // this.achievements = [];
    // this.achievementSets = [];
    this.generatorChains = [];
    this.generators = [];
    this.worlds = [];
    this.regions = [];
    this.regions = [];
    this.zones = [];
    this.artifacts = [];
    this.tournament;
    this.fighterTiers = [];
    this.fighters = [];
    this.modsWaiting = [];
    this.mods = [];
    this.unlocks = new Map();
    this.modTrees = [];
    this.skillBuilder = new _SkillBuilder.default(this);
    this.achievementBuilder = new _AchievementBuilder.default(this);
    this.build();

    //testing
    //this.printTrainingInfo();
    //this.printUpgradeInfo();
    //this.printZoneInfo();
    //this.printUnlockInfo();
    // this.printWorldRegionZoneHeirarchy();
  }
  return _createClass(Builder, [{
    key: "findObjectById",
    value: function findObjectById(id) {
      var object = this.gameManager.gameContent.idToObjectMap.get(id);
      return object;
    }
  }, {
    key: "addObjectToIdMap",
    value: function addObjectToIdMap(id, object) {
      if (this.gameManager.gameContent.idToObjectMap.has(id)) {
        console.error("Duplicate ID found in idToObjectMap: ".concat(id));
      } else {
        this.gameManager.gameContent.idToObjectMap.set(id, object);
      }
    }
  }, {
    key: "build",
    value: function build() {
      this.initializeGameFeatures();
      this.populateFeatures();
      this.distributeModsAndReferences();
    }
  }, {
    key: "initializeGameFeatures",
    value: function initializeGameFeatures() {
      this.initTrainings();
      this.initGenerators();
      this.initAllUpgradeTypes();
      this.initArtifacts();
      this.initRealms();
      this.initWorlds();
      this.initRegions();
      this.initZones();
      this.initTournament();
      this.initFighters();
      this.initFighterTiers();
      // this.initSkills();
      this.skillBuilder.initSkills();
      this.achievementBuilder.initAchievements();
    }
  }, {
    key: "populateFeatures",
    value: function populateFeatures() {
      this.pushZonesToRegions();
      this.pushRegionsToWorlds();
      this.dynamicallySetZoneCosts();
      this.pushTrainingsToRealms();
      this.pushUpgradesToRealms();
      this.pushGeneratorsToRealms();
      this.populateMilestones();
      this.initRebirthModAndPseudoFeature();
      this.initHeadbandModsAndPseudoFeature();
      this.initUnlocks();
    }
  }, {
    key: "distributeModsAndReferences",
    value: function distributeModsAndReferences() {
      this.createModObjects();
      this.assignModPriorities();
      this.assignModReferences();
      this.assignUnlockReferences();
      this.assignEssenceUpgradeReferences();
      this.registerModsToSources();
      this.registerModObserversAndTrees();
      this.initModTrees();
    }
  }, {
    key: "initUnlocks",
    value: function initUnlocks() {
      this.initForceRealmUnlocks();
      this.initWisdomRealmUnlocks();
      this.initEnergyRealmUnlocks();
      this.initDivineRealmUnlocks();
      this.initForgeUpgradeUnlocks();
      this.initEssenceUpgradeUnlocks();
      this.initLegendaryBossUnlocks();
      this.initHeadbandModUnlocks();
      this.initFighterTierUnlocks();
      this.initArtifactUnlocks();
      this.initTabUnlocks();
      this.initRebirthUnlocks();

      //skillconnections last so that locked paths are not auto-added (this checks for existing unlocks)
      this.skillBuilder.initSkillConnectionUnlocks();
    }
  }, {
    key: "initAllUpgradeTypes",
    value: function initAllUpgradeTypes() {
      this.initRealmUpgrades();
      this.initforgeUpgrades();
      this.initEssenceUpgrades();
      this.initRadianceUpgrades();
    }
  }, {
    key: "createGenerators",
    value: function createGenerators(generatorData) {
      var _this = this;
      generatorData.forEach(function (data) {
        var id = data.id,
          genChainID = data.genChainID,
          evolutionTier = data.evolutionTier,
          name = data.name,
          note = data.note,
          description = data.description,
          level = data.level,
          _data$maxLevel = data.maxLevel,
          maxLevel = _data$maxLevel === void 0 ? (0, _decimal.DEC)(Infinity) : _data$maxLevel,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          active = data.active,
          evolutions = data.evolutions;
        var generator = new _Generator.default(_this.eventManager, id, genChainID, evolutionTier, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, evolutions);
        _this.generators.push(generator);
        _this.gameManager.gameContent.generators.push(generator);
        _this.addObjectToIdMap(id, generator);
        if (evolutions) {
          evolutions.forEach(function (evolveData) {
            generator.evolutions.push(evolveData);
          });
        }

        //push generators to generatorchains
        var genChain = _this.generatorChains.find(function (genChain) {
          return genChain.id === generator.genChainID;
        });
        if (genChain) {
          genChain.generators.push(generator);
          generator.parentGenChain = genChain;
          generator.realmID = genChain.realmID;
        }
      });
    }
  }, {
    key: "pushGeneratorsToRealms",
    value: function pushGeneratorsToRealms() {
      var _this2 = this;
      this.generatorChains.forEach(function (chain) {
        var realm = _this2.realms.find(function (realm) {
          return realm.id === chain.realmID;
        });
        if (realm) {
          realm.generatorChains.push(chain);
          chain.realm = realm; // Assign the realm reference to the generator's realm value
        } else {
          console.error("No realm found with id ".concat(chain.realmID, " for generatorChain ").concat(chain.name));
        }
      });
    }
  }, {
    key: "initLegendaryBossUnlocks",
    value: function initLegendaryBossUnlocks() {
      var _this3 = this;
      // Direct unlock assignment to legendary bosses.  if boss doesnt exist, prints an error
      var legendaryBossUnlocks = [
      //artifact
      {
        category: "id",
        dependentID: 5010,
        conditionType: "level",
        conditionValue: (0, _decimal.DEC)(1),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 90301
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e10),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 90507
      },
      //stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "energy",
        conditionValue: (0, _decimal.DEC)(1e5),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 90609
      },
      // font of wisdom legendary boss - unlocks wisdom tab
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e20),
        triggerType: "setUnlocked",
        triggerValue: null,
        targetID: 90912
      },
      //stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e20),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 91307
      },
      //headband
      {
        category: "id",
        type: null,
        dependentID: 800,
        conditionType: "level",
        conditionValue: (0, _decimal.DEC)(3),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 91404
      },
      //artifact
      {
        category: "id",
        type: null,
        dependentID: 5030,
        conditionType: "level",
        conditionValue: (0, _decimal.DEC)(1),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 91609
      },
      //artifact
      {
        category: "id",
        type: null,
        dependentID: 5040,
        conditionType: "level",
        conditionValue: (0, _decimal.DEC)(10),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 91820
      },
      //artifact
      {
        category: "id",
        type: null,
        dependentID: 5060,
        conditionType: "level",
        conditionValue: (0, _decimal.DEC)(5),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 92007
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e50),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 92101
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e60),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 92203
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e70),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 92707
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e80),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 93002
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e90),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 93407
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e100),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 93409
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e110),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 93513
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e120),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 94207
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e130),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 94907
      },
      // stat
      {
        category: "stat",
        type: null,
        dependentID: null,
        conditionType: "powerLevel",
        conditionValue: (0, _decimal.DEC)(1e140),
        triggerType: "setActive",
        triggerValue: null,
        targetID: 95607
      }];
      var legendaryBossIDs = [];
      var _iterator = _createForOfIteratorHelper(this.zones.filter(function (zone) {
          return zone.zoneType === "legendaryBoss";
        })),
        _step;
      try {
        var _loop2 = function _loop2() {
          var zone = _step.value;
          legendaryBossIDs.push(zone.id);

          // Check if the zone.id exists as a targetID in legendaryBossUnlocks, only if isUnlockedByConnection is not true
          if (!zone.isUnlockedByConnection) {
            var isTargetIdPresent = legendaryBossUnlocks.some(function (unlock) {
              return unlock.targetID === zone.id;
            });
            if (!isTargetIdPresent) {
              console.error("Error: Legendary boss with ID ".concat(zone.id, " does not have a corresponding unlock in legendaryBossUnlocks."));
            }
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop2();
        }

        // Check if there are unlocks targeting a zone.id that is not in legendaryBossIDs
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _loop = function _loop() {
        var unlock = _legendaryBossUnlocks[_i];
        var targetBoss = _this3.zones.find(function (zone) {
          return zone.id === unlock.targetID;
        });

        // Only check for unlocks targeting non-isUnlockedByConnection bosses
        if (targetBoss && !targetBoss.isUnlockedByConnection && !legendaryBossIDs.includes(unlock.targetID)) {
          console.error("Error: Unlock with targetID ".concat(unlock.targetID, " does not correspond to any legendary boss zone."));
        }
      };
      for (var _i = 0, _legendaryBossUnlocks = legendaryBossUnlocks; _i < _legendaryBossUnlocks.length; _i++) {
        _loop();
      }
      var unlockID = 9901;
      // populate legendary boss zone requirement text property
      for (var _i2 = 0, _legendaryBossUnlocks2 = legendaryBossUnlocks; _i2 < _legendaryBossUnlocks2.length; _i2++) {
        var unlock = _legendaryBossUnlocks2[_i2];
        var boss = this.gameManager.findObjectById(unlock.targetID);
        if (boss) {
          //check if boss exists. so game doesnt crash if it doesnt
          if (unlock.dependentID) {
            var dependent = this.gameManager.findObjectById(unlock.dependentID);
            boss.unlockReqText = "<b>Access via:</b> ".concat(dependent.name, " ").concat(unlock.conditionType, " ").concat(unlock.conditionValue);
          } else {
            boss.unlockReqText = "<b>Access via:</b> ".concat(unlock.conditionType, " ").concat(unlock.conditionValue);
          }
          unlock.id = unlockID++;
        } else {
          console.error("legendaryBoss not found in build legendary boss unlocks.", unlock.targetID, boss);
        }
      }
      this.createUnlocks(legendaryBossUnlocks);
    }
  }, {
    key: "initTabUnlocks",
    value: function initTabUnlocks() {
      this.createUnlocks([
      //training tab and force realm - default enabled 
      //settings tab - default enabled

      // wisdom realm & tab  -  unlocked by world 2 legendary boss Font of Wisdom
      {
        id: 251,
        category: "id",
        type: null,
        dependentID: 90912,
        targetID: 112,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "tabEnable",
        triggerValue: 20
      },
      //energy realm & tab
      {
        id: 252,
        category: "id",
        type: null,
        dependentID: 95902,
        targetID: 113,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "tabEnable",
        triggerValue: 30
      },
      //divine realm & tab
      {
        id: 253,
        category: "id",
        type: null,
        dependentID: 97825,
        targetID: 114,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "tabEnable",
        triggerValue: 40
      },
      //exploration tab 
      {
        id: 256,
        category: "id",
        type: null,
        dependentID: 1002,
        targetID: 130,
        conditionType: "level",
        conditionValue: 20,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //odyssey subtab unlocked initially with exploration tab
      // { id: 281, category: "id", type: null, dependentID: 1003, targetID: 131, conditionType: "level", conditionValue: 10, triggerType: "tabEnable", triggerValue: null },

      //tournament subtab
      {
        id: 282,
        category: "id",
        type: null,
        dependentID: 90107,
        targetID: 132,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //artifact subtab - upon first shard find
      {
        id: 283,
        category: "stat",
        type: null,
        dependentID: null,
        targetID: 133,
        conditionType: "alphaShard",
        conditionValue: 1,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //forge
      {
        id: 254,
        category: "id",
        type: null,
        dependentID: 1101,
        targetID: 120,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //skills
      {
        id: 255,
        category: "stat",
        type: null,
        dependentID: null,
        targetID: 140,
        conditionType: "skillpoints",
        conditionValue: 1,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //essence
      {
        id: 257,
        category: "stat",
        type: null,
        dependentID: null,
        targetID: 150,
        conditionType: "powerLevel",
        conditionValue: 1e60,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //achievements
      {
        id: 258,
        category: "stat",
        type: null,
        dependentID: null,
        targetID: 160,
        conditionType: "powerLevel",
        conditionValue: 1e4,
        triggerType: "tabEnable",
        triggerValue: null
      },
      //radiance
      {
        id: 259,
        category: "stat",
        type: null,
        dependentID: 6001,
        targetID: 180,
        conditionType: "radiance",
        conditionValue: 1,
        triggerType: "tabEnable",
        triggerValue: null
      }]);
    }
  }, {
    key: "initRebirthUnlocks",
    value: function initRebirthUnlocks() {
      this.createUnlocks([
      //rebirth 1 unlock at power level 
      {
        id: 265,
        category: "stat",
        type: null,
        dependentID: null,
        targetID: null,
        conditionType: "powerLevel",
        conditionValue: 1e60,
        triggerType: "buttonEnable",
        triggerValue: "rebirth1Button"
      }]);
    }
  }, {
    key: "initForceRealmUnlocks",
    value: function initForceRealmUnlocks() {
      //these unlocks manually added to reEngageUnlock for evolution resetting via ID
      this.createUnlocks([
      //trainings unlocking trainings
      {
        id: 1201,
        category: "id",
        type: null,
        dependentID: 1001,
        targetID: 1002,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1202,
        category: "id",
        type: null,
        dependentID: 1002,
        targetID: 1003,
        conditionType: "level",
        conditionValue: 20,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1203,
        category: "id",
        type: null,
        dependentID: 1003,
        targetID: 1004,
        conditionType: "level",
        conditionValue: 30,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1204,
        category: "id",
        type: null,
        dependentID: 1004,
        targetID: 1005,
        conditionType: "level",
        conditionValue: 40,
        triggerType: "setActive",
        triggerValue: null
      },
      // all unlocked by progression or zone bosses
      {
        id: 1205,
        category: "id",
        type: null,
        dependentID: 90021,
        targetID: 1101,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1206,
        category: "id",
        type: null,
        dependentID: 90125,
        targetID: 1102,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1207,
        category: "id",
        type: null,
        dependentID: 90321,
        targetID: 1103,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1208,
        category: "id",
        type: null,
        dependentID: 90423,
        targetID: 1104,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 1209,
        category: "id",
        type: null,
        dependentID: 90623,
        targetID: 1105,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      // realm evolutions
      {
        id: 1210,
        category: "id",
        type: null,
        dependentID: 92604,
        targetID: 10,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }, {
        id: 1211,
        category: "id",
        type: null,
        dependentID: 96368,
        targetID: 10,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }]);
    }
  }, {
    key: "initForgeUpgradeUnlocks",
    value: function initForgeUpgradeUnlocks() {
      this.createUnlocks([
      //row 1 forge upgrades unlocked by default when forge tab unlocks

      //row 2 forge upgrades 
      {
        id: 11000,
        category: "id",
        type: null,
        dependentID: 10004,
        targetID: [10006, 10007, 10008, 10009],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 3+ forge upgrades
      {
        id: 11001,
        category: "id",
        type: null,
        dependentID: 10009,
        targetID: [10011, 10012, 10013, 10014, 10015],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 1 wisdom upgrades
      {
        id: 11002,
        category: "id",
        type: null,
        dependentID: 90912,
        targetID: [10101, 10102, 10103, 10104],
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 2 wisdom upgrades
      {
        id: 11003,
        category: "id",
        type: null,
        dependentID: 10104,
        targetID: [10106, 10107, 10108, 10109],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 3+ wisdom upgrades
      {
        id: 11004,
        category: "id",
        type: null,
        dependentID: 10109,
        targetID: [10111, 10112, 10113, 10114, 10115],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 1 energy upgrades
      {
        id: 11005,
        category: "id",
        type: null,
        dependentID: 2001,
        targetID: [10201, 10202, 10203, 10204],
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 2 energy upgrades
      {
        id: 11006,
        category: "id",
        type: null,
        dependentID: 10204,
        targetID: [10206, 10207, 10208, 10209],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 3+ energy upgrades
      {
        id: 11007,
        category: "id",
        type: null,
        dependentID: 10209,
        targetID: [10211, 10212, 10213, 10214, 10215],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 1 divine upgrades
      {
        id: 11008,
        category: "id",
        type: null,
        dependentID: 711,
        targetID: [10301, 10302, 10303, 10304],
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 2 divine upgrades
      {
        id: 11009,
        category: "id",
        type: null,
        dependentID: 10304,
        targetID: [10306, 10307, 10308, 10309],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //row 3+ divine upgrades
      {
        id: 11010,
        category: "id",
        type: null,
        dependentID: 10309,
        targetID: [10311, 10312, 10315],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setActive",
        triggerValue: null
      },
      //group 1 crystal upgrades
      {
        id: 11011,
        category: "id",
        type: null,
        dependentID: 80001,
        targetID: [10401, 10402, 10406, 10407],
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      //group 2 crystal upgrades
      {
        id: 11012,
        category: "id",
        type: null,
        dependentID: 852,
        targetID: [10410, 10411],
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      //group 3 crystal upgrades
      {
        id: 11013,
        category: "id",
        type: null,
        dependentID: 853,
        targetID: [10414, 10415],
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      //group 4 crystal upgrades - rebirth/emnergy
      {
        id: 11014,
        category: "stat",
        type: null,
        dependentID: null,
        targetID: [10408, 10409, 10412],
        conditionType: "powerLevel",
        conditionValue: 1e60,
        triggerType: "setActive",
        triggerValue: null
      },
      //group 5 crystal upgrades
      {
        id: 11015,
        category: "id",
        type: null,
        dependentID: 858,
        targetID: [10416, 10417, 10413],
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }]);
    }
  }, {
    key: "initWisdomRealmUnlocks",
    value: function initWisdomRealmUnlocks() {
      //these unlocks manually added to reEngageUnlock for evolution resetting via ID

      this.createUnlocks([
      //gens unlock gens
      {
        id: 621,
        category: "id",
        type: null,
        dependentID: 611,
        targetID: 612,
        conditionType: "manualLevel",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 622,
        category: "id",
        type: null,
        dependentID: 612,
        targetID: 613,
        conditionType: "manualLevel",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 623,
        category: "id",
        type: null,
        dependentID: 613,
        targetID: 614,
        conditionType: "manualLevel",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 624,
        category: "id",
        type: null,
        dependentID: 614,
        targetID: 615,
        conditionType: "manualLevel",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      },
      // zones unlock gen upgrades
      {
        id: 625,
        category: "id",
        type: null,
        dependentID: 91123,
        targetID: 631,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 626,
        category: "id",
        type: null,
        dependentID: 91206,
        targetID: 632,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 627,
        category: "id",
        type: null,
        dependentID: 91506,
        targetID: 633,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 628,
        category: "id",
        type: null,
        dependentID: 91605,
        targetID: 634,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 629,
        category: "id",
        type: null,
        dependentID: 92205,
        targetID: 635,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      // realm evolutions
      {
        id: 660,
        category: "id",
        type: null,
        dependentID: 95404,
        targetID: 20,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }, {
        id: 661,
        category: "id",
        type: null,
        dependentID: 96674,
        targetID: 20,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }]);
    }
  }, {
    key: "initEnergyRealmUnlocks",
    value: function initEnergyRealmUnlocks() {
      //these unlocks manually added to reEngageUnlock for evolution resetting via ID

      this.createUnlocks([
      //trainings unlocking trainings
      {
        id: 2201,
        category: "id",
        type: null,
        dependentID: 2001,
        targetID: 2002,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2202,
        category: "id",
        type: null,
        dependentID: 2002,
        targetID: 2003,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2203,
        category: "id",
        type: null,
        dependentID: 2003,
        targetID: 2004,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2204,
        category: "id",
        type: null,
        dependentID: 2004,
        targetID: 2005,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      },
      //trainings unlocking upgrades
      {
        id: 2205,
        category: "id",
        type: null,
        dependentID: 2001,
        targetID: 2101,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2206,
        category: "id",
        type: null,
        dependentID: 2002,
        targetID: 2102,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2207,
        category: "id",
        type: null,
        dependentID: 2003,
        targetID: 2103,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2208,
        category: "id",
        type: null,
        dependentID: 2004,
        targetID: 2104,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 2209,
        category: "id",
        type: null,
        dependentID: 2005,
        targetID: 2105,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      },
      // realm evolutions
      {
        id: 2210,
        category: "id",
        type: null,
        dependentID: 97034,
        targetID: 30,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }, {
        id: 2211,
        category: "id",
        type: null,
        dependentID: 97408,
        targetID: 30,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }]);
    }
  }, {
    key: "initDivineRealmUnlocks",
    value: function initDivineRealmUnlocks() {
      //these unlocks manually added to reEngageUnlock for evolution resetting via ID
      this.createUnlocks([
      //gens unlock gens
      {
        id: 721,
        category: "id",
        type: null,
        dependentID: 711,
        targetID: 712,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 722,
        category: "id",
        type: null,
        dependentID: 712,
        targetID: 713,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 723,
        category: "id",
        type: null,
        dependentID: 713,
        targetID: 714,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 724,
        category: "id",
        type: null,
        dependentID: 714,
        targetID: 715,
        conditionType: "level",
        conditionValue: 5,
        triggerType: "setActive",
        triggerValue: null
      },
      //gens unlock gen upgrades
      {
        id: 725,
        category: "id",
        type: null,
        dependentID: 711,
        targetID: 731,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 726,
        category: "id",
        type: null,
        dependentID: 712,
        targetID: 732,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 727,
        category: "id",
        type: null,
        dependentID: 713,
        targetID: 733,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 728,
        category: "id",
        type: null,
        dependentID: 714,
        targetID: 734,
        conditionType: "level",
        conditionValue: 10,
        triggerType: "setActive",
        triggerValue: null
      },
      // realm evolutions
      {
        id: 729,
        category: "id",
        type: null,
        dependentID: 97826,
        targetID: 40,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }, {
        id: 730,
        category: "id",
        type: null,
        dependentID: 97827,
        targetID: 40,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "evolve",
        triggerValue: null
      }]);
    }
  }, {
    key: "initArtifactUnlocks",
    value: function initArtifactUnlocks() {
      this.createUnlocks([
      //zone completions that unlock artifacts
      {
        id: 5901,
        category: "id",
        type: null,
        dependentID: 93205,
        targetID: 5010,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5902,
        category: "id",
        type: null,
        dependentID: 93706,
        targetID: 5020,
        conditionType: "isDefeated",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5903,
        category: "id",
        type: null,
        dependentID: 94503,
        targetID: 5030,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5904,
        category: "id",
        type: null,
        dependentID: 1000006,
        targetID: 5040,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5905,
        category: "id",
        type: null,
        dependentID: 1000006,
        targetID: 5050,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5906,
        category: "id",
        type: null,
        dependentID: 1000007,
        targetID: 5060,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5907,
        category: "id",
        type: null,
        dependentID: 1000007,
        targetID: 5070,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5908,
        category: "id",
        type: null,
        dependentID: 1000008,
        targetID: 5080,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5909,
        category: "id",
        type: null,
        dependentID: 1000009,
        targetID: 5090,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5910,
        category: "id",
        type: null,
        dependentID: 1000010,
        targetID: 5100,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5911,
        category: "id",
        type: null,
        dependentID: 1000010,
        targetID: 5110,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        id: 5912,
        category: "id",
        type: null,
        dependentID: 1000010,
        targetID: 5120,
        conditionType: "isProgressed",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }]);
    }
  }, {
    key: "initEssenceUpgradeUnlocks",
    value: function initEssenceUpgradeUnlocks() {
      this.createUnlocks([{
        id: 3071,
        category: "id",
        type: null,
        dependentID: 100003,
        targetID: [40004, 40031, 40034, 40016, 40010, 40009, 40026, 40027, 40028, 40032, 40033, 40017, 40018, 40013, 40029, 40030],
        conditionType: "level",
        conditionValue: 1,
        triggerType: "setUnlocked",
        triggerValue: null
      }]);
    }
  }, {
    key: "createUnlocks",
    value: function createUnlocks(unlockData) {
      var _this4 = this;
      unlockData.forEach(function (data) {
        var id = data.id,
          category = data.category,
          type = data.type,
          dependentID = data.dependentID,
          targetID = data.targetID,
          conditionType = data.conditionType,
          conditionValue = data.conditionValue,
          triggerType = data.triggerType,
          triggerValue = data.triggerValue;

        // check if conditionvalue is a digit, and if so, convert to Decimal
        // json cannot store a decimal value, but conditionvalue can be a digit or bool
        var decimalConditionValue = typeof conditionValue === 'number' ? (0, _decimal.DEC)(conditionValue) : conditionValue;
        var decimalTriggerValue = typeof triggerValue === 'number' ? (0, _decimal.DEC)(triggerValue) : triggerValue;
        var unlock = new _Unlock.default(id, category, type, dependentID, targetID, conditionType, decimalConditionValue, triggerType, decimalTriggerValue);
        _this4.gameManager.unlockManager.unlocks.set(id, unlock);
        _this4.unlocks.set(id, unlock);
        _this4.gameManager.gameContent.unlocks.set(id, unlock);
        _this4.addObjectToIdMap(id, unlock);
      });
    }
  }, {
    key: "initTrainings",
    value: function initTrainings() {
      var _this5 = this;
      _2.default.trainingData.forEach(function (data) {
        var id = data.id,
          realmID = data.realmID,
          evolutionTier = data.evolutionTier,
          name = data.name,
          note = data.note,
          description = data.description,
          level = data.level,
          _data$maxLevel2 = data.maxLevel,
          maxLevel = _data$maxLevel2 === void 0 ? (0, _decimal.DEC)(Infinity) : _data$maxLevel2,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          active = data.active,
          evolutions = data.evolutions;
        var training = new _Training.default(_this5.eventManager, id, realmID, evolutionTier, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, evolutions);
        if (evolutions) {
          evolutions.forEach(function (evolveData) {
            training.evolutions.push(evolveData);
          });
        }
        _this5.trainings.push(training);
        _this5.gameManager.gameContent.trainings.push(training);
        _this5.addObjectToIdMap(id, training);
      });
    }
  }, {
    key: "initRealmUpgrades",
    value: function initRealmUpgrades() {
      var _this6 = this;
      _2.default.realmUpgradeData.forEach(function (data) {
        var id = data.id,
          realmID = data.realmID,
          evolutionTier = data.evolutionTier,
          name = data.name,
          note = data.note,
          description = data.description,
          level = data.level,
          _data$maxLevel3 = data.maxLevel,
          maxLevel = _data$maxLevel3 === void 0 ? (0, _decimal.DEC)(Infinity) : _data$maxLevel3,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          active = data.active,
          mods = data.mods,
          evolutions = data.evolutions;
        var upgrade = new _RealmUpgrade.default(_this6.eventManager, id, realmID, evolutionTier, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, evolutions);

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            _this6.modsWaiting.push(modData);
          });
        }
        if (evolutions) {
          evolutions.forEach(function (evolveData) {
            upgrade.evolutions.push(evolveData);
          });
        }
        _this6.realmUpgrades.push(upgrade);
        _this6.gameManager.gameContent.realmUpgrades.push(upgrade);
        _this6.addObjectToIdMap(id, upgrade);
      });
    }
  }, {
    key: "initGeneratorChains",
    value: function initGeneratorChains() {
      var generatorChain1 = new _GeneratorChain.default(this.eventManager, 601, "wGenChain1", 20, true);
      this.generatorChains.push(generatorChain1);
      this.gameManager.gameContent.generatorChains.push(generatorChain1);
      this.addObjectToIdMap(generatorChain1.id, generatorChain1);
      var generatorChain2 = new _GeneratorChain.default(this.eventManager, 701, "dGenChain1", 40, true);
      this.generatorChains.push(generatorChain2);
      this.gameManager.gameContent.generatorChains.push(generatorChain2);
      this.addObjectToIdMap(generatorChain2.id, generatorChain2);
    }
  }, {
    key: "initGenerators",
    value: function initGenerators() {
      this.initGeneratorChains();
      this.createGenerators(_2.default.generatorData);
    }
  }, {
    key: "initEssenceUpgrades",
    value: function initEssenceUpgrades() {
      var _this7 = this;
      _2.default.essenceUpgradeData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          note = data.note,
          description = data.description,
          level = data.level,
          maxLevel = data.maxLevel,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          _data$active = data.active,
          active = _data$active === void 0 ? false : _data$active,
          specialTargetID = data.specialTargetID,
          parentID = data.parentID,
          angleFromParent = data.angleFromParent,
          distanceFromParent = data.distanceFromParent,
          _data$isUnlockedByCon = data.isUnlockedByConnection,
          isUnlockedByConnection = _data$isUnlockedByCon === void 0 ? true : _data$isUnlockedByCon,
          mods = data.mods;
        var essenceUpgrade = new _EssenceUpgrade.default(_this7.eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, specialTargetID, parentID, angleFromParent, distanceFromParent, isUnlockedByConnection);

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            modData.id = essenceUpgrade.id + 500;
            modData.name = "eUpgradeMod" + essenceUpgrade.id;
            if (!modData.sourceID) {
              modData.sourceID = essenceUpgrade.id;
            }
            _this7.modsWaiting.push(modData);

            //create essenceUpgrade description based off of mod values
            essenceUpgrade.description = "".concat(modData.targetType, " ").concat(modData.type, " ").concat(modData.runningCalcType, " (").concat(modData.value, " ").concat(modData.sourceCalcType, " this level)");
          });
        }
        _this7.essenceUpgrades.push(essenceUpgrade);
        _this7.gameManager.gameContent.essenceUpgrades.push(essenceUpgrade);
        _this7.addObjectToIdMap(id, essenceUpgrade);
      });
      this.buildEssenceUpgradeConnections();
    }
  }, {
    key: "buildEssenceUpgradeConnections",
    value: function buildEssenceUpgradeConnections() {
      var _iterator2 = _createForOfIteratorHelper(this.essenceUpgrades),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var upgrade = _step2.value;
          if (upgrade.parentID) {
            upgrade.parent = this.findObjectById(upgrade.parentID);
            upgrade.parent.children.push(upgrade);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "initforgeUpgrades",
    value: function initforgeUpgrades() {
      var _this8 = this;
      _2.default.forgeUpgradeData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          note = data.note,
          description = data.description,
          level = data.level,
          maxLevel = data.maxLevel,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          active = data.active,
          _data$specialVar = data.specialVar1,
          specialVar1 = _data$specialVar === void 0 ? null : _data$specialVar,
          _data$specialVar2 = data.specialVar2,
          specialVar2 = _data$specialVar2 === void 0 ? null : _data$specialVar2,
          _data$specialVar3 = data.specialVar3,
          specialVar3 = _data$specialVar3 === void 0 ? null : _data$specialVar3,
          mods = data.mods;
        var forgeUpgrade = new _ForgeUpgrade.default(_this8.eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, specialVar1, specialVar2, specialVar3);

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            modData.id = forgeUpgrade.id + 50;
            modData.name = "forgeUpgradeMod" + forgeUpgrade.id;
            if (!modData.sourceID) {
              modData.sourceID = forgeUpgrade.id;
            }
            _this8.modsWaiting.push(modData);
          });
        }
        _this8.forgeUpgrades.push(forgeUpgrade);
        _this8.gameManager.gameContent.forgeUpgrades.push(forgeUpgrade);
        _this8.addObjectToIdMap(id, forgeUpgrade);
      });
    }
  }, {
    key: "initRadianceUpgrades",
    value: function initRadianceUpgrades() {
      var _this9 = this;
      _2.default.radianceUpgradeData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          note = data.note,
          description = data.description,
          level = data.level,
          _data$maxLevel4 = data.maxLevel,
          maxLevel = _data$maxLevel4 === void 0 ? (0, _decimal.DEC)(Infinity) : _data$maxLevel4,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          prodGrowthRate = data.prodGrowthRate,
          active = data.active,
          specialTargetID = data.specialTargetID,
          mods = data.mods;
        var upgrade = new _RadianceUpgrade.default(_this9.eventManager, id, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, specialTargetID);

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            _this9.modsWaiting.push(modData);
          });
        }
        _this9.radianceUpgrades.push(upgrade);
        _this9.gameManager.gameContent.radianceUpgrades.push(upgrade);
        _this9.addObjectToIdMap(id, upgrade);
      });
    }
  }, {
    key: "initArtifacts",
    value: function initArtifacts() {
      var _this10 = this;
      _2.default.artifactData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          note = data.note,
          evolutionTier = data.evolutionTier,
          gearType = data.gearType,
          description = data.description,
          _data$level = data.level,
          level = _data$level === void 0 ? 0 : _data$level,
          maxLevel = data.maxLevel,
          costType = data.costType,
          costBase = data.costBase,
          costGrowthRate = data.costGrowthRate,
          _data$prodType = data.prodType,
          prodType = _data$prodType === void 0 ? null : _data$prodType,
          _data$prodBase = data.prodBase,
          prodBase = _data$prodBase === void 0 ? null : _data$prodBase,
          _data$prodGrowthRate = data.prodGrowthRate,
          prodGrowthRate = _data$prodGrowthRate === void 0 ? null : _data$prodGrowthRate,
          _data$active2 = data.active,
          active = _data$active2 === void 0 ? false : _data$active2,
          mods = data.mods,
          evolutions = data.evolutions;
        var artifact = new _Artifact.default(_this10.eventManager, id, name, note, (0, _decimal.DEC)(evolutionTier), gearType, description, level, (0, _decimal.DEC)(maxLevel), costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active, evolutions);
        if (evolutions) {
          evolutions.forEach(function (evolveData) {
            artifact.evolutions.push(evolveData);
          });
        }

        //grab mods declared in JSON and add them to the mod waiting array to be processed after all objects are initialized
        if (mods) {
          mods.forEach(function (modData) {
            modData.id = artifact.id + 500;
            modData.name = "artifactMod" + artifact.id;
            if (!modData.sourceID) {
              modData.sourceID = artifact.id;
            }
            _this10.modsWaiting.push(modData);

            //create artifact description based off of mod values
            // artifact.description = `${modData.targetType} ${modData.type} ${modData.runningCalcType} (${modData.value} ${modData.sourceCalcType} artifact level)`;
          });
        }
        _this10.artifacts.push(artifact);
        _this10.gameManager.gameContent.artifacts.push(artifact);
        _this10.addObjectToIdMap(id, artifact);
      });
    }
  }, {
    key: "assignEssenceUpgradeReferences",
    value: function assignEssenceUpgradeReferences() {
      var _iterator3 = _createForOfIteratorHelper(this.essenceUpgrades),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var upgrade = _step3.value;
          if (upgrade.specialTargetID) {
            upgrade.target = this.findObjectById(upgrade.specialTargetID);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "initRealms",
    value: function initRealms() {
      var _this11 = this;
      var realmData = [
      //force realms
      {
        id: 10,
        type: "force",
        name: "force",
        description: "",
        active: true,
        evolutionTierNames: ["Neighborhood Training", "Gym Training", "Rocky Training"]
      }, {
        id: 20,
        type: "wisdom",
        name: "wisdom",
        description: "",
        active: true,
        startingResource: 1,
        evolutionTierNames: ["evoTier1Name", "evoTier2Name", "evoTier3Name"]
      }, {
        id: 30,
        type: "energy",
        name: "energy",
        description: "",
        active: true,
        startingResource: 1,
        evolutionTierNames: ["evoTier1Name", "evoTier2Name", "evoTier3Name"]
      }, {
        id: 40,
        type: "divine",
        name: "divine",
        description: "",
        active: true,
        startingResource: 1,
        evolutionTierNames: ["evoTier1Name", "evoTier2Name", "evoTier3Name"]
      }];
      realmData.forEach(function (data) {
        var id = data.id,
          type = data.type,
          name = data.name,
          description = data.description,
          active = data.active,
          startingResource = data.startingResource,
          evolutionTierNames = data.evolutionTierNames;
        var realm = new _Realm.default(_this11.eventManager, id, type, name, evolutionTierNames, description, active, startingResource);
        _this11.realms.push(realm);
        _this11.gameManager.gameContent.realms.push(realm);
        _this11.addObjectToIdMap(id, realm);
      });
    }
  }, {
    key: "initWorlds",
    value: function initWorlds() {
      var _this12 = this;
      _2.default.worldData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          note = data.note,
          zoneCostMin = data.zoneCostMin,
          zoneCostMax = data.zoneCostMax,
          zoneShardType = data.zoneShardType,
          _data$active3 = data.active,
          active = _data$active3 === void 0 ? false : _data$active3;

        //allows for huge values defined as strings
        var zoneCostMinDecimal = (0, _decimal.DEC)(zoneCostMin);
        var zoneCostMaxDecimal = (0, _decimal.DEC)(zoneCostMax);
        var world = new _World.default(_this12.eventManager, _this12.gameManager.gameContent.worldManager, id, name, note, zoneCostMinDecimal, zoneCostMaxDecimal, zoneShardType, active);
        _this12.worlds.push(world);
        _this12.gameManager.gameContent.worldManager.worlds.push(world);
        _this12.addObjectToIdMap(id, world);
        _this12.gameManager.gameContent.worlds.push(world);
        if (world.id === 1000001) {
          _this12.gameManager.gameContent.worldManager.currentWorld = world;
        }
      });
    }
  }, {
    key: "initRegions",
    value: function initRegions() {
      var _this13 = this;
      _2.default.regionData.forEach(function (data) {
        var id = data.id,
          worldID = data.worldID,
          name = data.name,
          mapFilename = data.mapFilename,
          note = data.note,
          shardType = data.shardType,
          zoneCostMin = data.zoneCostMin,
          zoneCostMax = data.zoneCostMax,
          topLeftCornerX = data.topLeftCornerX,
          topLeftCornerY = data.topLeftCornerY,
          _data$active4 = data.active,
          active = _data$active4 === void 0 ? false : _data$active4;
        var region = new _Region.default(_this13.eventManager, id, worldID, name, mapFilename, note, shardType, zoneCostMin, zoneCostMax, topLeftCornerX, topLeftCornerY, active);
        _this13.regions.push(region);
        _this13.addObjectToIdMap(id, region);
        _this13.gameManager.gameContent.regions.push(region);

        // assign region images
        if (region.mapFilename) {
          region.image = _.default[mapFilename];
        } else {
          // console.error("region map has no corresponding image for " + region.id);
        }
      });
    }
  }, {
    key: "pushRegionsToWorlds",
    value: function pushRegionsToWorlds() {
      var _this14 = this;
      this.regions.forEach(function (region) {
        var world = _this14.worlds.find(function (world) {
          return world.id === region.worldID;
        });
        if (world) {
          world.regions.push(region);
          region.world = world;
          world.totalZoneCount += region.zones.length;
        }
      });
    }
  }, {
    key: "dynamicallySetZoneCosts",
    value: function dynamicallySetZoneCosts() {
      var _iterator4 = _createForOfIteratorHelper(this.worlds),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var world = _step4.value;
          if (world.totalZoneCount > 0 && world.regions) {
            var shardType = world.zoneShardType;
            var _iterator5 = _createForOfIteratorHelper(world.regions),
              _step5;
            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var region = _step5.value;
                if (region.zones) {
                  var zonesWithoutSpecial = region.zones.filter(function (zone) {
                    return zone.zoneType !== "legendaryBoss" && zone.zoneType !== "progressionBoss";
                  });
                  var regionZoneCount = zonesWithoutSpecial.length;
                  if (regionZoneCount > 0) {
                    var costMin = region.zoneCostMin;
                    var costMax = region.zoneCostMax;
                    var factor = costMax.div(costMin).pow(1 / (regionZoneCount - 1));
                    var currCost = costMin;
                    var _iterator6 = _createForOfIteratorHelper(zonesWithoutSpecial),
                      _step6;
                    try {
                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                        var zone = _step6.value;
                        if (zone.costBase.eq(100)) {
                          zone.costBase = zone.cost = zone.costNextMultPurchase = zone.costNextSingle = currCost;
                        }
                        zone.prodType = shardType + "Shard";
                        currCost = currCost.times(factor);
                      }
                    } catch (err) {
                      _iterator6.e(err);
                    } finally {
                      _iterator6.f();
                    }
                  }
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }

    // dynamicallySetZoneCosts() {
    // 	for (let world of this.worlds) {
    // 		let shardType = world.zoneShardType;
    // 		let worldZoneCount = world.totalZoneCount;

    // 		if (worldZoneCount > 0) {
    // 			if (world.regions) {
    // 				for (let region of world.regions) {
    // 					let regionZoneCount = region.totalZoneCount;

    // 					// Subtract 1 from regionZoneCount for each legendary boss zone
    // 					if (region.zones) {
    // 						for (let zone of region.zones) {
    // 							if (zone.zoneType === "legendaryBoss") {
    // 							regionZoneCount--;
    // 							}
    // 						}

    // 						let zonesWithoutLegendary = region.zones.filter(zone => zone.zoneType != "legendaryBoss");

    // 						// Set cost range from region data
    // 						let costMin = region.zoneCostMin;
    // 						let costMax = region.zoneCostMax;

    // 						// Calculate the exponential factor
    // 						let factor = costMax.div(costMin).pow(1 / (regionZoneCount - 1));
    // 						let currCost = costMin;

    // 						for (let zone of zonesWithoutLegendary) {
    // 							// Only update zone costs if costBase is 100 and not a legendary boss
    // 							if (zone.costBase.eq(100)) {
    // 								zone.costBase = currCost;
    // 								zone.cost = currCost;
    // 								zone.costNextMultPurchase = currCost;
    // 								zone.costNextSingle = currCost;
    // 							}
    // 							zone.prodType = shardType + "Shard";
    // 							currCost = currCost.times(factor); // Multiply by the exponential factor
    // 						}
    // 					}
    // 				}
    // 			}
    // 		}
    // 	}
    // }
  }, {
    key: "initZones",
    value: function initZones() {
      var _this15 = this;
      _2.default.zoneData.forEach(function (data) {
        var id = data.id,
          regionID = data.regionID,
          name = data.name,
          note = data.note,
          description = data.description,
          _data$level2 = data.level,
          level = _data$level2 === void 0 ? (0, _decimal.DEC)(0) : _data$level2,
          _data$maxLevel5 = data.maxLevel,
          maxLevel = _data$maxLevel5 === void 0 ? (0, _decimal.DEC)(1) : _data$maxLevel5,
          costType = data.costType,
          costBase = data.costBase,
          _data$costGrowthRate = data.costGrowthRate,
          costGrowthRate = _data$costGrowthRate === void 0 ? (0, _decimal.DEC)(2) : _data$costGrowthRate,
          prodType = data.prodType,
          prodBase = data.prodBase,
          _data$prodGrowthRate2 = data.prodGrowthRate,
          prodGrowthRate = _data$prodGrowthRate2 === void 0 ? (0, _decimal.DEC)(1.01) : _data$prodGrowthRate2,
          baseConquestTime = data.baseConquestTime,
          _data$active5 = data.active,
          active = _data$active5 === void 0 ? false : _data$active5,
          _data$zoneType = data.zoneType,
          zoneType = _data$zoneType === void 0 ? "standard" : _data$zoneType,
          parentID = data.parentID,
          angleFromParent = data.angleFromParent,
          distanceFromParent = data.distanceFromParent,
          _data$isUnlockedByCon2 = data.isUnlockedByConnection,
          isUnlockedByConnection = _data$isUnlockedByCon2 === void 0 ? true : _data$isUnlockedByCon2,
          _data$x = data.x,
          x = _data$x === void 0 ? false : _data$x,
          _data$y = data.y,
          y = _data$y === void 0 ? false : _data$y,
          outsideRegionConnectionIDs = data.outsideRegionConnectionIDs;
        var zone = new _Zone.default(_this15.eventManager, id, regionID, name, note, description, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, baseConquestTime, active, zoneType, parentID, angleFromParent, distanceFromParent, isUnlockedByConnection, x, y, outsideRegionConnectionIDs);
        if (zone.zoneType === "legendaryBoss") {
          zone.unlocked = false;
        } else {
          zone.unlocked = true;
        }
        _this15.zones.push(zone);
        _this15.gameManager.gameContent.zones.push(zone);
        _this15.addObjectToIdMap(id, zone);
      });
      this.buildZoneConnections();
    }
  }, {
    key: "buildZoneConnections",
    value: function buildZoneConnections() {
      var _iterator7 = _createForOfIteratorHelper(this.zones),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var zone = _step7.value;
          if (zone.parentID) {
            zone.parent = this.findObjectById(zone.parentID);
            zone.parent.children.push(zone);
            if (zone.regionID !== zone.parent.regionID) {
              zone.parent.hasConnectionToNewRegion = true;
            }
          }
          if (zone.outsideRegionConnectionIDs) {
            var _iterator8 = _createForOfIteratorHelper(zone.outsideRegionConnectionIDs),
              _step8;
            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var child = _step8.value;
                var newChild = this.findObjectById(child);
                if (zone.regionID !== newChild.regionID) {
                  zone.hasConnectionToNewRegion = true;
                }
                zone.children.push(newChild);
                newChild.children.push(zone);
                newChild.hasConnectionToNewRegion = true;
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "pushZonesToRegions",
    value: function pushZonesToRegions() {
      var _this16 = this;
      this.zones.forEach(function (zone) {
        var region = _this16.regions.find(function (region) {
          return region.id === zone.regionID;
        });
        if (region) {
          region.zones.push(zone);
          zone.region = region;
          region.totalZoneCount++;
        }
        _this16.gameManager.gameContent.worldManager.totalZoneCount++;
      });
    }
  }, {
    key: "initFighters",
    value: function initFighters() {
      var _this17 = this;
      var fighterID = 80001;
      var fighterCost = (0, _decimal.DEC)(1e10);
      var fighterProd = (0, _decimal.DEC)(10);
      _2.default.fighterData.forEach(function (data) {
        var _data$id = data.id,
          id = _data$id === void 0 ? fighterID : _data$id,
          name = data.name,
          note = data.note,
          description = data.description,
          tier = data.tier,
          _data$level3 = data.level,
          level = _data$level3 === void 0 ? (0, _decimal.DEC)(0) : _data$level3,
          _data$maxLevel6 = data.maxLevel,
          maxLevel = _data$maxLevel6 === void 0 ? (0, _decimal.DEC)(1) : _data$maxLevel6,
          _data$costType = data.costType,
          costType = _data$costType === void 0 ? "powerLevel" : _data$costType,
          costBase = data.costBase,
          _data$costGrowthRate2 = data.costGrowthRate,
          costGrowthRate = _data$costGrowthRate2 === void 0 ? (0, _decimal.DEC)(2) : _data$costGrowthRate2,
          _data$prodType2 = data.prodType,
          prodType = _data$prodType2 === void 0 ? "crystal" : _data$prodType2,
          prodBase = data.prodBase,
          _data$prodGrowthRate3 = data.prodGrowthRate,
          prodGrowthRate = _data$prodGrowthRate3 === void 0 ? (0, _decimal.DEC)(1.01) : _data$prodGrowthRate3,
          _data$active6 = data.active,
          active = _data$active6 === void 0 ? false : _data$active6;
        var fighter = new _Fighter.default(_this17.eventManager, id, name, note, description, tier, level, maxLevel, costType, costBase, costGrowthRate, prodType, prodBase, prodGrowthRate, active);
        fighter.costBase = fighter.costNextMultPurchase = fighter.costNextSingle = fighterCost;
        fighter.prodBase = fighter.prodNextMultPurchase = fighter.prodNextSingle = fighterProd;
        fighterCost = fighterCost.times(20);
        fighterProd = fighterProd.times(2);
        _this17.fighters.push(fighter);
        _this17.gameManager.gameContent.fighters.push(fighter);
        _this17.gameManager.gameContent.tournament.fighters.push(fighter);
        _this17.addObjectToIdMap(id, fighter);
        fighterID++;
      });
    }
  }, {
    key: "initFighterTiers",
    value: function initFighterTiers() {
      // creates fighter tiers based on fighters' fighterTier property, and assigns corresponding fighters
      var fighterTierID = 851;
      var fighterTierName = "Tier 1";
      var _iterator9 = _createForOfIteratorHelper(this.fighters),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var fighter = _step9.value;
          var added = false;
          var _iterator10 = _createForOfIteratorHelper(this.fighterTiers),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var fighterTier = _step10.value;
              if (fighterTier.tier === fighter.tier) {
                fighterTier.fighters.push(fighter);
                fighter.fighterTier = fighterTier;
                added = true;
              }
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
          if (!added) {
            var newTier = new _FighterTier.default(this.eventManager, fighterTierID, fighter.tier, fighterTierName);
            newTier.fighters.push(fighter);
            fighterTierID++;
            // increment the fighter tier name by 1 as well
            fighterTierName = "Tier ".concat(fighterTierID - 850);
            this.fighterTiers.push(newTier);
            this.gameManager.gameContent.fighterTiers.push(newTier);
            this.gameManager.gameContent.tournament.fighterTiers.push(newTier);
            this.addObjectToIdMap(newTier.id, newTier);
            fighter.fighterTier = newTier;
            if (newTier.id === 851) {
              newTier.setActive();
              this.gameManager.gameContent.tournament.currentFighterTier = newTier;
            }
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "initFighterTierUnlocks",
    value: function initFighterTierUnlocks() {
      // Find all fighter tiers and assign unlocks in ID order

      var fighterTierUnlocks = [
      // world 1 region 2 unlocks the first one
      {
        category: "id",
        dependentID: 1010003,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      },
      // new worlds unlock the rest
      {
        category: "id",
        dependentID: 1000002,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000003,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000004,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000005,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000006,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000007,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000008,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000009,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }, {
        category: "id",
        dependentID: 1000010,
        conditionType: "active",
        conditionValue: true,
        triggerType: "setActive",
        triggerValue: null
      }];
      var fighterTierIDs = [];
      var _iterator11 = _createForOfIteratorHelper(this.fighterTiers),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var fighterTier = _step11.value;
          fighterTierIDs.push(fighterTier.id);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      var unlockID = 871;
      var tierIDIndex = 0;
      for (var _i3 = 0, _fighterTierUnlocks = fighterTierUnlocks; _i3 < _fighterTierUnlocks.length; _i3++) {
        var unlock = _fighterTierUnlocks[_i3];
        unlock.id = unlockID++;
        if (tierIDIndex < fighterTierIDs.length) {
          unlock.targetID = fighterTierIDs[tierIDIndex++];
        } else {
          // If you run out of IDs in fighterTierIDs but still have more unlocks, 
          // you need to decide what to do. This is just a placeholder.
          console.warn("Ran out of fighterTierIDs. Not all unlocks have targetIDs.");
          break;
        }
      }
      if (tierIDIndex < fighterTierIDs.length) {
        console.error(fighterTierIDs.length - tierIDIndex, "fighter tier unlocks not assigned");
      }
      this.createUnlocks(fighterTierUnlocks);
    }
  }, {
    key: "initTournament",
    value: function initTournament() {
      var tournament = new _Tournament.default(this.eventManager, 799);
      this.tournament = tournament;
      this.gameManager.gameContent.tournament = tournament;
      this.addObjectToIdMap(tournament.id, tournament);
    }
  }, {
    key: "initRebirthModAndPseudoFeature",
    value: function initRebirthModAndPseudoFeature() {
      //hidden upgrade object to act as source of rebirth mod
      var rebirthPseudoObject = {
        id: 60000,
        name: "hidden rebirth1 upgrade source",
        description: "hidden rebirth1 pseudoFeature source",
        level: (0, _decimal.DEC)(1),
        maxLevel: Infinity,
        active: false
      };
      var id = rebirthPseudoObject.id,
        name = rebirthPseudoObject.name,
        note = rebirthPseudoObject.note,
        description = rebirthPseudoObject.description,
        level = rebirthPseudoObject.level,
        maxLevel = rebirthPseudoObject.maxLevel,
        active = rebirthPseudoObject.active;
      var rebirthObject = new _PseudoFeature.default(this.eventManager, id, name, note, description, level, maxLevel, active);
      // this.realmUpgrades.push(rebirthObject);
      this.addObjectToIdMap(id, rebirthObject);
      var modID = 60001;
      var mod = new _Mod.default(this.eventManager, modID, "rebirth1EssenceMod", "production", null, 60000, "add", "allTrain", null, "mult", (0, _decimal.DEC)(1), (0, _decimal.DEC)(1), false);
      this.mods.push(mod);
      this.addObjectToIdMap(modID, mod);
    }
  }, {
    key: "initHeadbandModsAndPseudoFeature",
    value: function initHeadbandModsAndPseudoFeature() {
      //hidden upgrade object to act as source of rebirth mod
      var headbandPseudoObject = {
        id: 800,
        name: "Tournament Headband",
        description: "hidden tournament headband pseudoFeature source",
        level: (0, _decimal.DEC)(0),
        maxLevel: Infinity,
        active: false
      };
      var id = headbandPseudoObject.id,
        name = headbandPseudoObject.name,
        note = headbandPseudoObject.note,
        description = headbandPseudoObject.description,
        level = headbandPseudoObject.level,
        maxLevel = headbandPseudoObject.maxLevel,
        active = headbandPseudoObject.active;
      var headbandObject = new _PseudoFeature.default(this.eventManager, id, name, note, description, level, maxLevel, active);

      // this.realmUpgrades.push(headbandObject);
      this.addObjectToIdMap(id, headbandObject);
      var modData = [{
        id: 801,
        name: "headbandMod1",
        type: "production",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "forceTrain",
        targetID: null,
        runningCalcType: "mult",
        baseValue: 2,
        value: 2,
        active: false
      }, {
        id: 802,
        name: "headbandMod2",
        type: "cost",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "forceTrain",
        targetID: null,
        runningCalcType: "div",
        baseValue: 2,
        value: 2,
        active: false
      }, {
        id: 803,
        name: "headbandMod3",
        type: "production",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "wisdomTrain",
        targetID: null,
        runningCalcType: "mult",
        baseValue: 2,
        value: 2,
        active: false
      }, {
        id: 804,
        name: "headbandMod4",
        type: "cost",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "wisdomTrain",
        targetID: null,
        runningCalcType: "div",
        baseValue: 2,
        value: 2,
        active: false
      }, {
        id: 805,
        name: "headbandMod5",
        type: "production",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "allTrain",
        targetID: null,
        runningCalcType: "add",
        baseValue: 1,
        value: 1,
        active: false
      }, {
        id: 806,
        name: "headbandMod6",
        type: "cost",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "allTrain",
        targetID: null,
        runningCalcType: "div",
        baseValue: 1,
        value: 1,
        active: false
      }, {
        id: 807,
        name: "headbandMod7",
        type: "cost",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "fighters",
        targetID: null,
        runningCalcType: "div",
        baseValue: 1,
        value: 1,
        active: false
      }, {
        id: 808,
        name: "headbandMod8",
        type: "production",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "zones",
        targetID: null,
        runningCalcType: "add",
        baseValue: 1,
        value: 1,
        active: false
      }, {
        id: 809,
        name: "headbandMod9",
        type: "cost",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "zones",
        targetID: null,
        runningCalcType: "div",
        baseValue: 1,
        value: 1,
        active: false
      }, {
        id: 810,
        name: "headbandMod10",
        type: "production",
        priority: null,
        sourceID: 800,
        sourceCalcType: "add",
        targetType: "allTrain",
        targetID: null,
        runningCalcType: "mult",
        baseValue: 1,
        value: 1,
        active: false
      }];
      for (var _i4 = 0, _modData = modData; _i4 < _modData.length; _i4++) {
        var mod = _modData[_i4];
        this.modsWaiting.push(mod);
      }
    }
  }, {
    key: "initHeadbandModUnlocks",
    value: function initHeadbandModUnlocks() {
      this.createUnlocks([
      //trainings unlocking trainings
      {
        id: 821,
        category: "id",
        type: null,
        dependentID: 851,
        targetID: 801,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 822,
        category: "id",
        type: null,
        dependentID: 852,
        targetID: 802,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 823,
        category: "id",
        type: null,
        dependentID: 853,
        targetID: 803,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 824,
        category: "id",
        type: null,
        dependentID: 854,
        targetID: 804,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 825,
        category: "id",
        type: null,
        dependentID: 855,
        targetID: 805,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 826,
        category: "id",
        type: null,
        dependentID: 856,
        targetID: 806,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 827,
        category: "id",
        type: null,
        dependentID: 857,
        targetID: 807,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 828,
        category: "id",
        type: null,
        dependentID: 858,
        targetID: 808,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 829,
        category: "id",
        type: null,
        dependentID: 859,
        targetID: 809,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }, {
        id: 830,
        category: "id",
        type: null,
        dependentID: 860,
        targetID: 810,
        conditionType: "isCompleted",
        conditionValue: true,
        triggerType: "headbandLevelActivate",
        triggerValue: null
      }]);
    }
  }, {
    key: "populateMilestones",
    value: function populateMilestones() {
      //initForceTrainMilestones
      this.initMilestones(30000, 30001, 31000, this.trainings);

      //initWisdomGenMilestones
      this.initMilestones(32000, 32001, 33200, this.generators);
    }
  }, {
    key: "initMilestones",
    value: function initMilestones(sourceUpgradeID, modStartID, unlockStartID, features) {
      var MILESTONE_TIERS = [(0, _decimal.DEC)(10), (0, _decimal.DEC)(25), (0, _decimal.DEC)(50), (0, _decimal.DEC)(100), (0, _decimal.DEC)(250), (0, _decimal.DEC)(500), (0, _decimal.DEC)(1000), (0, _decimal.DEC)(2500), (0, _decimal.DEC)(5000), (0, _decimal.DEC)(10000), (0, _decimal.DEC)(25000), (0, _decimal.DEC)(50000), (0, _decimal.DEC)(100000), (0, _decimal.DEC)(250000), (0, _decimal.DEC)(500000), (0, _decimal.DEC)(1000000)];

      // Hidden pseudoFeature object to act as source of milestone mods
      var milestoneSource = {
        id: sourceUpgradeID,
        name: "hidden milestone pseudoFeature source",
        description: "hidden milestone pseudoFeature source",
        level: (0, _decimal.DEC)(1),
        maxLevel: (0, _decimal.DEC)(1)
      };
      var id = milestoneSource.id,
        name = milestoneSource.name,
        note = milestoneSource.note,
        description = milestoneSource.description,
        level = milestoneSource.level,
        maxLevel = milestoneSource.maxLevel,
        active = milestoneSource.active;
      var milestonePseudoFeature = new _PseudoFeature.default(this.eventManager, id, name, note, description, level, maxLevel, active);
      this.realmUpgrades.push(milestonePseudoFeature);
      this.addObjectToIdMap(id, milestonePseudoFeature);
      var unlockID = unlockStartID;
      var modID = modStartID;
      var milestoneLevel = (0, _decimal.DEC)(0);
      var _iterator12 = _createForOfIteratorHelper(features),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var feature = _step12.value;
          var modValue = (0, _decimal.DEC)(2);

          //set feature initial nextMilestoneLevel info
          feature.nextMilestoneLevel = MILESTONE_TIERS[0];
          feature.nextMilestoneMult = modValue;
          for (var i = 0; i < MILESTONE_TIERS.length; i++) {
            milestoneLevel = MILESTONE_TIERS[i];
            var mod = new _Mod.default(this.eventManager, modID, feature.id + "milestone" + milestoneLevel.toString(), "production", null, sourceUpgradeID, "mult", null, feature.id, "mult", modValue, modValue, false);
            this.mods.push(mod);
            this.gameManager.gameContent.mods.push(mod);
            this.addObjectToIdMap(modID, mod);
            var unlock = new _Unlock.default(unlockID, "id", null, feature.id, mod.id, "manualLevel", milestoneLevel, "setActive", null);
            this.unlocks.set(unlockID, unlock);
            this.gameManager.unlockManager.unlocks.set(unlockID, unlock);
            this.gameManager.gameContent.unlocks.set(unlockID, unlock);
            this.addObjectToIdMap(unlockID, unlock);
            unlockID++;
            modID++;
            modValue = modValue.plus(2);
          }
        }

        // Populate all included features with milestone tiers
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      var _iterator13 = _createForOfIteratorHelper(features),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var _feature = _step13.value;
          _feature.milestoneTiers = MILESTONE_TIERS;
          _feature.setNextAffordableMilestoneLevel();
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  }, {
    key: "createModObjects",
    value: function createModObjects() {
      this.createMods(this.modsWaiting);
    }
  }, {
    key: "assignModPriorities",
    value: function assignModPriorities() {
      var typeValues = {
        "prodInit": 1,
        "prodBase": 100,
        "production": 1000,
        "costInit": 1,
        "costBase": 100,
        "cost": 1000
      };
      var calcTypeValues = {
        "add": 100,
        "sub": 150,
        "mult": 200,
        "div": 250,
        "exp": 300,
        "log": 350,
        "tetra": 400,
        "addPercent": 900,
        "subPercent": 900
      };
      this.mods.forEach(function (mod) {
        //set priority unless manually assigned
        if (!mod.priority) {
          mod.priority = typeValues[mod.type] + calcTypeValues[mod.runningCalcType];
        }
      });
    }
  }, {
    key: "assignModReferences",
    value: function assignModReferences() {
      var _this18 = this;
      this.mods.forEach(function (mod) {
        if (mod.sourceID) {
          mod.source = _this18.findObjectById(mod.sourceID);
        }
        if (mod.targetID) {
          mod.target = _this18.findObjectById(mod.targetID);
        }
      });
    }
  }, {
    key: "registerModsToSources",
    value: function registerModsToSources() {
      var _this19 = this;
      this.mods.forEach(function (mod) {
        _this19.registerModObserver(mod.source, mod);
        if (mod.specialActivator) {
          _this19.registerModObserver(mod.specialActivator, mod);
        }
      });
    }

    //register mod observers and push to mod trees
  }, {
    key: "registerModObserversAndTrees",
    value: function registerModObserversAndTrees() {
      var _this20 = this;
      var typeMods = [];
      this.mods.forEach(function (mod) {
        if (mod.targetType) {
          typeMods.push(mod);
        } else if (mod.target) {
          _this20.addModToObjectModTree(mod.target, mod);
        } else {
          console.error("mod", mod.name, "is not initialized properly - missing: target type or target ID");
        }
      });
      this.typeModHandler(typeMods);
    }
  }, {
    key: "typeModHandler",
    value: function typeModHandler(typeMods) {
      var _this21 = this;
      typeMods.forEach(function (typeMod) {
        var featureLoop = null;

        //grab array of relevant targeted features
        if (typeMod.targetType === "forceTrain") {
          featureLoop = _this21.trainings.filter(function (training) {
            return training.realmID === 10;
          });
        } else if (typeMod.targetType === "wisdomTrain") {
          // only affects the base generator, not all generators
          featureLoop = _this21.generators.filter(function (generator) {
            return generator.parentGenChain.realmID === 20 && generator.parentGenChain.generators[0] === generator;
          });
        }
        if (typeMod.targetType === "energyTrain") {
          featureLoop = _this21.trainings.filter(function (training) {
            return training.realmID === 30;
          });
        } else if (typeMod.targetType === "divineTrain") {
          // only affects the base generator, not all generators
          featureLoop = _this21.generators.filter(function (generator) {
            return generator.parentGenChain.realmID === 40 && generator.parentGenChain.generators[0] === generator;
          });
        } else if (typeMod.targetType === "zones") {
          featureLoop = _this21.zones;
        } else if (typeMod.targetType === "fighters") {
          featureLoop = _this21.fighters;
        } else if (typeMod.targetType === "allTrain") {
          // only affects the base generator, not all generators
          var tempLoop = [];
          var _iterator14 = _createForOfIteratorHelper(_this21.generatorChains),
            _step14;
          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var chain = _step14.value;
              tempLoop.push(chain.generators[0]);
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
          featureLoop = _this21.trainings.concat(tempLoop);
        } else if (typeMod.targetType === "artifacts") {
          featureLoop = _this21.artifacts;
        }

        //add type mod to relevant feature
        var _iterator15 = _createForOfIteratorHelper(featureLoop),
          _step15;
        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var feature = _step15.value;
            //make sure typemod does not apply to itself (upgrade that buffs upgrades)
            if (typeMod.source !== feature) {
              _this21.addModToObjectModTree(feature, typeMod);
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }
      });
    }
  }, {
    key: "addModToObjectModTree",
    value: function addModToObjectModTree(targetObject, mod) {
      var tree = null;
      switch (mod.type) {
        case 'costInit':
        case 'costBase':
        case 'cost':
          if (targetObject.modTreesMap.get("cost")) {
            targetObject.modTreesMap.get("cost").addNode(mod);
            mod.modTreeReferences.push(targetObject.modTreesMap.get("cost"));
          } else {
            tree = new _ModTree.default(targetObject, "cost");
            targetObject.modTreesMap.set("cost", tree);
            tree.addNode(mod);
            mod.modTreeReferences.push(targetObject.modTreesMap.get("cost"));
            this.modTrees.push(tree);
          }
          break;
        case 'prodInit':
        case 'prodBase':
        case 'production':
          if (targetObject.modTreesMap.get("production")) {
            targetObject.modTreesMap.get("production").addNode(mod);
            mod.modTreeReferences.push(targetObject.modTreesMap.get("production"));
          } else {
            tree = new _ModTree.default(targetObject, "production");
            targetObject.modTreesMap.set("production", tree);
            tree.addNode(mod);
            mod.modTreeReferences.push(targetObject.modTreesMap.get("production"));
            this.modTrees.push(tree);
          }
          break;
        default:
          console.error(targetObject, mod, "addModtocalctree error");
      }
    }
  }, {
    key: "initModTrees",
    value: function initModTrees() {
      this.modTrees.forEach(function (tree) {
        tree.buildTree();
      });
    }
  }, {
    key: "registerModObserver",
    value: function registerModObserver(sourceObject, mod) {
      if (sourceObject) {
        sourceObject.registerObserver(mod);
      }
    }
  }, {
    key: "pushTrainingsToRealms",
    value: function pushTrainingsToRealms() {
      var _this22 = this;
      this.trainings.forEach(function (training) {
        var realm = _this22.realms.find(function (realm) {
          return realm.id === training.realmID;
        });
        if (realm) {
          realm.trainings.push(training);
          training.realm = realm; // Assign the realm reference to the training's realm value
        } else {
          console.error("No realm found with id ".concat(training.realmID, " for training ").concat(training.name));
        }
      });
    }
  }, {
    key: "pushUpgradesToRealms",
    value: function pushUpgradesToRealms() {
      var _this23 = this;
      this.realmUpgrades.forEach(function (upgrade) {
        var realm = _this23.realms.find(function (realm) {
          return realm.id === upgrade.realmID;
        });
        if (realm) {
          realm.realmUpgrades.push(upgrade);
          upgrade.realm = realm; // Assign the realm reference to the training's realm value
        } else {
          console.error("No realm found with id ".concat(upgrade.realmID, " for training ").concat(upgrade.name));
        }
      });
    }
  }, {
    key: "assignUnlockReferences",
    value: function assignUnlockReferences() {
      var _this24 = this;
      this.unlocks.forEach(function (unlock) {
        if (Array.isArray(unlock.targetID)) {
          unlock.target = unlock.targetID.map(function (id) {
            return _this24.findObjectById(id);
          });
        } else if (unlock.targetID) {
          unlock.target = _this24.findObjectById(unlock.targetID);
        }
        if (Array.isArray(unlock.dependentID)) {
          unlock.dependent = unlock.dependentID.map(function (id) {
            return _this24.findObjectById(id);
          });
        } else if (unlock.dependentID) {
          unlock.dependent = _this24.findObjectById(unlock.dependentID);
        }
      });
    }
  }, {
    key: "createMods",
    value: function createMods(modData) {
      var _this25 = this;
      modData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          type = data.type,
          priority = data.priority,
          sourceID = data.sourceID,
          sourceCalcType = data.sourceCalcType,
          targetType = data.targetType,
          targetID = data.targetID,
          runningCalcType = data.runningCalcType,
          baseValue = data.baseValue,
          value = data.value,
          active = data.active,
          _data$specialActivato = data.specialActivatorID,
          specialActivatorID = _data$specialActivato === void 0 ? null : _data$specialActivato;
        var mod = new _Mod.default(_this25.eventManager, id, name, type, priority, sourceID, sourceCalcType, targetType, targetID, runningCalcType, baseValue, value, active, specialActivatorID);
        _this25.mods.push(mod);
        _this25.gameManager.gameContent.mods.push(mod);
        _this25.addObjectToIdMap(id, mod);
        if (mod.specialActivatorID) {
          mod.specialActivator = _this25.gameManager.findObjectById(specialActivatorID);
        }
      });
    }
  }, {
    key: "printTrainingInfo",
    value: function printTrainingInfo() {
      console.error("::::::::::::::::::::::::::");
      console.error(":::::   TRAININGS   :::::");
      console.error("::::::::::::::::::::::::::");
      this.trainings.forEach(function (training) {
        console.error("Training ".concat(training.id, " - ").concat(training.name));
        console.error(" Observers:");
        training.observers.forEach(function (observer, index) {
          console.error("  Observer ".concat(index + 1, ": ").concat(observer.id, " ").concat(observer.name));
        });
        console.error(" Calc Trees:");
        training.modTreesMap.forEach(function (modTree, key) {
          console.error("  Mod tree: ".concat(key));
          modTree.nodes.forEach(function (node, index) {
            console.error("   Node ".concat(index + 1, ": ").concat(node.ref.id, " ").concat(node.ref.name, " value: ").concat(node.ref.value, " srcCalc: ").concat(node.ref.sourceCalcType, " runCalc: ").concat(node.ref.runningCalcType, " previousNode: ").concat(node.previousNode ? node.previousNode.ref.name : null, " nextNode: ").concat(node.nextNode ? node.nextNode.ref.name : null, " active:").concat(node.ref.active));
          });
        });
      });
    }
  }, {
    key: "printUpgradeInfo",
    value: function printUpgradeInfo() {
      console.error("::::::::::::::::::::::::::");
      console.error("::::::   UPGRADES   ::::::");
      console.error("::::::::::::::::::::::::::");
      this.realmUpgrades.forEach(function (upgrade) {
        console.error("Upgrade ".concat(upgrade.id, " - ").concat(upgrade.name));
        console.error(" Observers:");
        upgrade.observers.forEach(function (observer, index) {
          console.error("  Observer ".concat(index + 1, ": ").concat(observer.id, " ").concat(observer.name));
        });
        console.error(" Calc Trees:");
        upgrade.modTreesMap.forEach(function (modTree, key) {
          console.error("  Mod tree: ".concat(key));
          modTree.nodes.forEach(function (node, index) {
            console.error("   Node ".concat(index + 1, ": ").concat(node.ref.id, " ").concat(node.ref.name, " value: ").concat(node.ref.value, " srcCalc: ").concat(node.ref.sourceCalcType, " runCalc: ").concat(node.ref.runningCalcType, " previousNode: ").concat(node.previousNode ? node.previousNode.ref.name : null, " nextNode: ").concat(node.nextNode ? node.nextNode.ref.name : null));
          });
        });
      });
    }
  }, {
    key: "printZoneInfo",
    value: function printZoneInfo() {
      console.error("::::::::::::::::::::::::::");
      console.error("::::::   ZONES   ::::::");
      console.error("::::::::::::::::::::::::::");
      this.zones.forEach(function (zone) {
        console.error("Zone ".concat(zone.id, " - ").concat(zone.name));
        console.error(" Observers:");
        zone.observers.forEach(function (observer, index) {
          console.error("  Observer ".concat(index + 1, ": ").concat(observer.id, " ").concat(observer.name));
        });
        console.error(" Calc Trees:");
        zone.modTreesMap.forEach(function (modTree, key) {
          console.error("  Mod tree: ".concat(key));
          modTree.nodes.forEach(function (node, index) {
            console.error("   Node ".concat(index + 1, ": ").concat(node.ref.id, " ").concat(node.ref.name, " value: ").concat(node.ref.value, " srcCalc: ").concat(node.ref.sourceCalcType, " runCalc: ").concat(node.ref.runningCalcType, " previousNode: ").concat(node.previousNode ? node.previousNode.ref.name : null, " nextNode: ").concat(node.nextNode ? node.nextNode.ref.name : null));
          });
        });
      });
    }
  }, {
    key: "printUnlockInfo",
    value: function printUnlockInfo() {
      this.unlocksDiv = document.getElementById("unlocksList");
      this.unlocksDiv.innerHTML = "LIST OF UNLOCKS:<br>";
      var _iterator16 = _createForOfIteratorHelper(this.gameManager.gameContent.unlocks),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var unlock = _step16.value;
          this.unlocksDiv.innerHTML += "".concat(unlock.dependent.name, " unlocks ").concat(unlock.target.name, " via ").concat(unlock.conditionType, " ").concat(unlock.conditionValue, "<br>");
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
    }
  }, {
    key: "printWorldRegionZoneHeirarchy",
    value: function printWorldRegionZoneHeirarchy() {
      var str = "";
      var worldNum = 1;
      var zoneNames = [];
      var _iterator17 = _createForOfIteratorHelper(this.worlds),
        _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var world = _step17.value;
          var regionNum = 1;
          str += "World ".concat(worldNum, ": ").concat(world.name, " \n");
          var _iterator18 = _createForOfIteratorHelper(world.regions),
            _step18;
          try {
            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
              var region = _step18.value;
              var zoneNum = 1;
              str += "   Region ".concat(regionNum, ": ").concat(region.name, " \n");
              var _iterator19 = _createForOfIteratorHelper(region.zones),
                _step19;
              try {
                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                  var zone = _step19.value;
                  zoneNames.push(zone.name);
                  if (zone.zoneType === "legendaryBoss") {
                    str += "     Zone ".concat(zoneNum, ": Side Boss: ").concat(zone.name, " \n");
                  } else if (zone.zoneType === "boss") {
                    str += "     Zone ".concat(zoneNum, ": Regional Boss: ").concat(zone.name, " \n");
                  } else {
                    str += "     Zone ".concat(zoneNum, ": ").concat(zone.name, " \n");
                  }
                  zoneNum++;
                }
              } catch (err) {
                _iterator19.e(err);
              } finally {
                _iterator19.f();
              }
              regionNum++;
            }
          } catch (err) {
            _iterator18.e(err);
          } finally {
            _iterator18.f();
          }
          str += '\n';
          worldNum++;
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      console.error(str);
      var duplicates = zoneNames.filter(function (value, index, self) {
        return self.indexOf(value) !== index;
      });
      console.log("Duplicates:", duplicates);
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js","../Core/ModTree.js":"components/Core/ModTree.js","../Core/Mod.js":"components/Core/Mod.js","../Core/Unlock.js":"components/Core/Unlock.js","../Core/PseudoFeature.js":"components/Core/PseudoFeature.js","../Features/Training/Realm.js":"components/Features/Training/Realm.js","../Features/Training/Training.js":"components/Features/Training/Training.js","../Features/Training/Generator.js":"components/Features/Training/Generator.js","../Features/Training/GeneratorChain.js":"components/Features/Training/GeneratorChain.js","../Features/Upgrades/RealmUpgrade.js":"components/Features/Upgrades/RealmUpgrade.js","../Features/Upgrades/ForgeUpgrade.js":"components/Features/Upgrades/ForgeUpgrade.js","../Features/Upgrades/RadianceUpgrade.js":"components/Features/Upgrades/RadianceUpgrade.js","../Features/Upgrades/EssenceUpgrade.js":"components/Features/Upgrades/EssenceUpgrade.js","../Features/Odyssey/Artifact.js":"components/Features/Odyssey/Artifact.js","../Features/Odyssey/Zone.js":"components/Features/Odyssey/Zone.js","../Features/Odyssey/Region.js":"components/Features/Odyssey/Region.js","../Features/Odyssey/World.js":"components/Features/Odyssey/World.js","../Features/Tournament/Fighter.js":"components/Features/Tournament/Fighter.js","../Features/Tournament/FighterTier.js":"components/Features/Tournament/FighterTier.js","../Features/Tournament/Tournament.js":"components/Features/Tournament/Tournament.js","../../assets/maps/*.jpg":"assets/maps/*.jpg","../../assets/gameData/*.json":"assets/gameData/*.json","./AchievementBuilder.js":"components/Builder/AchievementBuilder.js","./SkillBuilder.js":"components/Builder/SkillBuilder.js"}],"components/Core/_EventManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var EventManager = exports.default = /*#__PURE__*/function () {
  function EventManager() {
    _classCallCheck(this, EventManager);
    this.listeners = {};
    this.domListeners = new Map();
  }

  // Register an event listener
  return _createClass(EventManager, [{
    key: "addListener",
    value: function addListener(eventType, callback) {
      if (!this.listeners[eventType]) {
        this.listeners[eventType] = [];
      }
      this.listeners[eventType].push(callback);
    }
  }, {
    key: "addDomListener",
    value: function addDomListener(element, eventType, callback) {
      // Add the event listener to the DOM element
      element.addEventListener(eventType, callback);

      // Store the reference to the listener for later removal
      if (!this.domListeners.has(element)) {
        this.domListeners.set(element, []);
      }
      this.domListeners.get(element).push({
        eventType: eventType,
        callback: callback
      });
    }
  }, {
    key: "removeDomListener",
    value: function removeDomListener(element, eventType, callback) {
      // Remove the listener from the DOM element
      element.removeEventListener(eventType, callback);

      // Remove the listener reference from the map
      var listeners = this.domListeners.get(element);
      if (listeners) {
        var index = listeners.findIndex(function (listener) {
          return listener.eventType === eventType && listener.callback === callback;
        });
        if (index > -1) {
          listeners.splice(index, 1);
        }
        // If no listeners remain for the element, remove the element from the map
        if (listeners.length === 0) {
          this.domListeners.delete(element);
        }
      }
      element.remove();
    }

    // Remove an event listener
  }, {
    key: "removeListener",
    value: function removeListener(eventType, callback) {
      if (this.listeners[eventType]) {
        var index = this.listeners[eventType].indexOf(callback);
        if (index > -1) {
          this.listeners[eventType].splice(index, 1);
        }
      }
    }

    // Dispatch an event to all registered listeners
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(eventType, eventData, handleResult) {
      if (this.listeners[eventType]) {
        this.listeners[eventType].forEach(function (callback) {
          if (typeof handleResult === 'function') {
            callback(eventData, handleResult);
          } else {
            callback(eventData);
          }
        });
      }
    }
  }, {
    key: "dispatchQuery",
    value: function dispatchQuery(eventType, eventData) {
      var _this = this;
      return new Promise(function (resolve) {
        _this.dispatchEvent(eventType, eventData, resolve);
      });
    }
  }, {
    key: "clearAllListeners",
    value: function clearAllListeners() {
      var _this2 = this;
      // Iterate through all DOM elements and their listeners for removal
      this.domListeners.forEach(function (listeners, element) {
        // Clone the array to avoid modification issues while iterating
        var clonedListeners = _toConsumableArray(listeners);
        clonedListeners.forEach(function (_ref) {
          var eventType = _ref.eventType,
            callback = _ref.callback;
          // Use removeDomListener to ensure all cleanup logic is executed
          _this2.removeDomListener(element, eventType, callback);
        });
      });
      // Clear the map
      this.domListeners.clear();

      // Clear application-level listeners
      this.listeners = {};
    }
  }]);
}();
},{}],"components/Core/GameSettings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var GameSettings = exports.default = /*#__PURE__*/_createClass(function GameSettings() {
  _classCallCheck(this, GameSettings);
});
},{}],"components/Features/Skills/SkillTree.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SkillTree = exports.default = /*#__PURE__*/function () {
  function SkillTree(eventManager) {
    _classCallCheck(this, SkillTree);
    this.eventManager = eventManager;
    this.skills = [];
  }
  return _createClass(SkillTree, [{
    key: "refundAllSkills",
    value: function refundAllSkills() {
      var _iterator = _createForOfIteratorHelper(this.skills),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var skill = _step.value;
          if (skill.level.gt(0)) {
            skill.refundSkill();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
},{}],"components/Features/Achievements/AchievementGrid.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
var AchievementGrid = exports.default = /*#__PURE__*/_createClass(function AchievementGrid(eventManager) {
  _classCallCheck(this, AchievementGrid);
  this.eventManager = eventManager;
  this.achievements = [];
  this.achievementSets = [];
});
},{}],"components/Features/Odyssey/WorldManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var WorldManager = exports.default = /*#__PURE__*/function () {
  function WorldManager(eventManager) {
    _classCallCheck(this, WorldManager);
    this.eventManager = eventManager;
    this.worlds = [];
    this.isCompleted = false;
    this.isProgressed = false;
    this.autoUnlocked = false;
    this.currentWorld;
    this.currentRegion;
    this.worldsProgressed = (0, _decimal.DEC)(0);
    this.regionsProgressed = (0, _decimal.DEC)(0);
    this.totalZoneCount = 0;
    this.totalZonesCompleted = 0;
    this.progressPercentage = 0;
  }
  return _createClass(WorldManager, [{
    key: "worldProgressed",
    value: function worldProgressed() {
      //check if all worlds are progressed, or set next world active
      var allWorldsProgressed = this.worlds.every(function (world) {
        return world.isProgressed;
      });
      if (allWorldsProgressed) {
        this.setProgressed();
      } else {
        var nextWorld = this.worlds.find(function (world) {
          return !world.active;
        });
        if (nextWorld) {
          nextWorld.setActive();
          this.currentWorld = nextWorld;
        }
      }
      this.worldsProgressed = this.worldsProgressed.plus(1);
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: 'maxProgressionWorld',
        value: this.worldsProgressed,
        operation: 'replaceIfGreater'
      });
    }
  }, {
    key: "worldCompleted",
    value: function worldCompleted() {
      var allWorldsCompleted = this.worlds.every(function (world) {
        return world.isCompleted;
      });
      if (allWorldsCompleted) {
        this.setCompleted();
      }
    }
  }, {
    key: "setProgressed",
    value: function setProgressed() {
      this.isProgressed = true;
    }
  }, {
    key: "setCompleted",
    value: function setCompleted() {
      this.isCompleted = true;
    }
  }, {
    key: "zoneCompleted",
    value: function zoneCompleted() {
      this.totalZonesCompleted++;
      this.progressPercentage = this.totalZonesCompleted / this.totalZoneCount * 100;
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Core/GameContent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../Utilities/break_eternity.min.js"));
var _decimal = require("../Utilities/decimal.js");
var _SkillTree = _interopRequireDefault(require("../Features/Skills/SkillTree.js"));
var _AchievementGrid = _interopRequireDefault(require("../Features/Achievements/AchievementGrid.js"));
var _WorldManager = _interopRequireDefault(require("../Features/Odyssey/WorldManager.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // large number library
var GameContent = exports.default = /*#__PURE__*/function () {
  function GameContent(eventManager) {
    var _this = this;
    _classCallCheck(this, GameContent);
    this.eventManager = eventManager;
    this.idToObjectMap = new Map();
    this.realms = [];
    this.trainings = [];
    this.realmUpgrades = [];
    this.generators = [];
    this.generatorChains = [];
    this.skillTree = new _SkillTree.default(eventManager);
    this.skills = [];
    this.unlocks = new Map();
    this.essenceUpgrades = [];
    this.forgeUpgrades = [];
    this.radianceUpgrades = [];
    this.achievementsGrid = new _AchievementGrid.default(eventManager);
    this.achievementSets = [];
    this.achievements = [];
    this.worldManager = new _WorldManager.default(eventManager);
    this.worlds = [];
    this.regions = [];
    this.zones = [];
    this.artifacts = [];
    this.tournament;
    this.fighters = [];
    this.fighterTiers = [];
    this.mods = [];
    this.powerLevel = (0, _decimal.DEC)(1);
    this.baseForce = (0, _decimal.DEC)(1);
    this.force = this.baseForce;
    this.forceIncome = (0, _decimal.DEC)(0);
    this.forceSynergyMult = (0, _decimal.DEC)(1);
    this.baseForcePowerLevelMultiplier = (0, _decimal.DEC)(1);
    this.forcePowerLevelMultiplier = this.baseForcePowerLevelMultiplier;
    this.powerLevelFromForce = (0, _decimal.DEC)(0);
    this.baseWisdom = (0, _decimal.DEC)(0);
    this.wisdom = this.baseWisdom;
    this.wisdomIncome = (0, _decimal.DEC)(0);
    this.wisdomSynergyMult = (0, _decimal.DEC)(1);
    this.baseWisdomPowerLevelMultiplier = (0, _decimal.DEC)(10);
    this.wisdomPowerLevelMultiplier = this.baseWisdomPowerLevelMultiplier;
    this.powerLevelFromWisdom = (0, _decimal.DEC)(0);
    this.baseEnergy = (0, _decimal.DEC)(0);
    this.energy = this.baseEnergy;
    this.energyIncome = (0, _decimal.DEC)(0);
    this.energySynergyMult = (0, _decimal.DEC)(1);
    this.baseEnergyPowerLevelMultiplier = (0, _decimal.DEC)(100);
    this.energyPowerLevelMultiplier = this.baseEnergyPowerLevelMultiplier;
    this.powerLevelFromEnergy = (0, _decimal.DEC)(0);
    this.baseDivine = (0, _decimal.DEC)(0);
    this.divine = this.baseDivine;
    this.divineIncome = (0, _decimal.DEC)(0);
    this.divineSynergyMult = (0, _decimal.DEC)(1);
    this.baseDivinePowerLevelMultiplier = (0, _decimal.DEC)(1000);
    this.divinePowerLevelMultiplier = this.baseDivinePowerLevelMultiplier;
    this.powerLevelFromDivine = (0, _decimal.DEC)(0);
    this.forceIncomeDisplay = (0, _decimal.DEC)(0);
    this.wisdomIncomeDisplay = (0, _decimal.DEC)(0);
    this.energyIncomeDisplay = (0, _decimal.DEC)(0);
    this.divineIncomeDisplay = (0, _decimal.DEC)(0);
    this.timeModifierUpgrade = 1;
    this.synergyUpgrades = {
      unspentForceToWisdom: (0, _decimal.DEC)(0),
      unspentForceToEnergy: (0, _decimal.DEC)(0),
      unspentForceToDivine: (0, _decimal.DEC)(0),
      unspentWisdomToForce: (0, _decimal.DEC)(0),
      unspentWisdomToEnergy: (0, _decimal.DEC)(0),
      unspentWisdomToDivine: (0, _decimal.DEC)(0),
      unspentEnergyToForce: (0, _decimal.DEC)(0),
      unspentEnergyToWisdom: (0, _decimal.DEC)(0),
      unspentEnergyToDivine: (0, _decimal.DEC)(0),
      unspentDivineToForce: (0, _decimal.DEC)(0),
      unspentDivineToWisdom: (0, _decimal.DEC)(0),
      unspentDivineToEnergy: (0, _decimal.DEC)(0)
    };
    this.baseCrystal = (0, _decimal.DEC)(0);
    this.crystal = this.baseCrystal;
    this.radiance = (0, _decimal.DEC)(0);
    this.shards = new Map();
    this.shards.set("alphaShard", (0, _decimal.DEC)(0));
    this.shards.set("betaShard", (0, _decimal.DEC)(0));
    this.shards.set("gammaShard", (0, _decimal.DEC)(0));
    this.shards.set("deltaShard", (0, _decimal.DEC)(0));
    this.shards.set("epsilonShard", (0, _decimal.DEC)(0));
    this.shards.set("zetaShard", (0, _decimal.DEC)(0));
    this.shards.set("etaShard", (0, _decimal.DEC)(0));
    this.shards.set("thetaShard", (0, _decimal.DEC)(0));
    this.shards.set("iotaShard", (0, _decimal.DEC)(0));
    this.shards.set("kappaShard", (0, _decimal.DEC)(0));
    this.shards.set("lambdaShard", (0, _decimal.DEC)(0));
    this.shards.set("muShard", (0, _decimal.DEC)(0));
    this.shards.set("nuShard", (0, _decimal.DEC)(0));
    this.shards.set("xiShard", (0, _decimal.DEC)(0));
    this.shards.set("omicronShard", (0, _decimal.DEC)(0));
    this.shardBonusMultipliers = {
      alphaShard: (0, _decimal.DEC)(0.01),
      betaShard: (0, _decimal.DEC)(0.05),
      gammaShard: (0, _decimal.DEC)(0.2),
      deltaShard: (0, _decimal.DEC)(0.5),
      epsilonShard: (0, _decimal.DEC)(1),
      zetaShard: (0, _decimal.DEC)(1.5),
      etaShard: (0, _decimal.DEC)(2),
      thetaShard: (0, _decimal.DEC)(3),
      iotaShard: (0, _decimal.DEC)(5),
      kappaShard: (0, _decimal.DEC)(10),
      lambdaShard: (0, _decimal.DEC)(20),
      muShard: (0, _decimal.DEC)(50),
      nuShard: (0, _decimal.DEC)(75),
      xiShard: (0, _decimal.DEC)(100),
      omicronShard: (0, _decimal.DEC)(1000)
    };
    this.previousShardCounts = {};
    this.computedShardMultipliers = {};
    this.overallShardBonusMultiplier = (0, _decimal.DEC)(1);
    this.baseEssence = (0, _decimal.DEC)(0);
    this.essence = this.baseEssence;
    this.essenceIncome = (0, _decimal.DEC)(0);
    this.baseSkillpoint = (0, _decimal.DEC)(0);
    this.skillpoints = this.baseSkillpoint;
    this.lifetimeForceEarned = (0, _decimal.DEC)(0);
    this.lifetimeWisdomEarned = (0, _decimal.DEC)(0);
    this.lifetimeEnergyEarned = (0, _decimal.DEC)(0);
    this.lifetimeDivineEarned = (0, _decimal.DEC)(0);
    this.lifetimeEssenceEarned = (0, _decimal.DEC)(0);
    this.lifetimeCrystalEarned = (0, _decimal.DEC)(0);
    this.maxPowerLevelAchieved = (0, _decimal.DEC)(0);
    this.lifetimeZoneCompletions = (0, _decimal.DEC)(0);
    this.lifetimeRegionProgressions = (0, _decimal.DEC)(0);
    this.lifetimeWorldProgressions = (0, _decimal.DEC)(0);
    this.maxProgressionWorld = (0, _decimal.DEC)(0);
    this.maxProgressionRegion = (0, _decimal.DEC)(0);
    this.maxTournamentRank = (0, _decimal.DEC)(101); //top rank within max stage
    this.lifetimeKills = (0, _decimal.DEC)(0);
    this.lifetimeFighterTiersDefeated = (0, _decimal.DEC)(0);
    this.lastRebirth1 = Date.now();
    this.rebirth1Count = (0, _decimal.DEC)(0);
    this.originalStartDateTime = new Date();
    this.totalPlaytime = (0, _decimal.DEC)(0);
    this.essenceGainOnNextRebirth1 = (0, _decimal.DEC)(0);
    this.eventManager.addListener('updateCurrencyMult', function (data) {
      _this.updateCurrencyMult(data);
    });
    this.eventManager.addListener('updatePropertyValue', function (data) {
      _this.updatePropertyValue(data.property, data.value, data.operation);
    });
    this.eventManager.addListener('batchUpdatePropertyValues', function (batchData) {
      var _iterator = _createForOfIteratorHelper(batchData),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var data = _step.value;
          _this.updatePropertyValue(data.property, data.value, data.operation);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    });
    this.eventManager.addListener('queryPropertyValue', function (data, respond) {
      var result = _this.queryPropertyValue(data);
      if (respond) {
        respond(result);
      }
    });
  }
  return _createClass(GameContent, [{
    key: "processTrainingIncome",
    value: function processTrainingIncome(deltaTimeSeconds) {
      this.processTrainingCurrencyIncome('force', deltaTimeSeconds);
      this.processTrainingCurrencyIncome('wisdom', deltaTimeSeconds);
      this.processTrainingCurrencyIncome('energy', deltaTimeSeconds);
      this.processTrainingCurrencyIncome('divine', deltaTimeSeconds);
    }
  }, {
    key: "processTrainingCurrencyIncome",
    value: function processTrainingCurrencyIncome(currency, deltaTimeSeconds) {
      var newIncome = (0, _decimal.DEC)(0);

      // handle generators
      if (currency === 'wisdom' || currency === 'divine') {
        var generatorChain = this.generatorChains.filter(function (generatorChain) {
          return generatorChain.realm.type == currency;
        });
        var _iterator2 = _createForOfIteratorHelper(generatorChain),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var chain = _step2.value;
            var baseGenerator = chain.generators[0];
            if (chain.active && baseGenerator.active && baseGenerator.level.gt(0)) {
              // apply synergy multipliers
              var currentSynergyMult = this[chain.realm.type + 'SynergyMult'];
              var globalFeatureMult = currentSynergyMult.times(this.overallShardBonusMultiplier);
              baseGenerator.applyGlobalMultsToMultBases(globalFeatureMult);
              newIncome = baseGenerator.prodCurrentGlobal;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      // handle trainings
      else {
        var filteredTrainings = this.trainings.filter(function (training) {
          return training.costType == currency;
        });
        var _iterator3 = _createForOfIteratorHelper(filteredTrainings),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var training = _step3.value;
            if (training.active && training.level.gt(0)) {
              var _currentSynergyMult = this[training.realm.type + 'SynergyMult'];
              var _globalFeatureMult = _currentSynergyMult.times(this.overallShardBonusMultiplier);
              training.applyGlobalMultsToMultBases(_globalFeatureMult);
              newIncome = newIncome.plus(training.prodCurrentGlobal);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      // add currency and set the overall currency income value
      if (newIncome.gt(0)) {
        this[currency + 'Income'] = newIncome.times(this.timeModifierUpgrade);
        this[currency] = this[currency].plus(newIncome.times(deltaTimeSeconds));
      }
    }
  }, {
    key: "updateLifetimeValues",
    value: function updateLifetimeValues(deltaTimeSeconds) {
      this.lifetimeForceEarned = this.lifetimeForceEarned.plus(this.forceIncome.times(deltaTimeSeconds));
      this.lifetimeWisdomEarned = this.lifetimeWisdomEarned.plus(this.wisdomIncome.times(deltaTimeSeconds));
      this.lifetimeEnergyEarned = this.lifetimeEnergyEarned.plus(this.energyIncome.times(deltaTimeSeconds));
      this.lifetimeDivineEarned = this.lifetimeDivineEarned.plus(this.divineIncome.times(deltaTimeSeconds));
    }
  }, {
    key: "updateShardBonusMultipliers",
    value: function updateShardBonusMultipliers() {
      var overallMultiplier = (0, _decimal.DEC)(1);
      var shardCountChanged = false;
      for (var _i = 0, _Object$entries = Object.entries(this.shardBonusMultipliers); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          shardType = _Object$entries$_i[0],
          baseMultiplier = _Object$entries$_i[1];
        var currentShardCount = this.shards.get(shardType);
        if (!this.previousShardCounts.hasOwnProperty(shardType) || !currentShardCount.equals(this.previousShardCounts[shardType])) {
          shardCountChanged = true;
          this.previousShardCounts[shardType] = currentShardCount;
          if (currentShardCount.gt(0)) {
            var computedMultiplier = currentShardCount.times(baseMultiplier);
            this.computedShardMultipliers[shardType] = computedMultiplier;
            overallMultiplier = overallMultiplier.plus(computedMultiplier);
          } else {
            this.computedShardMultipliers[shardType] = (0, _decimal.DEC)(0);
          }
        } else {
          overallMultiplier = overallMultiplier.plus(this.computedShardMultipliers[shardType]);
        }
      }
      if (shardCountChanged) {
        this.overallShardBonusMultiplier = overallMultiplier;
      }
    }

    // updateShardBonusMultipliers() {
    // 	let overallMultiplier = DEC(1);

    // 	for (let [shardType, baseMultiplier] of Object.entries(this.shardBonusMultipliers)) {
    // 	  let shardCount = this.shards.get(shardType);

    // 	  	if (shardCount.gt(0)) {
    // 			overallMultiplier = overallMultiplier.plus(shardCount.times(baseMultiplier));
    // 	 	}
    // 	}

    // 	this.overallShardBonusMultiplier = overallMultiplier;
    // }
  }, {
    key: "updateCurrencySynergyMultipliers",
    value: function updateCurrencySynergyMultipliers() {
      // Reset the multipliers to 1
      this.forceSynergyMult = (0, _decimal.DEC)(1);
      this.wisdomSynergyMult = (0, _decimal.DEC)(1);
      this.energySynergyMult = (0, _decimal.DEC)(1);
      this.divineSynergyMult = (0, _decimal.DEC)(1);
      for (var synergy in this.synergyUpgrades) {
        var multiplier = this.synergyUpgrades[synergy];
        if (multiplier.gt(0)) {
          if (synergy === 'unspentForceToWisdom') {
            this.wisdomSynergyMult = this.wisdomSynergyMult.times(this.force.times(multiplier));
          } else if (synergy === 'unspentForceToEnergy') {
            this.energySynergyMult = this.energySynergyMult.times(this.force.times(multiplier));
          } else if (synergy === 'unspentForceToDivine') {
            this.divineSynergyMult = this.divineSynergyMult.times(this.force.times(multiplier));
          } else if (synergy === 'unspentWisdomToForce') {
            this.forceSynergyMult = this.forceSynergyMult.times(this.wisdom.times(multiplier));
          } else if (synergy === 'unspentWisdomToEnergy') {
            this.energySynergyMult = this.energySynergyMult.times(this.wisdom.times(multiplier));
          } else if (synergy === 'unspentWisdomToDivine') {
            this.divineSynergyMult = this.divineSynergyMult.times(this.wisdom.times(multiplier));
          } else if (synergy === 'unspentEnergyToForce') {
            this.forceSynergyMult = this.forceSynergyMult.times(this.energy.times(multiplier));
          } else if (synergy === 'unspentEnergyToWisdom') {
            this.wisdomSynergyMult = this.wisdomSynergyMult.times(this.energy.times(multiplier));
          } else if (synergy === 'unspentEnergyToDivine') {
            this.divineSynergyMult = this.divineSynergyMult.times(this.energy.times(multiplier));
          } else if (synergy === 'unspentDivineToForce') {
            this.forceSynergyMult = this.forceSynergyMult.times(this.divine.times(multiplier));
          } else if (synergy === 'unspentDivineToWisdom') {
            this.wisdomSynergyMult = this.wisdomSynergyMult.times(this.divine.times(multiplier));
          } else if (synergy === 'unspentDivineToEnergy') {
            this.energySynergyMult = this.energySynergyMult.times(this.divine.times(multiplier));
          }

          // If you wanted to update the training
          // const targetRealm = this.realms.filter(realm => realm.type === currency);
          // // will always return one realm
          // for (const training of targetRealm[0].trainings) {
          //   training.prodCurrentGlobal = training.prodCurrentGlobal.times(this[currency + 'SynergyMult']);
          // }
        }
      }
    }
  }, {
    key: "updatePowerLevel",
    value: function updatePowerLevel(deltaTimeSeconds) {
      var powerLevelAddedFromForce = this.forceIncome.times(this.forceSynergyMult).times(this.forcePowerLevelMultiplier).times(deltaTimeSeconds);
      var powerLevelAddedFromWisdom = this.wisdomIncome.times(this.wisdomSynergyMult).times(this.wisdomPowerLevelMultiplier).times(deltaTimeSeconds);
      var powerLevelAddedFromEnergy = this.energyIncome.times(this.energySynergyMult).times(this.energyPowerLevelMultiplier).times(deltaTimeSeconds);
      var powerLevelAddedFromDivine = this.divineIncome.times(this.divineSynergyMult).times(this.divinePowerLevelMultiplier).times(deltaTimeSeconds);
      this.powerLevel = this.powerLevel.plus(powerLevelAddedFromForce).plus(powerLevelAddedFromWisdom).plus(powerLevelAddedFromEnergy).plus(powerLevelAddedFromDivine);
      if (this.powerLevel.gt(this.maxPowerLevelAchieved)) {
        this.maxPowerLevelAchieved = this.powerLevel;
      }
      this.powerLevelFromForce = this.powerLevelFromForce.plus(powerLevelAddedFromForce);
      this.powerLevelFromWisdom = this.powerLevelFromWisdom.plus(powerLevelAddedFromWisdom);
      this.powerLevelFromEnergy = this.powerLevelFromEnergy.plus(powerLevelAddedFromEnergy);
      this.powerLevelFromDivine = this.powerLevelFromDivine.plus(powerLevelAddedFromDivine);
    }
  }, {
    key: "updateRebirthGainCalculation",
    value: function updateRebirthGainCalculation() {
      var powerLevel = this.powerLevel;
      var essenceGain = powerLevel.dividedBy(1e40).log10().plus(1).max(1).round();
      var newRebirthTime = Date.now();
      var timeSinceLastRebirth = newRebirthTime - this.lastRebirth1;
      // Convert timeSinceLastRebirth from milliseconds to hours
      var timeSinceLastRebirthHours = timeSinceLastRebirth / 3600000; // 1 hour = 3600000 milliseconds
      // Increase essenceGain by 20% for each hour since the last rebirth
      essenceGain = essenceGain.times(1 + 0.2 * timeSinceLastRebirthHours);
      // ----

      this.essenceGainOnNextRebirth1 = (0, _decimal.DEC)(essenceGain);
    }
  }, {
    key: "updateCurrencyMult",
    value: function updateCurrencyMult(data) {
      var valueType = data.valueType;
      var valueAmount = data.valueAmount;
      var valueTypeMap = {
        'forcePowerLevelMultiplier': {
          'powerLevelFrom': 'powerLevelFromForce',
          'multiplier': 'forcePowerLevelMultiplier'
        },
        'wisdomPowerLevelMultiplier': {
          'powerLevelFrom': 'powerLevelFromWisdom',
          'multiplier': 'wisdomPowerLevelMultiplier'
        },
        'energyPowerLevelMultiplier': {
          'powerLevelFrom': 'powerLevelFromEnergy',
          'multiplier': 'energyPowerLevelMultiplier'
        },
        'divinePowerLevelMultiplier': {
          'powerLevelFrom': 'powerLevelFromDivine',
          'multiplier': 'divinePowerLevelMultiplier'
        }
      };
      var mappedValues = valueTypeMap[valueType];
      if (mappedValues) {
        //set power level from source to base level with no multiplier
        var newPowerLevelFromSource = this[mappedValues.powerLevelFrom].div(this[mappedValues.multiplier]);

        //update new multiplier
        this[mappedValues.multiplier] = this[mappedValues.multiplier].times(valueAmount);

        //calculate new power level contribution from source
        newPowerLevelFromSource = newPowerLevelFromSource.times(this[mappedValues.multiplier]);

        //subtract the old powerLevelFromSource value from overall powerLevel
        var newPowerLevel = this.powerLevel.minus(this[mappedValues.powerLevelFrom]);

        //add the new powerLevelFromSourceValue to power level
        newPowerLevel = newPowerLevel.plus(newPowerLevelFromSource);

        //update powerLevelFromSource and powerLevel with new values
        this[mappedValues.powerLevelFrom] = newPowerLevelFromSource;
        this.powerLevel = newPowerLevel;
      }
    }
  }, {
    key: "updatePropertyValue",
    value: function updatePropertyValue(property, value, operation) {
      // Check if property is a shard
      if (this.shards.has(property)) {
        var currentShardValue = this.shards.get(property);
        if (operation === "add") {
          this.shards.set(property, currentShardValue.plus(value));
        } else if (operation === "subtract") {
          if (currentShardValue.lt(value)) {
            console.error("Not enough ".concat(property, " to subtract."));
            return;
          }
          this.shards.set(property, currentShardValue.minus(value));
        }
      }
      // If not a shard, check if it's a valid property
      else if (this.hasOwnProperty(property)) {
        var currentProperty = this[property];
        if (!(currentProperty instanceof _break_eternityMin.default)) {
          console.error("Property ".concat(property, " is not a valid Decimal property."));
          return;
        }
        if (operation === "add") {
          this[property] = currentProperty.plus(value);
        } else if (operation === "subtract") {
          if (currentProperty.lt(value)) {
            // console.error(`Not enough ${property} to subtract.`);
            return;
          }
          this[property] = currentProperty.minus(value);
        } else if (operation === "replaceIfGreater") {
          if (value.gt(currentProperty)) {
            this[property] = value;
          }
        } else if (operation === "replaceIfLesser") {
          if (value.lt(currentProperty)) {
            this[property] = value;
          }
        }
      }
      // If it's not a valid property or shard, throw error
      else {
        console.error("Property ".concat(property, " does not exist."));
        return;
      }
    }
  }, {
    key: "queryPropertyValues",
    value: function queryPropertyValues(type) {
      var _this2 = this;
      var properties = [
      // currencies
      'force', 'wisdom', 'energy', 'divine', 'essence', 'skillpoints', 'crystal', 'radiance', 'powerLevel',
      // lifetime stats
      'lifetimeForceEarned', 'lifetimeWisdomEarned', 'lifetimeEnergyEarned', 'lifetimeDivineEarned', 'lifetimeCrystalEarned', 'lifetimeEssenceEarned', 'totalPlaytime',
      //exploration stats
      'maxProgressionWorld', 'maxProgressionRegion', 'lifetimeZoneCompletions', 'lifetimeRegionProgressions', 'lifetimeWorldProgressions',
      //tournament stats
      'maxTournamentRank', 'lifetimeKills', 'lifetimeFighterTiersDefeated'];
      if (type === 'all') {
        var allResources = [];
        properties.forEach(function (prop) {
          if (prop in _this2) {
            allResources.push({
              'type': prop,
              'value': _this2[prop]
            });
          }
        });
        this.shards.forEach(function (value, key) {
          return allResources.push({
            'type': key,
            'value': value
          });
        });
        return allResources;
      } else if (properties.includes(type) && type in this) {
        return this[type];
      } else if (this.shards.has(type)) {
        return this.shards.get(type);
      }
    }
  }]);
}();
},{"../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js","../Utilities/decimal.js":"components/Utilities/decimal.js","../Features/Skills/SkillTree.js":"components/Features/Skills/SkillTree.js","../Features/Achievements/AchievementGrid.js":"components/Features/Achievements/AchievementGrid.js","../Features/Odyssey/WorldManager.js":"components/Features/Odyssey/WorldManager.js"}],"components/Core/UnlockManager.js":[function(require,module,exports) {
var define;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var UnlockManager = exports.default = /*#__PURE__*/function () {
  function UnlockManager(eventManager, gameManager) {
    _classCallCheck(this, UnlockManager);
    this.eventManager = eventManager;
    this.gameManager = gameManager;
    this.unlocks = new Map(); // Map to store unlock conditions
    this.completedUnlocks = new Map(); //map to store completed unlocks

    this.isChecking = false;
    this.checkLock = Promise.resolve();
    this.eventManager.addListener('reEngage-unlock', this.reEngageUnlock.bind(this));
    this.eventManager.addListener('check-unlocks', this.checkUnlocks.bind(this));
    this.eventManager.addListener('complete-all-unlocks', this.completeAllUnlocks.bind(this));
  }
  return _createClass(UnlockManager, [{
    key: "checkUnlocks",
    value: function () {
      var _checkUnlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this = this;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!this.isChecking) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              this.isChecking = true;
              this.checkLock = new Promise(function (resolve) {
                var tempCompletedUnlocks = _this.processConditions();
                if (tempCompletedUnlocks.size > 0) {
                  _this.processTriggers(tempCompletedUnlocks);
                }
                resolve();
              });
              _context.next = 6;
              return this.checkLock;
            case 6:
              this.isChecking = false;
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function checkUnlocks() {
        return _checkUnlocks.apply(this, arguments);
      }
      return checkUnlocks;
    }()
  }, {
    key: "processConditions",
    value: function processConditions() {
      var _this2 = this;
      var tempCompletedArray = new Map();
      var allResources = this.gameManager.gameContent.queryPropertyValues("all");
      var _iterator = _createForOfIteratorHelper(this.unlocks),
        _step;
      try {
        var _loop = function _loop() {
          var _step$value = _slicedToArray(_step.value, 2),
            id = _step$value[0],
            unlock = _step$value[1];
          var isCompleted = false;
          if (unlock.category === "id") {
            switch (unlock.conditionType) {
              case 'maxLevel':
                if (unlock.dependent.level.gte(unlock.dependent.maxLevel)) {
                  isCompleted = true;
                }
                break;
              case 'level':
              case 'manualLevel':
                if (unlock.dependent[unlock.conditionType].gte(unlock.conditionValue)) {
                  isCompleted = true;
                }
                break;
              case 'active':
              case 'isCompleted':
              case 'isDefeated':
              case 'isProgressed':
              case 'isClaimed':
                if (unlock.dependent[unlock.conditionType] === unlock.conditionValue) {
                  isCompleted = true;
                }
                break;
            }
          } else if (unlock.category === "stat") {
            var matchingResource = allResources.find(function (resource) {
              return resource.type === unlock.conditionType;
            });
            if (unlock.conditionValue.lte(matchingResource.value)) {
              isCompleted = true;
            }
          } else if (unlock.category === "statInverse") {
            var _matchingResource = allResources.find(function (resource) {
              return resource.type === unlock.conditionType;
            });
            if (_matchingResource.value.lte(unlock.conditionValue)) {
              isCompleted = true;
            }
          }
          if (isCompleted) {
            tempCompletedArray.set(id, unlock);
            _this2.unlocks.delete(id);
          }
        };
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return tempCompletedArray;
    }
  }, {
    key: "processTriggers",
    value: function processTriggers(tempCompletedArray) {
      var notification = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var _iterator2 = _createForOfIteratorHelper(tempCompletedArray),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
            id = _step2$value[0],
            unlock = _step2$value[1];
          if (this[unlock.triggerType]) {
            //process the unlock trigger function
            this[unlock.triggerType](unlock);
            //add completed and processed unlocks to the primary completed unlocks array
            this.completedUnlocks.set(id, unlock);
            if (notification) {
              this.triggerNotification(unlock);
            }
          }
          this.unlocks.delete(unlock.id);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "triggerNotification",
    value: function triggerNotification(unlock) {
      if (!this.gameManager.notificationsToggled) {
        return;
      }
      if (!unlock.target) {
        return;
      }
      if (unlock.target && unlock.target.featureType === "zone") {
        return;
      }
      var targetName;
      var targetConstructor;
      targetName = unlock.target.name;
      targetConstructor = unlock.target.constructor.name;

      //filter out some spam unlock notifications
      if (targetConstructor === "Mod" || targetConstructor === "Skill" || targetConstructor === "Array") {
        return;
      }

      //extra formatting
      if (unlock.target.featureType) {
        if (unlock.target.featureType === "zone" && unlock.target.zoneType === "legendaryBoss") {
          targetType = "Legendary Boss";
        }
      }
      this.eventManager.dispatchEvent('triggerNotification', {
        targetType: targetConstructor,
        targetName: targetName,
        triggerType: unlock.triggerType
      });
    }
  }, {
    key: "buttonEnable",
    value: function buttonEnable(unlock) {
      var button = document.getElementById(unlock.triggerValue);
      button.disabled = false;
      button.classList.remove("disabled");
      button.classList.add("enabled");
      button.style.opacity = 1;
    }
  }, {
    key: "tabEnable",
    value: function tabEnable(unlock) {
      //need to set tab targets at this stage for now, since not accessible on init

      //set tab active
      unlock.target = this.gameManager.findObjectById(unlock.targetID);
      unlock.target.setActive();
      if (unlock.target.parentTab) {
        unlock.target.parentTab.hasBeenOpened = false;
      }

      //if triggerValue, this indicates a realm tab unlock, so then set realm active
      if (unlock.triggerValue) {
        var realm = this.gameManager.findObjectById(unlock.triggerValue.mag);
        realm.setActive();
      }
    }
  }, {
    key: "transferUnlockToCompleted",
    value: function transferUnlockToCompleted(unlock) {
      this.completedUnlocks.push(unlock);
      this.unlocks.delete(unlock.id);
      console.error(unlock.target);
    }
  }, {
    key: "evolve",
    value: function evolve(unlock) {
      unlock.target.evolve();
    }
  }, {
    key: "headbandLevelActivate",
    value: function headbandLevelActivate(unlock) {
      var _this3 = this;
      //set headband mod active
      unlock.target.setActive();
      //level up headband pseudo object
      var pseudoObject = this.gameManager.findObjectById(800);
      pseudoObject.active = true;
      pseudoObject.level = pseudoObject.level.plus(1);

      //headband mods generally have type targets, in which case they cant just update observers normally
      unlock.target.modTreeReferences.forEach(function (modTree) {
        if (modTree.parent.active) {
          modTree.buildTree();
          _this3.eventManager.dispatchEvent('updateFeatureValues', {
            target: modTree.parent,
            isNewLvl: false
          });
        }
      });
    }
  }, {
    key: "setUnlocked",
    value: function setUnlocked(unlock) {
      if (Array.isArray(unlock.target)) {
        unlock.target.forEach(function (target) {
          if (target && typeof target.setUnlocked === 'function') {
            target.setUnlocked();
          }
        });
      } else if (unlock.target && typeof unlock.target.setUnlocked === 'function') {
        unlock.target.setUnlocked();
      }
    }
  }, {
    key: "setActive",
    value: function setActive(unlock) {
      if (Array.isArray(unlock.target)) {
        unlock.target.forEach(function (target) {
          if (target && typeof target.setActive === 'function') {
            target.setActive();
          }
        });
      } else if (unlock.target && typeof unlock.target.setActive === 'function') {
        unlock.target.setActive();
      }
    }
  }, {
    key: "completeAllUnlocks",
    value: function completeAllUnlocks() {
      //Unlock Tabs first
      var tempCompletedUnlocks = new Map();
      var _iterator3 = _createForOfIteratorHelper(this.unlocks),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
            id = _step3$value[0],
            unlock = _step3$value[1];
          if (unlock.triggerType === "tabEnable" || unlock.id <= 11010 && unlock.id >= 11000) {
            tempCompletedUnlocks.set(id, unlock);
            this.unlocks.delete(id);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this.processTriggers(tempCompletedUnlocks, false);

      // Then unlock the rest
      var tempUnlocks2 = new Map();
      var _iterator4 = _createForOfIteratorHelper(this.unlocks),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _slicedToArray(_step4.value, 2),
            _id = _step4$value[0],
            _unlock = _step4$value[1];
          tempUnlocks2.set(_id, _unlock);
          this.unlocks.delete(_id);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this.processTriggers(tempUnlocks2, false);
      var D = function D(num) {
        return (0, _decimal.DEC)(num);
      };
      var resourceUpdates = [{
        property: "powerLevel",
        value: D(100000),
        operation: 'add'
      }, {
        property: "force",
        value: D(100000),
        operation: 'add'
      }, {
        property: "wisdom",
        value: D(100000),
        operation: 'add'
      }, {
        property: "energy",
        value: D(100000),
        operation: 'add'
      }, {
        property: "divine",
        value: D(100000),
        operation: 'add'
      }, {
        property: "crystal",
        value: D(100000),
        operation: 'add'
      }, {
        property: "radiance",
        value: D(100000),
        operation: 'add'
      }];
      this.eventManager.dispatchEvent('batchUpdatePropertyValues', resourceUpdates);
    }
  }, {
    key: "reEngageUnlock",
    value: function () {
      var _reEngageUnlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {
        var _iterator5, _step5, unlock, _iterator6, _step6, _unlock2, _iterator7, _step7, _step7$value, id, _unlock3;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.checkLock;
            case 2:
              this.isChecking = true;
              if (!(event.detail.type === "milestone")) {
                _context2.next = 24;
                break;
              }
              _iterator5 = _createForOfIteratorHelper(this.completedUnlocks.values());
              _context2.prev = 5;
              _iterator5.s();
            case 7:
              if ((_step5 = _iterator5.n()).done) {
                _context2.next = 14;
                break;
              }
              unlock = _step5.value;
              if (!(!unlock.target || !unlock.target.name)) {
                _context2.next = 11;
                break;
              }
              return _context2.abrupt("return");
            case 11:
              if (unlock.dependentID === event.detail.id && unlock.target.name.includes("milestone")) {
                //set milestone mod inactive
                unlock.target.active = false;

                //rebuild milestone object's buildtree to remove mod's mult
                unlock.dependent.modTreesMap.get("production").buildTree();

                // Remove the unlock from the completedUnlocks map and re-add to the unlocks map
                this.completedUnlocks.delete(unlock.id);
                this.unlocks.set(unlock.id, unlock);
              }
            case 12:
              _context2.next = 7;
              break;
            case 14:
              _context2.next = 19;
              break;
            case 16:
              _context2.prev = 16;
              _context2.t0 = _context2["catch"](5);
              _iterator5.e(_context2.t0);
            case 19:
              _context2.prev = 19;
              _iterator5.f();
              return _context2.finish(19);
            case 22:
              _context2.next = 25;
              break;
            case 24:
              if (event.detail.type === "realm-feature-unlock") {
                _iterator6 = _createForOfIteratorHelper(this.completedUnlocks.values());
                try {
                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                    _unlock2 = _step6.value;
                    //realm feature unlocks manually aded by ID
                    if (_unlock2.id >= 1200 && _unlock2.id <= 1209 || _unlock2.id >= 621 && _unlock2.id <= 629 || _unlock2.id >= 2201 && _unlock2.id <= 2209 || _unlock2.id >= 721 && _unlock2.id <= 729) {
                      _unlock2.target.active = false;

                      // Remove the unlock from the completedUnlocks map and re-add to the unlocks map
                      this.completedUnlocks.delete(_unlock2.id);
                      this.unlocks.set(_unlock2.id, _unlock2);
                    }
                  }
                } catch (err) {
                  _iterator6.e(err);
                } finally {
                  _iterator6.f();
                }
              } else {
                // Find the unlock with the given targetID in the completedUnlocks map
                _iterator7 = _createForOfIteratorHelper(this.completedUnlocks.entries());
                try {
                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                    _step7$value = _slicedToArray(_step7.value, 2), id = _step7$value[0], _unlock3 = _step7$value[1];
                    if (_unlock3.targetID === event.detail.id) {
                      // Remove the unlock from the completedUnlocks map
                      this.completedUnlocks.delete(id);

                      // Re-add the unlock to the unlocks map
                      this.unlocks.set(id, _unlock3);

                      // Optionally break the loop after finding and processing the first matching unlock
                      // break;
                    }
                  }
                } catch (err) {
                  _iterator7.e(err);
                } finally {
                  _iterator7.f();
                }
              }
            case 25:
              this.isChecking = false;
            case 26:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[5, 16, 19, 22]]);
      }));
      function reEngageUnlock(_x) {
        return _reEngageUnlock.apply(this, arguments);
      }
      return reEngageUnlock;
    }()
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Utilities/MinHeap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var MinHeap = exports.default = /*#__PURE__*/function () {
  function MinHeap() {
    _classCallCheck(this, MinHeap);
    this.heap = [];
  }
  return _createClass(MinHeap, [{
    key: "getLeftChildIndex",
    value: function getLeftChildIndex(parentIndex) {
      return 2 * parentIndex + 1;
    }
  }, {
    key: "getRightChildIndex",
    value: function getRightChildIndex(parentIndex) {
      return 2 * parentIndex + 2;
    }
  }, {
    key: "getParentIndex",
    value: function getParentIndex(childIndex) {
      return Math.floor((childIndex - 1) / 2);
    }
  }, {
    key: "hasLeftChild",
    value: function hasLeftChild(index) {
      return this.getLeftChildIndex(index) < this.heap.length;
    }
  }, {
    key: "hasRightChild",
    value: function hasRightChild(index) {
      return this.getRightChildIndex(index) < this.heap.length;
    }
  }, {
    key: "hasParent",
    value: function hasParent(index) {
      return this.getParentIndex(index) >= 0;
    }
  }, {
    key: "leftChild",
    value: function leftChild(index) {
      return this.heap[this.getLeftChildIndex(index)];
    }
  }, {
    key: "rightChild",
    value: function rightChild(index) {
      return this.heap[this.getRightChildIndex(index)];
    }
  }, {
    key: "parent",
    value: function parent(index) {
      return this.heap[this.getParentIndex(index)];
    }
  }, {
    key: "swap",
    value: function swap(indexOne, indexTwo) {
      var temp = this.heap[indexOne];
      this.heap[indexOne] = this.heap[indexTwo];
      this.heap[indexTwo] = temp;
    }
  }, {
    key: "peek",
    value: function peek() {
      if (this.heap.length === 0) throw "Heap is empty";
      return this.heap[0];
    }
  }, {
    key: "poll",
    value: function poll() {
      if (this.heap.length === 0) throw "Heap is empty";
      var item = this.heap[0];
      this.heap[0] = this.heap.pop();
      this.heapifyDown();
      return item;
    }
  }, {
    key: "add",
    value: function add(item) {
      if (!this.contains(item)) {
        this.heap.push(item);
        this.heapifyUp();
      }
    }
  }, {
    key: "heapifyUp",
    value: function heapifyUp() {
      var index = this.heap.length - 1;
      while (this.hasParent(index) && this.parent(index).costNextSingle.gt(this.heap[index].costNextSingle)) {
        this.swap(this.getParentIndex(index), index);
        index = this.getParentIndex(index);
      }
    }
  }, {
    key: "heapifyDown",
    value: function heapifyDown() {
      var index = 0;
      while (this.hasLeftChild(index)) {
        var smallerChildIndex = this.getLeftChildIndex(index);
        if (this.hasRightChild(index) && this.rightChild(index).costNextSingle.lt(this.leftChild(index).costNextSingle)) {
          smallerChildIndex = this.getRightChildIndex(index);
        }
        if (this.heap[index].costNextSingle.lt(this.heap[smallerChildIndex].costNextSingle)) {
          break;
        } else {
          this.swap(index, smallerChildIndex);
        }
        index = smallerChildIndex;
      }
    }
  }, {
    key: "remove",
    value: function remove(item) {
      var index = this.heap.findIndex(function (element) {
        return element.id === item.id;
      });
      if (index === -1) {
        throw new Error('Item not found in heap');
      }

      // Swap the found item with the last item in the heap
      this.swap(index, this.heap.length - 1);

      // Remove the last item in the heap (which is now the item we want to remove)
      this.heap.pop();

      // Re-heapify to maintain heap property
      this.heapifyDown(index);
      this.heapifyUp(index);
    }
  }, {
    key: "contains",
    value: function contains(item) {
      return this.heap.some(function (element) {
        return element.id === item.id;
      });
    }

    // refresh() {
    // 	let startIdx = Math.floor((this.heap.length - 2) / 2);
    // 	for (let i = startIdx; i >= 0; i--) {
    // 		this.heapifyDown(i);
    // 	}
    // }

    // it's worth noting that the refresh method in the provided MinHeap class only re-heapifies the heap from the last non-leaf node to the root. If there are modifications to leaf nodes, they may not be properly heapified. You can modify the refresh method to iterate through all nodes to ensure a complete re-heapification:
  }, {
    key: "refresh",
    value: function refresh() {
      for (var i = Math.floor(this.heap.length / 2); i >= 0; i--) {
        this.heapifyDown(i);
      }
    }
  }]);
}();
},{}],"components/Core/AutomationManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../Utilities/break_eternity.min.js"));
var _decimal = require("../Utilities/decimal.js");
var _MinHeap = _interopRequireDefault(require("../Utilities/MinHeap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // large number library
var AutomationManager = exports.default = /*#__PURE__*/function () {
  function AutomationManager(eventManager, gameManager) {
    _classCallCheck(this, AutomationManager);
    this.eventManager = eventManager;
    this.gameManager = gameManager;
    this.gameContent = gameManager.gameContent;
    this.forceHeap = new _MinHeap.default();
    this.wisdomHeap = new _MinHeap.default();
    this.energyHeap = new _MinHeap.default();
    this.divineHeap = new _MinHeap.default();
    this.artifactAutobuys = [];
  }
  return _createClass(AutomationManager, [{
    key: "processAutobuying",
    value: function processAutobuying() {
      this.autoTournamentProgression();
      this.autoConquestProgression();
      this.autobuyArtifacts();
      this.autoTraining(this.gameContent.force, "force");
      this.autoTraining(this.gameContent.wisdom, "wisdom");
      this.autoTraining(this.gameContent.energy, "energy");
      this.autoTraining(this.gameContent.divine, "divine");
    }
  }, {
    key: "autoTraining",
    value: function autoTraining(resource, resourceType) {
      // Validate resourceType
      var validTypes = ['force', 'wisdom', 'energy', 'divine'];
      if (!validTypes.includes(resourceType)) {
        throw new Error('Invalid resourceType ' + resourceType);
      }
      var minHeap;
      switch (resourceType) {
        case 'force':
          minHeap = this.forceHeap;
          break;
        case 'wisdom':
          minHeap = this.wisdomHeap;
          break;
        case 'energy':
          minHeap = this.energyHeap;
          break;
        case 'divine':
          minHeap = this.divineHeap;
          break;
      }
      if (!minHeap || minHeap.heap.length === 0) {
        return;
      }

      //accomodate constantly fluctuating costs
      minHeap.refresh();
      var tempResource = (0, _decimal.DEC)(resource);
      var canPurchase = true;
      while (canPurchase) {
        var feature = minHeap.peek();
        var tempFeatureCostNext = feature.costNextSingle;
        var tempFeatureProdNext = feature.prodNextSingle;

        //continue if can afford one
        if (tempFeatureCostNext.lte(tempResource)) {
          var ratio = tempResource.div(tempFeatureCostNext);
          var purchaseCount = _break_eternityMin.default.max(1, ratio.plus(1).log(2)).floor();
          if (ratio.gte(10)) {
            while (purchaseCount.gt(1) && feature.calculateCostN(purchaseCount).gt(tempResource)) {
              purchaseCount = purchaseCount.minus(1);
            }
          }

          //reduce purchase level if will push feature above max
          if (purchaseCount.gt(feature.maxLevel.minus(feature.level))) {
            purchaseCount = feature.maxLevel.minus(feature.level);
            tempFeatureCostNext = feature.calculateCostN(purchaseCount);
            tempFeatureProdNext = feature.calculateProdN(purchaseCount);
            tempResource = tempResource.minus(tempFeatureCostNext);
            this.gameManager.handlePurchase(feature.id, purchaseCount);

            //removed maxed feature from heap
            minHeap.poll();
            break;
          }

          // set prod/cost values before purchasing
          tempFeatureCostNext = feature.calculateCostN(purchaseCount);
          tempFeatureProdNext = feature.calculateProdN(purchaseCount);

          // floating point calculations sometimes trigger this, at which point it should subtract 1 from purchase count
          if (tempFeatureCostNext.gt(tempResource)) {
            // console.error("error, autobuy will subtract more resource than available", feature.name,tempFeatureCostNext,tempResource);
            purchaseCount = purchaseCount.minus(1);
            if (purchaseCount.lt(1)) {
              break;
            }
          }

          // feature.nextLevelIncrement = purchaseCount;
          tempResource = tempResource.minus(tempFeatureCostNext);
          this.gameManager.handlePurchase(feature.id, purchaseCount);
          minHeap.poll();
          if (feature.level.neq(feature.maxLevel)) {
            minHeap.add(feature);
          }
        } else {
          canPurchase = false;
        }
      }
    }
  }, {
    key: "autoConquestProgression",
    value: function autoConquestProgression() {
      if (!this.gameManager.gameContent.worldManager.autoUnlocked) {
        return;
      }
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.zones),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var zone = _step.value;
          if (zone.defeatCount.lt(1)) {
            continue;
          }
          if (zone.isConquesting || !zone.active || zone.isDefeated || !zone.unlocked) {
            continue;
          }
          if (zone.zoneType === "legendaryBoss") {
            if (!zone.active) {
              continue;
            }
            if (zone.parent) {
              if (!zone.parent.active) {
                continue;
              }
            }
            if (zone.children) {
              if (zone.children.length > 0) {
                var hasActiveChild = false;
                var _iterator2 = _createForOfIteratorHelper(zone.children),
                  _step2;
                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var childZone = _step2.value;
                    if (childZone.active) {
                      hasActiveChild = true;
                      break;
                    }
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }
                if (!hasActiveChild) {
                  continue;
                }
              }
            }
            zone.startConquest();
          } else {
            var currentResource = this.gameManager.gameContent.queryPropertyValues(zone.costType);
            if (currentResource.gte(zone.costNextMultPurchase)) {
              zone.startConquest();
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "autoTournamentProgression",
    value: function autoTournamentProgression() {
      if (!this.gameManager.gameContent.tournament.autoUnlocked) {
        return;
      }
      var _iterator3 = _createForOfIteratorHelper(this.gameManager.gameContent.tournament.fighters),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var fighter = _step3.value;
          if (fighter.defeatCount.lt(1)) {
            continue;
          }
          if (fighter.isDefeated || fighter.isFighting || !fighter.active) {
            continue;
          } else {
            var currentResource = this.gameManager.gameContent.queryPropertyValues(fighter.costType);
            if (currentResource.gte(fighter.costNextMultPurchase)) {
              this.gameManager.eventManager.dispatchEvent('startFight', {
                id: fighter.id,
                triggeredByEvent: true
              });
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "autobuyArtifacts",
    value: function autobuyArtifacts() {
      var _this = this;
      var _iterator4 = _createForOfIteratorHelper(this.artifactAutobuys),
        _step4;
      try {
        var _loop = function _loop() {
          var artifact = _step4.value;
          if (!artifact.autoUnlocked) {
            return 1; // break
          }
          var tempFeatureCostNext = artifact.costNextSingle;
          var tempFeatureProdNext = artifact.prodNextSingle;
          var allResources = _this.gameManager.gameContent.queryPropertyValues("all");
          var tempResource = (0, _decimal.DEC)(allResources.find(function (resource) {
            return resource.type === artifact.costType;
          }).value);
          var purchased = true;
          while (purchased) {
            if (tempFeatureCostNext.lte(tempResource) && artifact.level.lt(artifact.maxLevel)) {
              var ratio = tempResource.dividedBy(tempFeatureCostNext);
              var purchaseCount = _break_eternityMin.default.max(1, ratio.plus(1).log(2)).floor();
              if (ratio.gte(10)) {
                while (purchaseCount.greaterThan(1) && artifact.calculateCostN(purchaseCount).gt(tempResource)) {
                  purchaseCount = purchaseCount.minus(1);
                }
              }

              // if the purchase count would increase level beyond maxLevel, adjust purchaseCount
              if (artifact.level.plus(purchaseCount).gt(artifact.maxLevel)) {
                purchaseCount = artifact.maxLevel.minus(artifact.level);
              }
              tempFeatureCostNext = artifact.calculateCostN(purchaseCount);
              tempFeatureProdNext = artifact.calculateProdN(purchaseCount);
              tempResource = tempResource.minus(tempFeatureCostNext);
              _this.gameManager.handlePurchase(artifact.id, purchaseCount);
              if (artifact.level.neq(artifact.maxLevel)) {}
            } else {
              purchased = false;
            }

            // break the loop if maxLevel has been reached
            if (artifact.level.gte(artifact.maxLevel)) {
              break;
            }
          }
        };
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          if (_loop()) break;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }]);
}();
},{"../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js","../Utilities/decimal.js":"components/Utilities/decimal.js","../Utilities/MinHeap.js":"components/Utilities/MinHeap.js"}],"components/Core/_GameManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
var _GameContent = _interopRequireDefault(require("./GameContent.js"));
var _UnlockManager = _interopRequireDefault(require("./UnlockManager.js"));
var _AutomationManager = _interopRequireDefault(require("./AutomationManager.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GameManager = exports.default = /*#__PURE__*/function () {
  function GameManager(eventManager) {
    var _this = this;
    _classCallCheck(this, GameManager);
    this.eventManager = eventManager;
    this.gameContent = new _GameContent.default(eventManager);
    this.unlockManager = new _UnlockManager.default(eventManager, this);
    this.multiplierString = "1";
    this.notificationsToggled = true;
    this.automationManager = new _AutomationManager.default(eventManager, this);
    this.eventManager.addListener('handlePurchase', function (data) {
      _this.handlePurchase(data.id);
    });
    this.eventManager.addListener('updateFeatureValues', function (data) {
      _this.updateFeatureValues(data.target, data.isNewLvl);
    });
    this.eventManager.addListener('updateNewMultiplierValues', function (data) {
      _this.updateNewMultiplierValues(data.multiplierString, data.feature);
    });
  }
  return _createClass(GameManager, [{
    key: "onTabChange",
    value: function onTabChange(newTab) {
      this.currentTab = newTab;
      this.currentSubTab = newTab.currentSubTabObject;
      var newMultiplierString;
      if (this.currentSubTab && this.currentSubTab.multiplierString) {
        newMultiplierString = this.currentSubTab.multiplierString;
      } else if (this.currentTab.multiplierString) {
        newMultiplierString = this.currentTab.multiplierString;
      } else {
        return;
      }
      this.multiplierString = newMultiplierString;
      this.updateNewMultiplierValues(newMultiplierString);
    }
  }, {
    key: "updateNewMultiplierValues",
    value: function updateNewMultiplierValues() {
      var newMultiplierString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.multiplierString;
      var feature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      this.multiplierString = newMultiplierString;
      var multipliableFeatures;
      if (feature) {
        multipliableFeatures = [feature];
      } else {
        var multipliableTabName = this.getMultipliableTabName();
        if (multipliableTabName) {
          multipliableFeatures = this.getFeaturesByTabName(multipliableTabName);
          multipliableFeatures = multipliableFeatures.filter(function (feature) {
            return !feature.level.equals(feature.maxLevel);
          });
        } else {
          multipliableFeatures = this.gameContent.skills.concat(this.gameContent.zones).concat(this.gameContent.fighters).concat(this.gameContent.artifacts).concat(this.gameContent.forgeUpgrades).filter(function (feature) {
            return !feature.level.equals(feature.maxLevel);
          });
        }
      }
      this.processMultiplierValue(newMultiplierString, multipliableFeatures);
    }
  }, {
    key: "processMultiplierValue",
    value: function processMultiplierValue(multiplier, features) {
      var _this2 = this;
      if (multiplier === "Next") {
        var _iterator = _createForOfIteratorHelper(features),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var feature = _step.value;
            // if (["training", "generator", "artifact"].includes(feature.featureType)) {
            if (["training", "generator"].includes(feature.featureType)) {
              feature.updateValuesMilestone();
            } else {
              feature.updateValuesDigit((0, _decimal.DEC)(1));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (multiplier === "Max") {
        var _iterator2 = _createForOfIteratorHelper(features),
          _step2;
        try {
          var _loop = function _loop() {
            var feature = _step2.value;
            var allResources = _this2.gameContent.queryPropertyValues("all");
            var matchingResource = allResources.find(function (resource) {
              return resource.type === feature.costType;
            });
            feature.updateValuesMax(matchingResource.value);
          };
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        var n = (0, _decimal.DEC)(multiplier);
        var _iterator3 = _createForOfIteratorHelper(features),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _feature = _step3.value;
            _feature.updateValuesDigit(n);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "getMultipliableTabName",
    value: function getMultipliableTabName() {
      if (this.currentTab && this.currentTab.multiplierContainer) {
        return this.currentTab.name;
      } else if (this.currentSubTab && this.currentSubTab.multiplierContainer) {
        return this.currentSubTab.name;
      }
      return null;
    }
  }, {
    key: "getFeaturesByTabName",
    value: function getFeaturesByTabName(tabName) {
      var realmMapping = {
        'force': [this.gameContent.trainings, this.gameContent.realmUpgrades, 10],
        'wisdom': [this.gameContent.generators, this.gameContent.realmUpgrades, 20],
        'energy': [this.gameContent.trainings, this.gameContent.realmUpgrades, 30],
        'divine': [this.gameContent.generators, this.gameContent.realmUpgrades, 40]
      };
      if (realmMapping[tabName]) {
        // console.error(tabName);
        var _realmMapping$tabName = _slicedToArray(realmMapping[tabName], 3),
          feature1 = _realmMapping$tabName[0],
          feature2 = _realmMapping$tabName[1],
          realmID = _realmMapping$tabName[2];
        return feature1.filter(function (training) {
          return training.realmID === realmID;
        }).concat(feature2.filter(function (upgrade) {
          return upgrade.realmID === realmID;
        }));
      }

      // console.error(tabName);
      switch (tabName) {
        case 'artifacts':
          return this.gameContent.artifacts;
        case 'radiance':
          return this.gameContent.radianceUpgrades;
        case 'essence':
          return this.gameContent.essenceUpgrades;
      }
    }
  }, {
    key: "handlePurchase",
    value: function handlePurchase(featureID) {
      var purchaseCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var feature = this.findObjectById(featureID);
      this.deductFeatureCost(feature);
      this.updateFeatureLevel(feature, purchaseCount);
      feature.updateFeatureValues(true, this);
      this.updateNewMultiplierValues(this.multiplierString, feature);
    }
  }, {
    key: "deductFeatureCost",
    value: function deductFeatureCost(feature) {
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: feature.costType,
        value: feature.costNextMultPurchase,
        operation: 'subtract'
      });
    }
  }, {
    key: "updateFeatureLevel",
    value: function updateFeatureLevel(feature, purchaseCount) {
      var count = null;
      if (purchaseCount) {
        count = (0, _decimal.DEC)(purchaseCount);
      }
      feature.levelUp("manual", count);
    }
  }, {
    key: "updateFeatureValues",
    value: function updateFeatureValues(feature, isNewLvl) {
      feature.updateFeatureValues(isNewLvl, this);
    }
  }, {
    key: "processGamePropertyUpdates",
    value: function processGamePropertyUpdates(deltaTimeSeconds) {
      var _iterator4 = _createForOfIteratorHelper(this.gameContent.generatorChains),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var chain = _step4.value;
          if (chain.active) {
            chain.calculateChain(this, deltaTimeSeconds);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this.gameContent.updateCurrencySynergyMultipliers();
      this.gameContent.updateShardBonusMultipliers();
      this.gameContent.processTrainingIncome(deltaTimeSeconds);
      this.gameContent.updatePowerLevel(deltaTimeSeconds);
      this.gameContent.updateLifetimeValues(deltaTimeSeconds);
      this.gameContent.updateRebirthGainCalculation(deltaTimeSeconds);
      this.automationManager.processAutobuying();
      this.updateZoneCompletionTimes();
      this.updateNewMultiplierValues(this.multiplierString);
    }
  }, {
    key: "updateZoneCompletionTimes",
    value: function updateZoneCompletionTimes() {
      //reduce zone conquest time based on power level and timeModifier upgrades
      var powerFactor = (0, _decimal.DEC)(1).plus(this.gameContent.powerLevel.plus(1).ln().times(0.3));
      var timeModifier = this.gameContent.timeModifierUpgrade;

      //reduce zone conquest time based on power level
      var _iterator5 = _createForOfIteratorHelper(this.gameContent.zones),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var zone = _step5.value;
          zone.conquestTime = zone.baseConquestTime.div(timeModifier).div(powerFactor);
          // zone.conquestTime = zone.baseConquestTime.div(powerFactor);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "findObjectById",
    value: function findObjectById(id) {
      var object = this.gameContent.idToObjectMap.get(id);
      return object;
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js","./GameContent.js":"components/Core/GameContent.js","./UnlockManager.js":"components/Core/UnlockManager.js","./AutomationManager.js":"components/Core/AutomationManager.js"}],"components/UI/Core/NumberFormatter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../../Utilities/break_eternity.min.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// large number library
var NumberFormatter = exports.default = /*#__PURE__*/function () {
  function NumberFormatter(eventManager, ui) {
    var _this = this;
    _classCallCheck(this, NumberFormatter);
    this.eventManager = eventManager;
    this.ui = ui;
    this.eventManager.addListener('updateNumberNotation', function (data) {
      if (data && data.value) {
        _this.updateNumberNotation(data.value);
      }
    });
  }
  return _createClass(NumberFormatter, [{
    key: "updateNumberNotation",
    value: function updateNumberNotation(value) {
      this.numberNotation = value;
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(num) {
      if (num.lte(9999)) {
        return Number(num.toFixed(2));
      } else {
        switch (this.numberNotation) {
          case "scientific":
            return num.toExponential(3);
          case "engineering":
            // return `${num.mantissaWithDecimalPlaces(0)}e${num.magnitudeWithDecimalPlaces(1)}`;
            return this.toEngineeringNotation(num);
          case "log10":
            return num.log10().toFixed(0);
          case "toStringWithDecimalPlaces":
            return num.floor().toStringWithDecimalPlaces(3);
          case "toJSON":
            return num.floor().toJSON();
          case "toPrecision":
            return num.floor().toPrecision(3);
          case "toNumber":
            return num.floor().toNumber(2);
          case "string":
            return num.floor().toString(2);
          case "toFixed":
            return num.floor().toFixed(2);
          case "verbose":
            return this.formatNumberVerbose(num);
          case "cute":
            var _num$toExponential$sp = num.toExponential(3).split('e'),
              _num$toExponential$sp2 = _slicedToArray(_num$toExponential$sp, 2),
              mantissa = _num$toExponential$sp2[0],
              exponent = _num$toExponential$sp2[1];
            return "".concat(mantissa, " * 10^").concat(exponent);
          case "abbreviated":
            // need to generate an array with more than 3333 suffixes to handle numbers up to 10^9999
            var suffixes = this.generateSuffixes();
            var suffixNum = Math.max(0, Math.floor(num.log10() / 3));
            if (suffixNum >= suffixes.length) {
              return num.toExponential(3); // fallback to scientific notation if the number is too large
            }
            var shortValue = num.div(_break_eternityMin.default.pow(10, suffixNum * 3));
            return "".concat(shortValue.toFixed(2)).concat(suffixes[suffixNum]);
          default:
            return num.toExponential(3);
        }
      }
    }
  }, {
    key: "generateVerboseNotationUnits",
    value: function generateVerboseNotationUnits() {
      var units = ['', 'K', 'M', 'B', 'T', 'Qa', 'Qi', 'Sx', 'Sp', 'Oc', 'No', 'Dc'];
      var alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');
      for (var i = 0; i < alphabet.length; i++) {
        for (var j = 0; j < alphabet.length; j++) {
          units.push(alphabet[i] + alphabet[j]);
        }
      }
      return units;
    }
  }, {
    key: "formatNumberVerbose",
    value: function formatNumberVerbose(num) {
      var units = this.generateVerboseNotationUnits();
      var unitIndex = Math.floor(num.log10() / 3);
      var value = num.div(_break_eternityMin.default.pow(10, unitIndex * 3));
      var prefix = '';
      if (unitIndex >= 1000) {
        unitIndex -= 1000;
        prefix = 'Y';
      }
      if (unitIndex >= 1000) {
        unitIndex -= 1000;
        prefix = 'Z';
      }
      if (unitIndex >= 1000) {
        unitIndex -= 1000;
        prefix = 'E';
      }

      // Ensure the unit index does not exceed the length of the units array
      if (unitIndex >= units.length) {
        // Fallback to scientific notation if the number is too large
        return num.toExponential(3);
      }
      return "".concat(value.toFixed(2), " ").concat(prefix).concat(units[unitIndex]);
    }
  }, {
    key: "toEngineeringNotation",
    value: function toEngineeringNotation(decimal) {
      var exponent = decimal.e;
      var mantissa = decimal.mantissa;
      if (exponent < 3) {
        return mantissa * Math.pow(10, exponent);
      }
      var engExponent = Math.floor(exponent / 3);
      var remainder = exponent % 3;
      var engMantissa = mantissa * Math.pow(10, remainder);
      return "".concat(engMantissa.toFixed(2), "e").concat(engExponent * 3);
    }
  }, {
    key: "toRoman",
    value: function toRoman(num) {
      if (isNaN(num)) return NaN;
      if (num <= 0 || num >= 4000) return "Invalid Input: Roman numerals are between 1 and 3999.";
      var values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
      var numerals = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
      var roman = "";
      for (var i = 0; i < values.length; i++) {
        while (num >= values[i]) {
          num -= values[i];
          roman += numerals[i];
        }
      }
      return roman;
    }
  }]);
}();
},{"../../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js"}],"components/UI/Core/HotkeyManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var HotkeyManager = exports.default = /*#__PURE__*/function () {
  function HotkeyManager(eventManager, ui) {
    _classCallCheck(this, HotkeyManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.hotkeyButtons = [];
    this.letterHotkeyButtons = [];
    this.hotkeysEnabled = true;
    this.keyDownListener = this.handleKeyDown.bind(this);
    this.eventManager.addListener('updateHotkeyButtons', this.updateHotkeyButtons.bind(this));
    this.eventManager.addListener('hotkeyEnabled', this.enableHotkeys.bind(this));
    this.eventManager.addListener('hotkeyDisabled', this.disableHotkeys.bind(this));
  }
  return _createClass(HotkeyManager, [{
    key: "initHotkeys",
    value: function initHotkeys() {
      //     setTimeout(() => {
      this.attachKeyDownListener();
      this.updateHotkeyButtons();
      //     }, 100);
    }
  }, {
    key: "enableHotkeys",
    value: function enableHotkeys() {
      this.hotkeysEnabled = true;
      // this.attachKeyDownListener();
    }
  }, {
    key: "disableHotkeys",
    value: function disableHotkeys() {
      this.hotkeysEnabled = false;
      // this.detachKeyDownListener();
    }
  }, {
    key: "attachKeyDownListener",
    value: function attachKeyDownListener() {
      document.removeEventListener('keydown', this.keyDownListener);
      document.addEventListener('keydown', this.keyDownListener);
    }
  }, {
    key: "detachKeyDownListener",
    value: function detachKeyDownListener() {
      document.removeEventListener('keydown', this.keyDownListener);
    }
  }, {
    key: "populateHotkeyListDisplay",
    value: function populateHotkeyListDisplay() {
      return "\n            <b>Hotkeys:</b>\n            <div><span style=\"color:yellow;\">Tab/Shift+Tab </span><span>   Main Tab Navigation</span></div>\n            <div><span style=\"color:yellow;\">1-0</span><span>   First 10 Buttons</span></div>\n            <div><span style=\"color:yellow;\">q,e</span><span>   SubTab Navigation</span></div>\n            <div><span style=\"color:yellow;\">w,a,s,d / arrows</span><span>   Miniap Navigation</span></div>\n        ";
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(event) {
      if (this.hotkeysEnabled) {
        if (event.key === "Enter" && event.target.tagName === "BUTTON") {
          event.preventDefault();
        } else if (event.key === 'Tab') {
          event.preventDefault();
          this.handleTabNavigation(event.shiftKey);
        } else if (event.key >= '0' && event.key <= '9') {
          var num = parseInt(event.key);
          num = num === 0 ? 9 : num - 1;
          if (num >= 0 && num < 10 && this.hotkeyButtons[num] && !this.hotkeyButtons[num].disabled && !this.hotkeyButtons[num].classList.contains('disabled')) {
            this.hotkeyButtons[num].click();
          }
        } else if (event.key.toLowerCase() === 'q' || event.key.toLowerCase() === 'e') {
          if (this.letterHotkeyButtons && this.letterHotkeyButtons.length > 1) {
            var currentSubTabIndex = this.letterHotkeyButtons.findIndex(function (btn) {
              return btn.classList.contains('active-tab');
            });
            var nextSubTabIndex = event.key.toLowerCase() === 'q' ? currentSubTabIndex === 0 ? this.letterHotkeyButtons.length - 1 : currentSubTabIndex - 1 : (currentSubTabIndex + 1) % this.letterHotkeyButtons.length;
            if (this.letterHotkeyButtons[nextSubTabIndex] && !this.letterHotkeyButtons[nextSubTabIndex].disabled && !this.letterHotkeyButtons[nextSubTabIndex].classList.contains('disabled')) {
              this.letterHotkeyButtons[nextSubTabIndex].click();
            }
          }
        } else if (this.ui.tabManager.currentTab === "exploration" && this.ui.tabManager.currentSubTab === "odyssey") {
          if (this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType === "region") {
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
              event.preventDefault(); // This prevents the default arrow key actions (like scrolling)
              this.handleMiniMapNavigation(event.key);
            } else if (['w', 'a', 's', 'd'].includes(event.key.toLowerCase())) {
              // This handles the WASD keys
              this.handleMiniMapNavigation(event.key.toLowerCase());
            } else if (['r'].includes(event.key.toLowerCase())) {
              // This handles zone manual hotkey progression
              this.handleZoneHotkeyProgression();
            }
          } else if (this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType === "world") {
            if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {
              event.preventDefault(); // This prevents the default arrow key actions (like scrolling)
              this.hotkeyEnterRegionFromWorld(event.key);
            } else if (['w', 'a', 's', 'd'].includes(event.key.toLowerCase())) {
              // This handles the WASD keys
              this.hotkeyEnterRegionFromWorld(event.key.toLowerCase());
            }
          }
        }
      }
    }
  }, {
    key: "hotkeyEnterRegionFromWorld",
    value: function hotkeyEnterRegionFromWorld(key) {
      var currentWorld = this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld;
      var firstRegion = currentWorld.regions[0];
      this.ui.tabManager.explorationTab.odysseySubTab.mapViewManager.updateMapView(firstRegion);
    }
  }, {
    key: "handleZoneHotkeyProgression",
    value: function handleZoneHotkeyProgression() {
      if (this.ui.tabManager.currentTab === "exploration" && this.ui.tabManager.currentSubTab === "odyssey" && this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType === "region") {
        var success = false;
        var currentRegion = this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion;
        var zones = currentRegion.zones;
        var activeZones = zones.filter(function (zone) {
          return zone.active;
        });
        var _iterator = _createForOfIteratorHelper(activeZones),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var zone = _step.value;
            if (zone.isConquesting || zone.isDefeated || !zone.unlocked) {
              continue;
            }
            var currentResource = this.ui.gameManager.gameContent.queryPropertyValues(zone.costType);
            if (currentResource.gt(zone.costNextMultPurchase)) {
              zone.startConquest();
              success = true;
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        if (!success) {
          console.error("No zones available to conquest");
        }
      }
    }
  }, {
    key: "handleMiniMapNavigation",
    value: function handleMiniMapNavigation(key) {
      var currentRegion = this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion;
      var currentWorld = currentRegion.world;
      var regions = currentWorld.regions;
      var currentIndex = regions.findIndex(function (region) {
        return region === currentRegion;
      });
      var gridDimensions = this.ui.tabManager.explorationTab.odysseySubTab.mapViewManager.miniMap.calculateGridDimensions(currentWorld.regions);
      var targetRegion = null;
      if ((key === 'w' || key === 'ArrowUp') && currentIndex >= gridDimensions.width) {
        targetRegion = regions[currentIndex - gridDimensions.width];
      } else if ((key === 's' || key === 'ArrowDown') && currentIndex < regions.length - gridDimensions.width) {
        targetRegion = regions[currentIndex + gridDimensions.width];
      } else if ((key === 'a' || key === 'ArrowLeft') && currentIndex % gridDimensions.width !== 0) {
        targetRegion = regions[currentIndex - 1];
      } else if ((key === 'd' || key === 'ArrowRight') && (currentIndex + 1) % gridDimensions.width !== 0) {
        targetRegion = regions[currentIndex + 1];
      }
      if (targetRegion && targetRegion.active) {
        this.eventManager.dispatchEvent('updateMapView', targetRegion);
      }
    }
  }, {
    key: "handleTabNavigation",
    value: function handleTabNavigation(isShiftKey) {
      var _this = this;
      var activeTabs = this.ui.tabManager.getActiveTabs();
      if (activeTabs.length > 1) {
        var currentTabName = this.ui.tabManager.currentTab;
        var currentIndex = activeTabs.findIndex(function (tab) {
          return tab.name === currentTabName;
        });
        var nextIndex = isShiftKey ? currentIndex === 0 ? activeTabs.length - 1 : currentIndex - 1 : (currentIndex + 1) % activeTabs.length;
        var newTab = activeTabs[nextIndex];

        // Hide the current tab and subTab's UI elements
        this.ui.hideElement(currentTabName);
        var currentTabObject = this.ui.tabManager.tabs.find(function (tab) {
          return tab.name === currentTabName;
        });
        if (currentTabObject) {
          this.ui.multiplierManager.toggleMultiplierContainer(currentTabObject, "none");
          if (this.ui.tabManager.currentSubTab) {
            var currentSubTabObject = this.ui.tabManager.tabs.find(function (tab) {
              return tab.name === _this.ui.tabManager.currentSubTab;
            });
            this.ui.multiplierManager.toggleMultiplierContainer(currentSubTabObject, "none");
          }
        }
        if (newTab.subTabs.length > 0) {
          this.ui.tabManager.currentSubTab = newTab.currentSubTab || newTab.subTabs[0].name;
        } else {
          this.ui.tabManager.currentSubTab = null;
        }
        this.ui.tabManager.changeTab(activeTabs[nextIndex].name);
      }
    }
  }, {
    key: "updateHotkeyButtons",
    value: function updateHotkeyButtons() {
      var _this2 = this;
      this.hotkeyButtons = [];
      var numberButtons;
      var tabContentID;
      if (this.ui.tabManager.currentTab === "settings") {
        return;
      }
      if (this.ui.tabManager.currentSubTab) {
        tabContentID = this.ui.tabManager.currentSubTab;
        if (this.ui.tabManager.currentTab.includes('training')) {
          tabContentID = "realm-content-" + tabContentID;
        } else if (this.ui.tabManager.currentTab.includes('exploration')) {
          this.ui.tabManager.currentSubTab = tabContentID;
          tabContentID = tabContentID.charAt(0).toUpperCase() + tabContentID.slice(1);
          tabContentID = "tab-content-" + tabContentID + "SubTab";
        }
        numberButtons = this.ui.returnFirstTenButtonElements(tabContentID);
      } else {
        numberButtons = this.ui.returnFirstTenButtonElements(this.ui.tabManager.currentTab);
      }
      for (var i = 0; i < 10 && i < numberButtons.length; i++) {
        this.hotkeyButtons.push(numberButtons[i]);
      }
      this.letterHotkeyButtons = [];
      if (this.ui.tabManager.getActiveTabs().some(function (tab) {
        return tab.name === _this2.ui.tabManager.currentTab && tab.subTabs.length > 0;
      })) {
        var subTabButtons = this.ui.tabManager.returnSubTabButtons();
        for (var _i = 0; _i < subTabButtons.length; _i++) {
          this.letterHotkeyButtons.push(subTabButtons[_i]);
        }
      }
    }
  }]);
}();
},{}],"components/UI/Core/MultiplierManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var MultiplierManager = exports.default = /*#__PURE__*/function () {
  function MultiplierManager(eventManager, ui) {
    _classCallCheck(this, MultiplierManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.tabs;
    this.eventManager.addListener('updateMultiplier', this.updateMultiplier.bind(this));
  }
  return _createClass(MultiplierManager, [{
    key: "setupMultiplierButtons",
    value: function setupMultiplierButtons(tabs) {
      this.tabs = tabs;
      var tabNamesToShowOn = ['force', 'wisdom', 'energy', 'divine', 'artifacts', 'radiance'];
      var tabsToShowOn = this.ui.tabManager.tabs.filter(function (tab) {
        return tabNamesToShowOn.includes(tab.name);
      });
      var _iterator = _createForOfIteratorHelper(tabsToShowOn),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var tab = _step.value;
          // Initialize tab-specific multiplier buttons and multiplier value
          tab.multiplierButtons = {};
          tab.multiplierString = "1";
          var multContainer = this.ui.createElement('div', tab.name + 'MultContainer', 'mult-container');
          this.multiplierValues = ["1", "5", "10", "100", "Next", "Max"];
          var _iterator2 = _createForOfIteratorHelper(this.multiplierValues),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var multValue = _step2.value;
              var multButton = this.ui.createElement('button', multValue + 'Mult', 'mult-button', multValue);
              var multButtonClickHandler = this.updateMultiplier.bind(this, tab, multValue);
              this.eventManager.addDomListener(multButton, 'click', multButtonClickHandler);
              tab.multiplierButtons[multValue] = multButton;
              multContainer.append(multButton);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          tab.multiplierContainer = multContainer; // Save the container in the tab so you can show/hide it later
          multContainer.style.display = 'none';
          this.ui.mainWindow.prepend(multContainer);
          this.updateMultiplier(tab, tab.multiplierString);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateMultiplier",
    value: function updateMultiplier(tab) {
      var newValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      //check if this is being sent by loadState, which sets this value and then nullifies it after
      if (tab.tempMultString && !newValue) {
        newValue = tab.tempMultString;
      }
      // Remove the class from the previous button, if any
      if (tab.multiplierString) {
        tab.multiplierButtons[tab.multiplierString].classList.remove('selected-mult-button');
      }

      // Add the class to the new button
      tab.multiplierButtons[newValue].classList.add('selected-mult-button');
      tab.multiplierString = newValue;
      this.eventManager.dispatchEvent('updateNewMultiplierValues', {
        multiplierString: tab.multiplierString
      });
    }
  }, {
    key: "toggleMultiplierContainer",
    value: function toggleMultiplierContainer(tabObject, displayStyle) {
      if (tabObject.multiplierContainer) {
        tabObject.multiplierContainer.style.display = displayStyle;
      }
    }
  }]);
}();
},{}],"components/UI/Core/NotificationManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var NotificationManager = exports.default = /*#__PURE__*/function () {
  function NotificationManager(eventManager, ui) {
    _classCallCheck(this, NotificationManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.eventManager.addListener('triggerNotification', this.triggerNotification.bind(this));
    this.setupNotificationWindow();
  }
  return _createClass(NotificationManager, [{
    key: "setupNotificationWindow",
    value: function setupNotificationWindow() {
      var notifyWindow = this.ui.createElement('div', 'notifyWindow', 'notify-window');
      // notifyWindow.style.display = "none";
      var mainWindow = document.getElementById("main-window");
      mainWindow.appendChild(notifyWindow);
    }
  }, {
    key: "triggerNotification",
    value: function triggerNotification(data) {
      var targetType = data.targetType;
      var targetName = data.targetName;
      // let triggerType = data.triggerType;
      var notifyWindow = document.getElementById("notifyWindow");
      var notifyStr = ["".concat(targetType, " Unlocked:"), "".concat(targetName.charAt(0).toUpperCase() + targetName.slice(1))];
      this.ui.updateElementHTML(notifyWindow, notifyStr.join('\n'));
      notifyWindow.style.animation = 'none';
      notifyWindow.offsetHeight; //a trick to make the browser immediately render changes, allowing us to reset CSS animations.   ALSO ensures new notifications replace older
      notifyWindow.style.animation = 'fadein 6s';
    }
  }]);
}();
},{}],"assets/icons/info_icon.png":[function(require,module,exports) {
module.exports = "/info_icon.ba2fc67f.png";
},{}],"assets/icons/logo.png":[function(require,module,exports) {
module.exports = "/logo.22d63a0d.png";
},{}],"assets/icons/*.png":[function(require,module,exports) {
module.exports = {
  "info_icon": require("./info_icon.png"),
  "logo": require("./logo.png")
};
},{"./info_icon.png":"assets/icons/info_icon.png","./logo.png":"assets/icons/logo.png"}],"components/UI/Core/Tab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Tab = exports.default = /*#__PURE__*/function () {
  function Tab(eventManager, id, name, active, initialUnlockedFeatureIDs) {
    var infoText = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var initialUnlockedSubTabs = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var parentTab = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    _classCallCheck(this, Tab);
    this.eventManager = eventManager;
    this.id = id;
    this.name = name;
    this.active = active;
    this.initialUnlockedFeatureIDs = initialUnlockedFeatureIDs;
    this.initialUnlockedFeatureRefs = [];
    this.initialUnlockedSubTabs = initialUnlockedSubTabs;
    this.button = null;
    this.subTabs = [];
    this.parentTab = parentTab;
    this.currentSubTab = null;
    this.infoText = infoText;
    this.hasBeenOpened = false;
  }
  return _createClass(Tab, [{
    key: "setActive",
    value: function setActive() {
      var _this = this;
      this.active = true;
      if (this.initialUnlockedFeatureRefs) {
        var _iterator = _createForOfIteratorHelper(this.initialUnlockedFeatureRefs),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var feature = _step.value;
            feature.setActive();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      //slight delay so that css properties have time to update when checking for visible tabs
      setTimeout(function () {
        _this.eventManager.dispatchEvent('updateHotkeyButtons');
      }, 100);
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/SkillsTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SkillsTab = exports.default = /*#__PURE__*/function () {
  function SkillsTab(eventManager, ui, gameContent) {
    _classCallCheck(this, SkillsTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.skillTree = gameContent.skillTree;
    this.skills = this.skillTree.skills;
    this.skillsCol1 = this.ui.skillsCol1;
  }
  return _createClass(SkillsTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this = this;
      var skillData = this.skillsCol1.querySelector('#skill-data');
      this.skillGrid = this.ui.createElement('div', null, 'skill-grid');

      //assign skillsCol1 color
      this.skillsCol1.classList.add('skills-color');
      skillData = this.ui.createElement('div', 'skill-data');
      this.skillsCol1.appendChild(skillData);
      var skillPointsTotal = this.ui.createElement('div', 'skillpoints', null, "Skill Points: ".concat(this.ui.formatNumber(this.gameContent.skillpoints)));
      skillData.appendChild(skillPointsTotal);
      var refundSkillsButton = this.ui.createElement('button', "refund-skills-button", null, "Refund All");
      var refundSkillsButtonClickHandler = function refundSkillsButtonClickHandler() {
        _this.skillTree.refundAllSkills();
      };
      this.eventManager.addDomListener(refundSkillsButton, 'click', refundSkillsButtonClickHandler);
      skillData.appendChild(refundSkillsButton);
      this.skillsCol1.appendChild(this.skillGrid);
      this.skills.forEach(function (skill) {
        // Create a skill node element and position it based on its connections
        var skillNode = _this.skillGrid.querySelector("#skill-".concat(skill.id));
        if (!skillNode) {
          skillNode = _this.ui.createElement('button', "skill-".concat(skill.id), 'skill-node');
          skillNode.style.color = "".concat(skill.color);
          skillNode.style.border = "2px solid ".concat(skill.color);
          if (skill.skillType === "mastery") {
            skillNode.classList.add("mastery-skill");
          }

          // Create the first letter text element
          var firstLetterText = _this.ui.createElement('span', null, 'skill-first-letter');
          firstLetterText.textContent = skill.name.charAt(0).toUpperCase();
          skillNode.appendChild(firstLetterText);

          // Create a line element to connect the skill nodes
          var connections = skill.node.connections;
          for (var direction in connections) {
            if (connections[direction]) {
              // Check if there is a connection in this direction
              // console.error(connections[direction]);
              var connectedSkill = connections[direction].skill;
              if (connectedSkill && connectedSkill.unlocked) {
                var line = _this.ui.createElement('div', null, ['skill-line', direction]);
                line.style.backgroundColor = "".concat(skill.color);
                skillNode.appendChild(line);
              }
            }
          }

          //these parts of the function only fire initially, and not on updates. so write a function that i will move out of here, that can draw a line for things when they are unlocked, but doesnt draw it before. but also without running multiples times, it should check if there is a line appended here already, adn if there is, then do nothing, but if ther eisnt, then check unlcoks, or SOMETHING.  proabably mroe efficient than this

          // Add click event to upgrade the skill
          // Named function for the click event
          var skillNodeClickHandler = function skillNodeClickHandler() {
            if (skill.level.eq(0)) {
              _this.ui.buyFeature(skill.id);
            } else {
              var _iterator = _createForOfIteratorHelper(skill.unlockedConnections),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var connection = _step.value;
                  if (connection.level.eq(1)) {
                    return;
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              skill.refundSkill();
            }
          };

          // Use EventManager to add the event listener
          _this.eventManager.addDomListener(skillNode, 'click', skillNodeClickHandler);

          // Optionally store the listener for future removal
          skillNode.clickListener = skillNodeClickHandler;
          _this.ui.populateMouseOverZIndexEvents(skillNode);
          _this.ui.populateTooltip(skill, skillNode);
          skillNode.style.left = "".concat(skill.node.x, "px");
          skillNode.style.top = "".concat(skill.node.y, "px");

          // Add the skill node to the skill grid
          _this.skillGrid.appendChild(skillNode);
          _this.updateConnectionLines(skill, skillNode);
        }
      });
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this2 = this;
      // Update Elements
      var skillPointsTotal = document.querySelector('#skillpoints');
      this.ui.updateElementTextContent(skillPointsTotal, "Skill Points: ".concat(this.ui.formatNumber(this.gameContent.skillpoints)));
      this.skillGrid = this.skillsCol1.querySelector('.skill-grid');
      this.skills.forEach(function (skill) {
        var skillNode = _this2.skillGrid.querySelector("#skill-".concat(skill.id));
        _this2.ui.updateTooltip(skill);
        _this2.checkButtonStatus(skill, skillNode);
        _this2.updateConnectionLines(skill, skillNode);
      });
    }
  }, {
    key: "updateConnectionLines",
    value: function updateConnectionLines(skill, skillNode) {
      var connections = skill.node.connections;
      for (var direction in connections) {
        if (connections[direction]) {
          var connectedSkill = connections[direction].skill;
          var line = skillNode.querySelector(".skill-line.".concat(direction));
          if (connectedSkill && connectedSkill.unlocked) {
            if (!line) {
              var newLine = this.ui.createElement('div', null, ['skill-line', direction]);
              newLine.style.backgroundColor = "".concat(skill.color);
              skillNode.appendChild(newLine);
            }
          } else {
            if (line) {
              line.remove();
            }
          }
        }
      }
    }
  }, {
    key: "checkButtonStatus",
    value: function checkButtonStatus(skill, button) {
      var options;
      if (!skill.unlocked) {
        options = {
          option: 1,
          disabled: true,
          addClasses: ['disabled'],
          removeClasses: [],
          styles: {
            opacity: "0.0",
            cursor: 'default'
          }
        };
      }
      // Skill is purchased
      else if (skill.level.eq(skill.maxLevel)) {
        options = {
          option: 1,
          disabled: false,
          addClasses: ['enabled', 'skill-complete'],
          removeClasses: ['disabled'],
          styles: {
            backgroundColor: "".concat(skill.color)
          }
        };
      }
      // Skill is not active or not affordable
      else if (!skill.active || !this.ui.isAffordable(skill) || !skill.unlocked) {
        options = {
          option: 2,
          disabled: true,
          addClasses: ['disabled'],
          removeClasses: ['enabled', 'skill-complete'],
          styles: {
            backgroundColor: '',
            color: 'grey',
            opacity: '1.0',
            cursor: 'pointer'
          }
        };
      }
      // Skill is affordable and active but not purchased
      else {
        options = {
          option: 3,
          disabled: false,
          addClasses: ['enabled'],
          removeClasses: ['disabled', 'skill-complete'],
          styles: {
            backgroundColor: '',
            color: "".concat(skill.color),
            opacity: "1.0"
          }
        };
      }

      // Check if the option number is different from the last applied option
      if (skill.buttonStatusOption !== options.option) {
        this.updateButtonStatus(button, options);
        skill.buttonStatusOption = options.option; // Update the stored option number
      }
    }
  }, {
    key: "updateButtonStatus",
    value: function updateButtonStatus(button, options) {
      // Enable or Disable the button
      button.disabled = options.disabled;

      // Add or Remove Classes
      options.addClasses.forEach(function (cls) {
        return button.classList.add(cls);
      });
      options.removeClasses.forEach(function (cls) {
        return button.classList.remove(cls);
      });

      // Update Styles
      for (var _i = 0, _Object$entries = Object.entries(options.styles || {}); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          styleName = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        button.style[styleName] = value;
      }

      // Handle Child Elements (Optional)
      if (options.childStyles) {
        for (var _i2 = 0, _Object$entries2 = Object.entries(options.childStyles); _i2 < _Object$entries2.length; _i2++) {
          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
            index = _Object$entries2$_i[0],
            styles = _Object$entries2$_i[1];
          var child = button.children[index];
          for (var _i3 = 0, _Object$entries3 = Object.entries(styles); _i3 < _Object$entries3.length; _i3++) {
            var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),
              _styleName = _Object$entries3$_i[0],
              _value = _Object$entries3$_i[1];
            child.style[_styleName] = _value;
          }
        }
      }
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ForgeTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ForgeTab = exports.default = /*#__PURE__*/function () {
  function ForgeTab(eventManager, ui, forgeUpgrades) {
    _classCallCheck(this, ForgeTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.forgeUpgrades = forgeUpgrades;
    this.forgeCol1 = document.getElementById('forge-upgrades-columns');
    this.upgradeSectionNames = ['force', 'wisdom', 'energy', 'divine', 'crystal'];
    this.allForgeUpgrades = this.groupUpgradesBySectionName();
  }
  return _createClass(ForgeTab, [{
    key: "groupUpgradesBySectionName",
    value: function groupUpgradesBySectionName() {
      var _this = this;
      return this.upgradeSectionNames.reduce(function (acc, section) {
        acc[section] = _this.forgeUpgrades.filter(function (upgrade) {
          return upgrade.costType === section;
        });
        return acc;
      }, {});
    }
  }, {
    key: "createUpgradeButton",
    value: function createUpgradeButton(upgrade, colID) {
      var _this2 = this;
      var upgradeID = "".concat(colID, "-").concat(upgrade.id);
      var upgradeCell = this.ui.createElement('div', upgradeID, 'forge-upgrade-cell');
      var button = this.ui.createElement('button', "button-".concat(upgrade.id), 'forge-upgrade-button');
      var upgradeContent = this.ui.createElement('div', "upgrade-content-".concat(upgrade.id));
      button.appendChild(upgradeContent);
      var buttonClickHandler = function buttonClickHandler() {
        return _this2.ui.buyFeature(upgrade.id);
      };
      this.eventManager.addDomListener(button, 'click', buttonClickHandler);
      this.ui.populateMouseOverZIndexEvents(button);
      this.ui.populateTooltip(upgrade, button);
      upgradeCell.appendChild(button);
      return upgradeCell;
    }
  }, {
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this3 = this;
      this.upgradeSectionNames.forEach(function (sectionName) {
        var upgrades = _this3.allForgeUpgrades[sectionName];
        var colID = "forgeUpgrades-".concat(sectionName);
        var col = _this3.ui.createElement('div', colID, ['content-tab-col', "".concat(sectionName, "-color")]);
        var colContent = _this3.ui.createElement('div', null, 'forge-upgrade-col');
        var colTitle = _this3.ui.createElement('div', null, null, sectionName.charAt(0).toUpperCase() + sectionName.slice(1));
        col.appendChild(colTitle);
        upgrades.forEach(function (upgrade) {
          var upgradeCell = _this3.createUpgradeButton(upgrade, colID);
          colContent.appendChild(upgradeCell);
        });
        col.appendChild(colContent);
        _this3.forgeCol1.appendChild(col);
      });
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this4 = this;
      this.upgradeSectionNames.forEach(function (sectionName) {
        var colID = "forgeUpgrades-".concat(sectionName);
        var col = document.getElementById(colID);
        var upgrades = _this4.allForgeUpgrades[sectionName];
        upgrades.forEach(function (upgrade) {
          var button = col.querySelector("#button-".concat(upgrade.id));
          var upgradeContent = document.getElementById("upgrade-content-".concat(upgrade.id));
          _this4.ui.updateElementTextContent(upgradeContent, upgrade.name);
          _this4.ui.updateTooltip(upgrade);
          _this4.ui.updateVisibility(button, upgrade.active);
          if (upgrade.level.eq(upgrade.maxLevel)) {
            button.disabled = true;
            button.classList.remove('enabled', 'disabled');
            button.classList.add('complete');
            button.style.backgroundColor = "var(--".concat(sectionName, "-color)");
            button.children[0].style.color = 'white';
          } else if (upgrade.active && !upgrade.level.eq(upgrade.maxLevel) && _this4.ui.isAffordable(upgrade) && upgrade.nextLevelIncrement.gt(0)) {
            button.disabled = false;
            button.classList.add('enabled');
            button.classList.remove('disabled');
          } else {
            button.disabled = true;
            button.classList.add('disabled');
            button.classList.remove('enabled');
          }
          if (upgrade.id === upgrades[0].id) {
            _this4.ui.updateVisibility(col, upgrade.active);
          }
        });
      });
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/WorldDisplayManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var WorldDisplayManager = exports.default = /*#__PURE__*/function () {
  function WorldDisplayManager(eventManager, ui, gameContent, regionDisplayManager) {
    _classCallCheck(this, WorldDisplayManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.worldManager = this.gameContent.worldManager;
    this.regionDisplayManager = regionDisplayManager;
    this.currentViewType; //world or region
    this.currentlyViewedWorld;
    this.currentlyViewedRegion;
    this.eventManager.addListener('changeWorldMap', this.changeWorldMap.bind(this));
  }
  return _createClass(WorldDisplayManager, [{
    key: "populateWorldTabButtons",
    value: function populateWorldTabButtons(container) {
      var _this = this;
      var worldsTabButtonsContainer = this.ui.createElement('div', "Odyssey-tab-buttons");
      this.worldManager.worlds.forEach(function (world) {
        _this.createWorldTabButton(world, worldsTabButtonsContainer);
      });
      container.appendChild(worldsTabButtonsContainer);
    }
  }, {
    key: "createWorldTabButton",
    value: function createWorldTabButton(world, container) {
      var _this2 = this;
      var worldTabButton = document.getElementById("worldTabButton-".concat(world.id));
      if (!worldTabButton) {
        worldTabButton = this.ui.createElement('button', "worldTabButton-".concat(world.id), 'world-tab-button', "".concat(world.name));
        var worldTabButtonClickHandler = function worldTabButtonClickHandler() {
          _this2.changeWorldMap(world);
        };
        this.eventManager.addDomListener(worldTabButton, 'click', worldTabButtonClickHandler);
        container.appendChild(worldTabButton);
        if (container.children.length > 0) {
          container.children[0].classList.add('active-tab');
        }
      }
    }
  }, {
    key: "updateWorldTabButtons",
    value: function updateWorldTabButtons(world) {
      var worldTabButton = document.getElementById("worldTabButton-".concat(world.id));
      if (world.active) {
        worldTabButton.style.display = "block";
        worldTabButton.textContent = world.name;
        worldTabButton.disabled = false;
      } else {
        worldTabButton.style.display = "none";
        worldTabButton.textContent = "Unexplored";
        worldTabButton.disabled = true;
      }
    }
  }, {
    key: "changeWorldMap",
    value: function changeWorldMap(world) {
      var tabButtonsContainer = document.getElementById("Odyssey-tab-buttons");
      var tabButtons = Array.from(tabButtonsContainer.children);
      if (this.currentlyViewedWorld) {
        this.currentlyViewedWorld.currentlyViewing = false;
      }
      tabButtons.forEach(function (button) {
        button.classList.remove('active-tab');
      });
      var targetTab = document.getElementById("worldTabButton-".concat(world.id));
      targetTab.classList.add('active-tab');
      this.currentlyViewedWorld = world;
      world.currentlyViewing = true;
      var targetParent = document.getElementById('tab-col2-OdysseySubTab');
      var tabContents = Array.from(targetParent.children);
      tabContents.forEach(function (content) {
        if (content.id.includes('world-')) {
          content.style.display = 'none';
        }
      });
      document.getElementById("world-".concat(world.id)).style.display = 'flex';
      this.eventManager.dispatchEvent('updateMapView', world);
    }
  }, {
    key: "populateWorld",
    value: function populateWorld(world, index) {
      var mapViewWindow = document.getElementById('odyssey-current-view');
      var worldCell = this.ui.createElement('div', "world-".concat(world.id), 'world-cell');
      worldCell.style.display = index === 0 ? 'flex' : 'none';
      if (world.regions) {
        this.regionDisplayManager.populateRegions(world.regions, mapViewWindow);
      }
      mapViewWindow.appendChild(worldCell);
      world.DOMContent = worldCell;
      return worldCell;
    }

    // DEBUG EXPANDED MAP FUNCTIONALITY BELOW THIS POINT

    // In WorldDisplayManager class
  }, {
    key: "debugExpandAllRegions",
    value: function debugExpandAllRegions() {
      var _this3 = this;
      var mapViewWindow = document.getElementById('odyssey-current-view');
      var currentWorld = this.currentlyViewedWorld;

      // Clear the current map view
      while (mapViewWindow.firstChild) {
        mapViewWindow.removeChild(mapViewWindow.firstChild);
      }

      // Calculate the grid dimensions based on the regions' positions
      var gridDimensions = this.calculateGridDimensions(currentWorld.regions);

      // Create a container for the expanded regions
      var expandedRegionsContainer = this.ui.createElement('div', 'expanded-regions-container');
      expandedRegionsContainer.style.display = 'grid';
      expandedRegionsContainer.style.gridTemplateColumns = "repeat(".concat(gridDimensions.width, ", 1fr)");
      expandedRegionsContainer.style.gridTemplateRows = "repeat(".concat(gridDimensions.height, ", 1fr)");
      expandedRegionsContainer.style.gap = '10px'; // Adjust the gap between regions as needed

      // Populate the expanded regions
      currentWorld.regions.forEach(function (region) {
        var expandedRegionCell = _this3.createExpandedRegionCell(region);
        var row = region.topLeftCornerY / 100;
        var col = region.topLeftCornerX / 100;
        expandedRegionCell.style.gridRow = row + 1;
        expandedRegionCell.style.gridColumn = col + 1;
        expandedRegionsContainer.appendChild(expandedRegionCell);
      });

      // Append the expanded regions container to the map view
      mapViewWindow.appendChild(expandedRegionsContainer);
      var zoneContainers = document.querySelectorAll('.zones-container');
      zoneContainers.forEach(function (container) {
        container.style.top = '0';
        container.style.left = '0';
        // Add any other desired styles here
      });
    }

    // In WorldDisplayManager class
  }, {
    key: "createExpandedRegionCell",
    value: function createExpandedRegionCell(region) {
      var _this4 = this;
      var expandedRegionCell = this.ui.createElement('div', "expanded-region-".concat(region.id), 'expanded-region-cell');
      if (region.image) {
        expandedRegionCell.style.backgroundImage = "url(".concat(region.image, ")");
        expandedRegionCell.style.backgroundSize = 'cover';
      }
      var zonesContainer = this.ui.createElement('div', null, 'zones-container');
      zonesContainer.style.backgroundImage = "url(".concat(region.image, ")");
      zonesContainer.style.backgroundSize = 'cover';
      expandedRegionCell.appendChild(zonesContainer);
      var regionTitle = this.ui.createElement('div', null, 'region-cell-title', region.name);
      var regionProgress = this.ui.createElement('div', null, 'region-cell-progress', "".concat(Math.floor(region.progressPercentage), "%"));
      zonesContainer.appendChild(regionTitle);
      zonesContainer.appendChild(regionProgress);
      if (region.zones) {
        region.zones.forEach(function (zone) {
          var zoneElements = _this4.ui.tabManager.explorationTab.odysseySubTab.zoneDisplayManager.createZoneElements(zone, region);
          zonesContainer.appendChild(zoneElements.cell);

          // Create and populate the tooltip for the zone
          _this4.ui.populateTooltip(zone, zoneElements.button);
        });
      }
      return expandedRegionCell;
    }
  }, {
    key: "calculateGridDimensions",
    value: function calculateGridDimensions(regions) {
      var maxRegionX = 0;
      var maxRegionY = 0;
      regions.forEach(function (region) {
        maxRegionX = Math.max(maxRegionX, region.topLeftCornerX);
        maxRegionY = Math.max(maxRegionY, region.topLeftCornerY);
      });
      return {
        width: maxRegionX / 100 + 1,
        height: maxRegionY / 100 + 1
      };
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/RegionDisplayManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RegionDisplayManager = exports.default = /*#__PURE__*/function () {
  function RegionDisplayManager(eventManager, ui, gameContent) {
    _classCallCheck(this, RegionDisplayManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.worldManager = this.gameContent.worldManager;
  }
  return _createClass(RegionDisplayManager, [{
    key: "populateRegions",
    value: function populateRegions(regions, mapViewWindow) {
      var _this = this;
      regions.forEach(function (region) {
        var regionCell = document.querySelector("#region-".concat(region.id));
        if (!regionCell) {
          regionCell = _this.createRegionCell(region, mapViewWindow);
        }
        region.DOMContent = regionCell;
      });
    }
  }, {
    key: "createRegionCell",
    value: function createRegionCell(region, mapViewWindow) {
      var _this2 = this;
      var regionCell = this.ui.createElement('div', "region-".concat(region.id), 'region-cell');
      var topLeftCornerX = region.topLeftCornerX + 100;
      var topLeftCornerY = region.topLeftCornerY + 60;
      regionCell.style.top = "".concat(topLeftCornerY, "px");
      regionCell.style.left = "".concat(topLeftCornerX, "px");
      regionCell.style.display = 'none';
      if (region.image) {
        regionCell.style.backgroundImage = "url(".concat(region.image, ")");
        regionCell.style.backgroundSize = 'cover';
      }
      var regionTitle = this.ui.createElement('div', null, 'region-cell-title', region.name);
      var regionProgress = this.ui.createElement('div', null, 'region-cell-progress', "".concat(Math.floor(region.progressPercentage), "%"));
      regionCell.appendChild(regionTitle);
      regionCell.appendChild(regionProgress);
      var zonesContainer = this.ui.createElement('div', null, 'zones-container');
      zonesContainer.style.backgroundImage = "url(".concat(region.image, ")");
      zonesContainer.style.backgroundSize = 'cover';
      zonesContainer.style.display = 'none';
      mapViewWindow.appendChild(zonesContainer);
      region.zoneDOMContent = zonesContainer;
      var regionBackButton = this.ui.createElement('button', null, 'region-back-button', "<-");
      var backButtonClickHandler = function backButtonClickHandler() {
        _this2.mapViewManager.updateMapView(region.world);
      };
      this.eventManager.addDomListener(regionBackButton, 'click', backButtonClickHandler);

      // For regionCell
      var regionCellClickHandler = function regionCellClickHandler() {
        if (region.active) {
          _this2.mapViewManager.updateMapView(region);
        }
      };
      this.eventManager.addDomListener(regionCell, 'click', regionCellClickHandler);
      var regionCellMouseoverHandler = function regionCellMouseoverHandler() {
        regionCell.style.filter = 'brightness(150%)';
      };
      this.eventManager.addDomListener(regionCell, 'mouseover', regionCellMouseoverHandler);
      var regionCellMouseoutHandler = function regionCellMouseoutHandler() {
        regionCell.style.filter = 'brightness(100%)';
      };
      this.eventManager.addDomListener(regionCell, 'mouseout', regionCellMouseoutHandler);
      zonesContainer.prepend(regionBackButton);
      mapViewWindow.appendChild(regionCell);
      if (region.zones) {
        this.zoneDisplayManager.populateZones(zonesContainer, region);
      }
      return regionCell;
    }
  }, {
    key: "updateRegions",
    value: function updateRegions(regions) {
      var _this3 = this;
      regions.forEach(function (region) {
        var regionCell = document.querySelector("#region-".concat(region.id));
        var regionProgress = regionCell.querySelector('.region-cell-progress');
        _this3.ui.updateElementTextContent(regionProgress, Math.floor(region.progressPercentage) + "%");
        _this3.updateWorldRegionFog(region);
        if (region.zones) {
          _this3.zoneDisplayManager.updateZones(region.zones);
        }
      });
    }
  }, {
    key: "updateWorldRegionFog",
    value: function updateWorldRegionFog(region) {
      var newOpacity;
      var currentOpacity = region.DOMContent.style.opacity;
      if (region.active) {
        newOpacity = region.progressPercentage / 100 + 0.6;
      } else {
        newOpacity = region.progressPercentage / 100 + 0.1;
      }
      if (currentOpacity !== newOpacity) {
        region.DOMContent.style.opacity = newOpacity;
      }
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/ProgressBarManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ProgressBarManager = exports.default = /*#__PURE__*/function () {
  function ProgressBarManager(ui, gameContent, worldDisplayManager) {
    _classCallCheck(this, ProgressBarManager);
    this.ui = ui;
    this.gameContent = gameContent;
    this.worldManager = this.gameContent.worldManager;
    this.worldDisplayManager = worldDisplayManager;
  }
  return _createClass(ProgressBarManager, [{
    key: "createProgressBars",
    value: function createProgressBars(container) {
      var universeProgressBarContainer = this.ui.createElement('div', "universe-progress-bar-container");
      var universeProgressBar = this.ui.createElement('div', 'universe-progress-bar');
      var universeProgressText = this.ui.createElement('div', null, 'progress-text');
      universeProgressBarContainer.appendChild(universeProgressBar);
      universeProgressBarContainer.appendChild(universeProgressText);
      container.appendChild(universeProgressBarContainer);
      var progressBarContainer = this.ui.createElement('div', "odyssey-progress-bar-container");
      var currentViewProgressBar = this.ui.createElement('div', 'odyssey-progress-bar');
      var currentViewProgressText = this.ui.createElement('div', null, 'progress-text');
      progressBarContainer.appendChild(currentViewProgressBar);
      progressBarContainer.appendChild(currentViewProgressText);
      container.appendChild(progressBarContainer);
    }
  }, {
    key: "updateProgressBars",
    value: function updateProgressBars() {
      var universeProgressBar = document.getElementById("universe-progress-bar");
      var universeProgressText = document.querySelector("#universe-progress-bar-container .progress-text");
      var currentViewProgressBar = document.getElementById("odyssey-progress-bar");
      var currentViewProgressText = document.querySelector("#odyssey-progress-bar-container .progress-text");
      var viewType = this.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType;
      if (viewType === "region") {
        // Show World Progress and Region Progress when viewing a region
        var currentWorld = this.worldDisplayManager.currentlyViewedRegion.world;
        this.updateProgressBar(universeProgressBar, universeProgressText, currentWorld, "world");
        this.updateProgressBar(currentViewProgressBar, currentViewProgressText, this.worldDisplayManager.currentlyViewedRegion, "region");
      } else {
        // Show Universe Progress and World Progress when viewing a world
        this.updateProgressBar(universeProgressBar, universeProgressText, null, "universe");
        this.updateProgressBar(currentViewProgressBar, currentViewProgressText, this.worldDisplayManager.currentlyViewedWorld, "world");
      }
    }
  }, {
    key: "updateProgressBar",
    value: function updateProgressBar(progressBar, progressText, feature, viewType) {
      var newWidth, newText;
      switch (viewType) {
        case "universe":
          newWidth = this.worldManager.progressPercentage + "%";
          newText = this.worldManager.progressPercentage.toFixed(2) + "% of the Universe complete";
          break;
        case "world":
          newWidth = feature.progressPercentage + "%";
          newText = feature.progressPercentage.toFixed(2) + "% of the World complete";
          break;
        case "region":
          newWidth = feature.progressPercentage + "%";
          newText = feature.progressPercentage.toFixed(2) + "% of the Region complete";
          break;
      }
      if (progressBar.style.width !== newWidth) {
        progressBar.style.width = newWidth;
      }
      progressText.textContent = newText;
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/MiniMap.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var MiniMap = exports.default = /*#__PURE__*/function () {
  function MiniMap(eventManager, ui, worldManager, worldDisplayManager) {
    _classCallCheck(this, MiniMap);
    this.eventManager = eventManager;
    this.ui = ui;
    this.worldManager = worldManager;
    this.worldDisplayManager = worldDisplayManager;
    this.eventManager.addListener('regionCompleted', this.updateMiniMap.bind(this));
    this.regionNameElement = null;
  }

  // Creates the mini-map grid and appends it to the map view.
  return _createClass(MiniMap, [{
    key: "createMiniMap",
    value: function createMiniMap(mapView) {
      this.miniMapGrid = this.ui.createElement('div', 'mini-map-grid');
      mapView.appendChild(this.miniMapGrid);
      this.regionNameElement = this.ui.createElement('div', 'mini-map-region-name');
      mapView.appendChild(this.regionNameElement);
    }

    // Updates the mini-map based on the current world and its regions.
  }, {
    key: "updateMiniMap",
    value: function updateMiniMap() {
      var _this = this;
      if (this.worldDisplayManager.currentlyViewedRegion) {
        this.clearMiniMap();
        var currentWorld = this.worldDisplayManager.currentlyViewedRegion.world;
        var currentRegion = this.worldDisplayManager.currentlyViewedRegion;
        if (currentWorld) {
          var gridDimensions = this.calculateGridDimensions(currentWorld.regions);
          this.miniMapGrid.style.gridTemplateColumns = "repeat(".concat(gridDimensions.width, ", 1fr)");
          this.miniMapGrid.style.gridTemplateRows = "repeat(".concat(gridDimensions.height, ", 1fr)");
          currentWorld.regions.forEach(function (region) {
            var regionSquare = _this.createRegionSquare(region, gridDimensions);
            if (region === currentRegion) {
              regionSquare.classList.add('current');
            }
            _this.miniMapGrid.appendChild(regionSquare);
          });
        }
      }
    }

    // Calculates the grid dimensions based on the regions' positions.
  }, {
    key: "calculateGridDimensions",
    value: function calculateGridDimensions(regions) {
      var maxRegionX = 0;
      var maxRegionY = 0;
      regions.forEach(function (region) {
        maxRegionX = Math.max(maxRegionX, region.topLeftCornerX);
        maxRegionY = Math.max(maxRegionY, region.topLeftCornerY);
      });
      return {
        width: maxRegionX / 100 + 1,
        height: maxRegionY / 100 + 1
      };
    }

    // notifyMiniMapNavigationEnabled() {
    //     this.eventManager.dispatchEvent('notifyMiniMapNavigationEnabled');
    // }

    // Creates a square element representing a region in the mini-map.
  }, {
    key: "createRegionSquare",
    value: function createRegionSquare(region, gridDimensions) {
      var _this2 = this;
      var regionSquare = this.ui.createElement('div', "mini-map-region-".concat(region.id), 'mini-map-region');
      var row = region.topLeftCornerY / 100;
      var col = region.topLeftCornerX / 100;
      regionSquare.style.position = 'absolute';
      regionSquare.style.top = "".concat(row * 40, "px"); // Adjust the vertical position based on the row
      regionSquare.style.left = "".concat(col * 40, "px"); // Adjust the horizontal position based on the column

      if (!region.active) {
        regionSquare.classList.add('inactive');
      } else {
        // inform hotkeyManager to update for minimap, inform mapViewManager to toggle view type
        var regionSquareClickHandler = function regionSquareClickHandler() {
          _this2.handleRegionClick(region);
        };
        this.eventManager.addDomListener(regionSquare, 'click', regionSquareClickHandler);
        var regionSquareMouseEnterHandler = function regionSquareMouseEnterHandler() {
          _this2.showRegionName(region);
        };
        this.eventManager.addDomListener(regionSquare, 'mouseenter', regionSquareMouseEnterHandler);
        var regionSquareMouseLeaveHandler = function regionSquareMouseLeaveHandler() {
          _this2.hideRegionName();
        };
        this.eventManager.addDomListener(regionSquare, 'mouseleave', regionSquareMouseLeaveHandler);
      }
      return regionSquare;
    }
  }, {
    key: "showRegionName",
    value: function showRegionName(region) {
      this.regionNameElement.textContent = region.name;
      this.regionNameElement.style.display = 'block';
    }
  }, {
    key: "hideRegionName",
    value: function hideRegionName() {
      this.regionNameElement.textContent = '';
      this.regionNameElement.style.display = 'none';
    }
  }, {
    key: "handleRegionClick",
    value: function handleRegionClick(region) {
      this.eventManager.dispatchEvent('updateMapView', region);
    }

    // Clears the mini-map by removing all child elements.
  }, {
    key: "clearMiniMap",
    value: function clearMiniMap() {
      while (this.miniMapGrid.firstChild) {
        this.miniMapGrid.removeChild(this.miniMapGrid.firstChild);
      }
    }

    // Shows or hides the mini-map based on the current view type.
  }, {
    key: "toggleMiniMapVisibility",
    value: function toggleMiniMapVisibility(viewType) {
      this.miniMapGrid.style.display = viewType === 'region' ? 'grid' : 'none';
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/MapViewManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _MiniMap = _interopRequireDefault(require("./MiniMap.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var MapViewManager = exports.default = /*#__PURE__*/function () {
  function MapViewManager(eventManager, ui, gameContent, worldDisplayManager) {
    _classCallCheck(this, MapViewManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.worldManager = this.gameContent.worldManager;
    this.worldDisplayManager = worldDisplayManager;
    this.miniMap = new _MiniMap.default(eventManager, ui, this.worldManager, this.worldDisplayManager);

    // Listening for view type changes to update the map view accordingly.
    this.eventManager.addListener('updateMapView', this.updateMapView.bind(this));
  }

  // Initializes the map view in the UI container.
  return _createClass(MapViewManager, [{
    key: "initializeMapView",
    value: function initializeMapView(container) {
      var mapView = this.ui.createElement('div', 'odyssey-current-view');
      var mapTitle = this.ui.createElement('div', 'odyssey-current-name');
      mapView.appendChild(mapTitle);
      container.appendChild(mapView);
      this.miniMap.createMiniMap(mapView);
    }

    // Sets the default view to the first region of the first world, or to last view if loading
  }, {
    key: "setInitialView",
    value: function setInitialView() {
      var firstWorld = this.worldManager.worlds[0];
      this.worldDisplayManager.currentlyViewedRegion = firstWorld.regions[0];
      this.worldDisplayManager.currentViewType = "region";
      firstWorld.regions[0].currentlyViewing = true;
      this.updateMapView(firstWorld.regions[0]);
    }

    // Handles toggling between different map view types (world or region).
  }, {
    key: "updateMapView",
    value: function updateMapView(newMapView) {
      var mapView = document.getElementById('odyssey-current-view');
      var mapTitle = document.getElementById('odyssey-current-name');

      // Hides all child elements of the map view to prepare for the new view.
      this.ui.hideChildren(mapView);
      this.clearCurrentView();
      newMapView.currentlyViewing = true;
      if (newMapView.featureType === "world") {
        this.showWorldView(newMapView);
      } else if (newMapView.featureType === "region") {
        this.showRegionView(newMapView);
        // this.eventManager.dispatchEvent('updateMapView', newMapView);
      }

      // Updates the title of the map view with the new feature's name.
      this.updateMapTitle(mapTitle, newMapView);
      this.worldDisplayManager.currentViewType = newMapView.featureType;
    }

    // Clears the current viewing status of the world and region.
  }, {
    key: "clearCurrentView",
    value: function clearCurrentView() {
      if (this.worldDisplayManager.currentlyViewedWorld) {
        this.worldDisplayManager.currentlyViewedWorld.currentlyViewing = false;
      }
      if (this.worldDisplayManager.currentlyViewedRegion) {
        this.worldDisplayManager.currentlyViewedRegion.currentlyViewing = false;
      }
    }

    // Updates the view to show a specific world and its regions.
  }, {
    key: "showWorldView",
    value: function showWorldView(world) {
      this.worldDisplayManager.currentlyViewedWorld = world;
      this.worldDisplayManager.currentlyViewedRegion = null;
      world.regions.forEach(function (region) {
        return region.DOMContent.style.display = 'flex';
      });
      this.miniMap.toggleMiniMapVisibility('world');
    }

    // Updates the view to show a specific region and its zones.
  }, {
    key: "showRegionView",
    value: function showRegionView(region) {
      region.world.currentlyViewing = true;
      this.worldDisplayManager.currentlyViewedRegion = region;
      this.worldDisplayManager.currentlyViewedWorld = null;
      region.zoneDOMContent.style.display = 'flex';
      Array.from(region.zoneDOMContent.children).forEach(function (child) {
        return child.style.display = 'flex';
      });

      // this.miniMap.notifyMiniMapNavigationEnabled();
      this.miniMap.toggleMiniMapVisibility('region');
      this.miniMap.updateMiniMap();
    }

    // Updates the title element to reflect the current map feature being viewed.
  }, {
    key: "updateMapTitle",
    value: function updateMapTitle(element, feature) {
      element.style.display = 'flex';
      var titleText = "".concat(feature.featureType.charAt(0).toUpperCase() + feature.featureType.slice(1), ": ").concat(feature.name);
      this.ui.updateElementTextContent(element, titleText);
    }
  }]);
}();
},{"./MiniMap.js":"components/UI/DisplayComponents/ExplorationDisplay/MiniMap.js"}],"components/UI/DisplayComponents/ExplorationDisplay/ZoneDisplayManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ZoneDisplayManager = exports.default = /*#__PURE__*/function () {
  function ZoneDisplayManager(eventManager, ui, gameContent) {
    var _this = this;
    _classCallCheck(this, ZoneDisplayManager);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.zoneUpdates = new Map();
    this.zoneElements = new Map();
    this.renderIntervalId = setInterval(function () {
      return _this.renderZoneUpdates();
    }, 10);
    this.eventManager.addListener('zoneConquestProgress', this.handleZoneConquestProgress.bind(this));
    this.eventManager.addListener('zoneConquestStopped', this.handleZoneConquestStopped.bind(this));
    this.regionNavBoxes = [];
    this.worldNavBoxes = [];
  }
  return _createClass(ZoneDisplayManager, [{
    key: "populateZones",
    value: function populateZones(zonesContainer, region) {
      var _this2 = this;
      region.zones.forEach(function (zone) {
        var zoneElements = _this2.createZoneElements(zone, region);
        zonesContainer.appendChild(zoneElements.cell);
        _this2.zoneElements.set(zone.id, zoneElements);
      });
    }
  }, {
    key: "createZoneElements",
    value: function createZoneElements(zone, region) {
      var zoneCell = this.ui.createElement('div', "zone-".concat(zone.id), 'zone-cell');
      var topPosition = zone.y || 100;
      var leftPosition = zone.x || 200;
      if (zone.parent && zone.parent.region === zone.region) {
        var angleInRadians = zone.angleFromParent * (Math.PI / 180);
        topPosition = zone.parent.y + zone.distanceFromParent * Math.sin(angleInRadians);
        leftPosition = zone.parent.x + zone.distanceFromParent * Math.cos(angleInRadians);
      }
      zone.y = topPosition;
      zone.x = leftPosition;
      zoneCell.style = "top:".concat(topPosition, "px;left:").concat(leftPosition, "px;");
      if (zone.parent) {
        var line = this.createZoneLine(zone, region);
        zoneCell.appendChild(line);
      }
      if (zone.hasConnectionToNewRegion) {
        this.createChildZoneLines(zone, zoneCell);
      }
      var button = this.createZoneButton(zone);
      zoneCell.appendChild(button);
      return {
        cell: zoneCell,
        button: button
      };
    }
  }, {
    key: "createZoneLine",
    value: function createZoneLine(zone, region) {
      var line = this.ui.createElement('div', null, 'zone-line');
      var radius = 15;
      var lineLength,
        angle,
        offsetX = 0,
        offsetY = 0;

      // handle connections within same region
      if (zone.parent.region === zone.region) {
        var dx = zone.x - zone.parent.x;
        var dy = zone.y - zone.parent.y;
        lineLength = Math.sqrt(dx * dx + dy * dy);
        angle = Math.atan2(dy, dx) * 180 / Math.PI - 180;
        var angleInRadians = (angle + 180) * Math.PI / 180;
        offsetX = radius * Math.cos(angleInRadians);
        offsetY = radius * Math.sin(angleInRadians);
        // handle connectinos to other worlds
      } else if (zone.parent.region.world !== zone.region.world) {
        lineLength = 200;
        angle = 180;
        var worldNavBox = this.createWorldNavBox(zone.parent.region.world, angle, zone.parent, zone);
        line.appendChild(worldNavBox);
      } else {
        lineLength = zone.distanceFromParent;
        angle = 90 - zone.angleFromParent;
        if (angle === 90) {
          // down
          lineLength = 80;
        } else if (angle === -90) {
          // up
          lineLength = 80;
        } else if (angle === 0 || angle === 180) {
          // right
          lineLength = 125;
        } else if (angle === -180) {
          // left
          lineLength = 100;
        }
        var regionNavBox = this.createRegionNavBox(zone.parent.region, angle, zone.parent, zone);
        line.appendChild(regionNavBox);
      }

      // const styleString = `width:${lineLength}px;transform:rotate(${angle}deg);left:${15 + offsetX}px;top:${15 + offsetY}px;`;
      var styleString = "width:".concat(lineLength, "px;transform:rotate(").concat(angle, "deg);");
      line.style = styleString;
      return line;
    }
  }, {
    key: "createChildZoneLines",
    value: function createChildZoneLines(zone, zoneCell) {
      var _iterator = _createForOfIteratorHelper(zone.children),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          var childLine = this.ui.createElement('div', null, 'zone-line');
          var lineLength = void 0,
            angle = void 0,
            offsetX = 0,
            offsetY = 0,
            navBox = void 0;

          // handle connections to other worlds
          if (child.region.world !== zone.region.world) {
            lineLength = child.distanceFromParent;
            angle = 0;
            navBox = this.createWorldNavBox(child.region.world, angle, child, zone);
            // handle connections to other regions within a world
          } else if (child.region !== zone.region) {
            lineLength = child.distanceFromParent;
            var dx = child.region.topLeftCornerX - zone.region.topLeftCornerX;
            var dy = child.region.topLeftCornerY - zone.region.topLeftCornerY;
            angle = Math.atan2(dy, dx) * 180 / Math.PI;
            var angleInRadians = (angle + 180) * Math.PI / 180;
            offsetX = 15 * Math.cos(angleInRadians);
            offsetY = 15 * Math.sin(angleInRadians);
            if (angle === 90) {
              // down
              lineLength = 80;
            } else if (angle === -90) {
              // up
              lineLength = 80;
            } else if (angle === 0 || angle === 180) {
              // right
              lineLength = 125;
            } else if (angle === -180) {
              // left
              lineLength = 100;
            }
            navBox = this.createRegionNavBox(child.region, angle, child, zone);
          } else {
            continue;
          }

          // const styleString = `width:${lineLength}px;transform:rotate(${angle}deg);left:${15 + offsetX}px;top:${15 + offsetY}px;`;
          var styleString = "width:".concat(lineLength, "px;transform:rotate(").concat(angle, "deg)");
          childLine.style = styleString;
          childLine.appendChild(navBox);
          zoneCell.appendChild(childLine);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "createWorldNavBox",
    value: function createWorldNavBox(world, angle, zone) {
      var _this3 = this;
      var zonePartner = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var worldNavBox = this.ui.createElement('div', null, ['worldNav-box', 'nav-box']);
      worldNavBox.style = "transform: rotate(".concat(-angle, "deg);");
      worldNavBox.textContent = "World: " + world.name;
      var clickListener = function clickListener() {
        if (zone.isDefeated || zonePartner.isDefeated) {
          _this3.eventManager.dispatchEvent('changeWorldMap', world);
        }
      };
      this.eventManager.addDomListener(worldNavBox, 'click', clickListener);
      worldNavBox.clickListener = clickListener;
      this.worldNavBoxes.push({
        navBox: worldNavBox,
        zone: zone,
        zonePartner: zonePartner
      });
      return worldNavBox;
    }
  }, {
    key: "createRegionNavBox",
    value: function createRegionNavBox(region, angle, zone) {
      var _this4 = this;
      var zonePartner = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var regionNavBox = this.ui.createElement('div', null, ['regionNav-box', 'nav-box']);
      regionNavBox.style = "transform: rotate(".concat(-angle, "deg);");
      regionNavBox.textContent = region.name;
      var regionClickHandler = function regionClickHandler() {
        if (zone.isDefeated || zonePartner.isDefeated) {
          _this4.eventManager.dispatchEvent('updateMapView', region);
        }
      };
      this.eventManager.addDomListener(regionNavBox, 'click', regionClickHandler);
      regionNavBox.clickListener = regionClickHandler;
      this.regionNavBoxes.push({
        navBox: regionNavBox,
        zone: zone,
        zonePartner: zonePartner
      });
      return regionNavBox;
    }
  }, {
    key: "createZoneButton",
    value: function createZoneButton(zone) {
      var button = this.ui.createElement('button', "conquest-button-".concat(zone.id), 'zone-button');
      var zoneClickHandler = function zoneClickHandler() {
        if (!button.disabled && !zone.isConquesting) {
          zone.startConquest();
        }
      };
      this.eventManager.addDomListener(button, 'click', zoneClickHandler);
      button.clickListener = zoneClickHandler;
      this.ui.populateMouseOverZIndexEvents(button);
      this.ui.populateTooltip(zone, button);
      return button;
    }
  }, {
    key: "updateZones",
    value: function updateZones(zones) {
      var _this5 = this;
      zones.forEach(function (zone) {
        var zoneElements = _this5.zoneElements.get(zone.id);
        if (!zoneElements) return;
        var button = zoneElements.button;
        _this5.ui.updateTooltip(zone);
        _this5.checkZoneButtonStatus(zone, button);
      });
      this.updateNavBoxes();
    }
  }, {
    key: "updateNavBoxes",
    value: function updateNavBoxes() {
      // Update region nav boxes
      this.regionNavBoxes.forEach(function (_ref) {
        var navBox = _ref.navBox,
          zone = _ref.zone,
          zonePartner = _ref.zonePartner;
        if (zone && zonePartner && (zone.isDefeated || zonePartner.isDefeated)) {
          navBox.classList.remove('disabled');
        } else {
          navBox.classList.add('disabled');
        }
      });

      // Update world nav boxes
      this.worldNavBoxes.forEach(function (_ref2) {
        var navBox = _ref2.navBox,
          zone = _ref2.zone,
          zonePartner = _ref2.zonePartner;
        if (zone && zonePartner && (zone.isDefeated || zonePartner.isDefeated)) {
          navBox.classList.remove('disabled');
        } else {
          navBox.classList.add('disabled');
        }
      });
    }
  }, {
    key: "checkZoneButtonStatus",
    value: function checkZoneButtonStatus(zone, button) {
      var options;
      if (zone.isDefeated) {
        options = {
          option: 1,
          disabled: true,
          addClasses: ['disabled-complete'],
          removeClasses: ['pulse', 'enabled'],
          styles: {
            border: zone.zoneType === "boss" ? '3px solid orange' : zone.zoneType === "progressionBoss" ? '3px solid yellow' : zone.zoneType === "legendaryBoss" ? '3px solid cyan' : '3px solid green'
          }
        };
      } else if (!zone.active || !this.ui.isAffordable(zone) || zone.isConquesting || !zone.unlocked) {
        options = {
          option: 2,
          disabled: true,
          addClasses: ['disabled', 'testtest1'],
          removeClasses: ['pulse', 'enabled'],
          styles: {
            border: zone.zoneType === "boss" ? '3px solid orange' : zone.zoneType === "progressionBoss" ? '3px solid yellow' : zone.zoneType === "legendaryBoss" ? '3px solid cyan' : ''
          }
        };
      }
      // if a zone's parent zone OR any of a zone's child zones exist- and if any of those zones are active, unlocked, and defeated
      else if (zone.active && zone.unlocked && !zone.isDefeated && zone.parent && zone.parent.active && zone.parent.isDefeated || zone.children.some(function (child) {
        return child.active && child.unlocked && child.isDefeated;
      })) {
        options = {
          option: 4,
          disabled: false,
          addClasses: ['enabled'],
          removeClasses: ['pulse', 'disabled', 'testtest1', 'testtest2'],
          styles: {
            border: zone.zoneType === "boss" ? '3px solid orange' : zone.zoneType === "progressionBoss" ? '3px solid yellow' : zone.zoneType === "legendaryBoss" ? '3px solid cyan' : ''
          }
        };
      } else if (zone.parent && !zone.parent.active) {
        // if any of zone children are not the same region, and that child is active, AND this zone is unlocked
        // for handling mid-tree nodes with connections to other regions, so they are activated properly outside the (stupid and needing repalcement) child/parent paradigm 
        if (zone.active && zone.unlocked && zone.children.some(function (child) {
          return child.region !== zone.region && child.active;
        })) {
          options = {
            option: 4,
            disabled: false,
            addClasses: ['enabled'],
            removeClasses: ['pulse', 'disabled', 'testtest1', 'testtest2'],
            styles: {
              border: zone.zoneType === "boss" ? '3px solid orange' : zone.zoneType === "progressionBoss" ? '3px solid yellow' : zone.zoneType === "legendaryBoss" ? '3px solid cyan' : ''
            }
          };
        } else {
          options = {
            option: 3,
            disabled: true,
            addClasses: ['disabled', 'testtest2'],
            removeClasses: ['pulse', 'enabled', 'testtest1'],
            styles: {
              border: zone.zoneType === "boss" ? '3px solid orange' : zone.zoneType === "progressionBoss" ? '3px solid yellow' : zone.zoneType === "legendaryBoss" ? '3px solid cyan' : ''
            }
          };
        }
      } else {
        options = {
          option: 4,
          disabled: false,
          addClasses: ['enabled'],
          removeClasses: ['pulse', 'disabled', 'testtest1', 'testtest2'],
          styles: {
            border: zone.zoneType === "boss" ? '3px solid orange' : zone.zoneType === "progressionBoss" ? '3px solid yellow' : zone.zoneType === "legendaryBoss" ? '3px solid cyan' : ''
          }
        };
      }
      if (zone.buttonStatusOption !== options.option) {
        this.updateZoneButtonStatus(button, options);
        zone.buttonStatusOption = options.option;
      }
    }
  }, {
    key: "updateZoneButtonStatus",
    value: function updateZoneButtonStatus(button, options) {
      button.disabled = options.disabled;
      options.addClasses.forEach(function (cls) {
        return button.classList.add(cls);
      });
      options.removeClasses.forEach(function (cls) {
        return button.classList.remove(cls);
      });
      for (var _i = 0, _Object$entries = Object.entries(options.styles || {}); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          styleName = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        button.style[styleName] = value;
      }
    }
  }, {
    key: "handleZoneConquestProgress",
    value: function handleZoneConquestProgress(data) {
      this.zoneUpdates.set(data.zoneID, data.progress);
    }
  }, {
    key: "handleZoneConquestStopped",
    value: function handleZoneConquestStopped(data) {
      var zoneElements = this.zoneElements.get(data.zoneID);
      if (!zoneElements) return;
      var button = zoneElements.button;
      button.style.background = '';
      button.disabled = false;
    }
  }, {
    key: "renderZoneUpdates",
    value: function renderZoneUpdates() {
      var _iterator2 = _createForOfIteratorHelper(this.zoneUpdates),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
            zoneID = _step2$value[0],
            progress = _step2$value[1];
          var zoneElements = this.zoneElements.get(zoneID);
          if (!zoneElements) continue;
          var button = zoneElements.button;
          if (progress === 1) {
            button.style.backgroundColor = "rgb(21, 97, 122)";
            button.style.backgroundImage = "";
          } else {
            button.style.backgroundColor = "rgb(21, 97, 122)";
            button.style.backgroundImage = "linear-gradient(to right, #90ee90 0%, #90ee90 ".concat(progress * 100, "%, transparent ").concat(progress * 100, "%, transparent 100%)");
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.zoneUpdates.clear();
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/OdysseySubTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _WorldDisplayManager = _interopRequireDefault(require("./WorldDisplayManager"));
var _RegionDisplayManager = _interopRequireDefault(require("./RegionDisplayManager"));
var _ProgressBarManager = _interopRequireDefault(require("./ProgressBarManager"));
var _MapViewManager = _interopRequireDefault(require("./MapViewManager"));
var _ZoneDisplayManager = _interopRequireDefault(require("./ZoneDisplayManager"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var OdysseySubTab = exports.default = /*#__PURE__*/function () {
  function OdysseySubTab(eventManager, ui, gameContent) {
    _classCallCheck(this, OdysseySubTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.worldManager = this.gameContent.worldManager;
    this.regionDisplayManager = new _RegionDisplayManager.default(eventManager, ui, gameContent);
    this.worldDisplayManager = new _WorldDisplayManager.default(eventManager, ui, gameContent, this.regionDisplayManager);
    this.zoneDisplayManager = new _ZoneDisplayManager.default(eventManager, ui, gameContent);
    this.mapViewManager = new _MapViewManager.default(eventManager, ui, gameContent, this.worldDisplayManager);
    this.progressBarManager = new _ProgressBarManager.default(ui, gameContent, this.worldDisplayManager);
    this.regionDisplayManager.mapViewManager = this.mapViewManager;
    this.regionDisplayManager.zoneDisplayManager = this.zoneDisplayManager;
    this.debugExpandedOdysseyView = false;
  }
  return _createClass(OdysseySubTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this = this;
      var odysseySidebarCol = document.getElementById("tab-col1-OdysseySubTab");
      var odysseyMainWindowCol = document.getElementById("tab-col2-OdysseySubTab");
      var odysseyContainer = document.getElementById("tab-content-OdysseySubTab");
      this.worldDisplayManager.populateWorldTabButtons(odysseySidebarCol);
      this.progressBarManager.createProgressBars(odysseyContainer);
      this.mapViewManager.initializeMapView(odysseyMainWindowCol);
      this.worldManager.worlds.forEach(function (world, index) {
        _this.worldDisplayManager.updateWorldTabButtons(world);
        _this.worldDisplayManager.populateWorld(world, index);
        if (world.currentlyViewing) {
          _this.updateWorld(world);
        }
      });
      if (this.debugExpandedOdysseyView) {
        // Add a debug button
        var debugButton = this.ui.createElement('button', 'debug-button', 'debug-button', 'Toggle Debug Expanded View');
        var debugButtonClickHandler = this.toggleDebugExpandedView.bind(this);
        this.eventManager.addDomListener(debugButton, 'click', debugButtonClickHandler);
        odysseySidebarCol.appendChild(debugButton);
      }
      this.mapViewManager.setInitialView();
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this2 = this;
      // Update the normal view only if not in debug expanded view
      if (!this.debugExpandedOdysseyView) {
        this.progressBarManager.updateProgressBars();
        this.worldManager.worlds.forEach(function (world) {
          _this2.worldDisplayManager.updateWorldTabButtons(world);
          if (world.currentlyViewing) {
            _this2.updateWorld(world);
          }
        });
      }
    }
  }, {
    key: "changeWorldTab",
    value: function changeWorldTab(world) {
      this.eventManager.dispatchEvent('changeWorldMap', world);
      this.mapViewManager.updateMapView(world);
    }
  }, {
    key: "updateWorld",
    value: function updateWorld(world) {
      if (world.regions) {
        this.regionDisplayManager.updateRegions(world.regions);
      }
    }
  }, {
    key: "toggleDebugExpandedView",
    value: function toggleDebugExpandedView() {
      // if (this.debugExpandedOdysseyView) {
      // If currently in debug expanded view, revert to the normal view
      this.mapViewManager.updateMapView(this.worldDisplayManager.currentlyViewedWorld);
      this.debugExpandedOdysseyView = false;
      // } else {
      // If currently in normal view, switch to the debug expanded view
      this.worldDisplayManager.debugExpandAllRegions();
      this.debugExpandedOdysseyView = true;
      var _iterator = _createForOfIteratorHelper(this.worldDisplayManager.currentlyViewedWorld.regions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var region = _step.value;
          var _iterator2 = _createForOfIteratorHelper(region.zones),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var zone = _step2.value;
              var dumbTooltip = document.getElementById("tooltip-".concat(zone.id));
              if (dumbTooltip) {
                dumbTooltip.remove();
              }
              this.ui.updateTooltip(zone);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        // }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
},{"./WorldDisplayManager":"components/UI/DisplayComponents/ExplorationDisplay/WorldDisplayManager.js","./RegionDisplayManager":"components/UI/DisplayComponents/ExplorationDisplay/RegionDisplayManager.js","./ProgressBarManager":"components/UI/DisplayComponents/ExplorationDisplay/ProgressBarManager.js","./MapViewManager":"components/UI/DisplayComponents/ExplorationDisplay/MapViewManager.js","./ZoneDisplayManager":"components/UI/DisplayComponents/ExplorationDisplay/ZoneDisplayManager.js"}],"components/UI/DisplayComponents/ExplorationDisplay/TournamentSubTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var TournamentSubTab = exports.default = /*#__PURE__*/function () {
  function TournamentSubTab(eventManager, ui, gameContent, tabManager) {
    var _this = this;
    _classCallCheck(this, TournamentSubTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.tournament = this.gameContent.tournament;
    this.fighters = this.tournament.fighters;
    this.eventManager.addListener('startFight', function (data) {
      _this.startFight(data.id, data.triggeredByEvent);
    });
    this.startIndex = this.tournament.currentFighterIndex;
    this.lastFighterStates = new Map();
  }
  return _createClass(TournamentSubTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this2 = this;
      this.tournamentCol = document.getElementById("tab-col1-TournamentSubTab");

      //universal event listener for the tournament subtab
      if (!this.tournamentEventListenerAdded) {
        var tournamentClickHandler = function tournamentClickHandler(event) {
          var target = event.target;
          // If clicked element is not a button, find the closest button ancestor
          if (target.tagName.toLowerCase() !== 'button') target = target.closest('button');
          if (target && target.tagName.toLowerCase() === 'button') {
            var fighterId = Number(target.id.replace('fight-button-', ''));
            if (fighterId && !target.disabled) {
              _this2.startFight(fighterId);
            }
          }
        };

        // Use EventManager to add the event listener
        this.eventManager.addDomListener(this.tournamentCol, 'click', tournamentClickHandler);
        this.tournamentEventListenerAdded = true;
        // Optionally store the listener for future removal
        this.tournamentCol.tournamentClickHandler = tournamentClickHandler;
      }
      var rectangleContainer = this.ui.findOrCreateElement(this.tournamentCol, 'div', 'rectangle-container');
      this.renderRectangles(rectangleContainer);
      var tournamentData = this.ui.findOrCreateElement(this.tournamentCol, 'div', 'tournament-data', ['tournament-color']);
      var rankData = this.ui.findOrCreateElement(tournamentData, 'div', 'tournament-rank');
      var headbandData = this.ui.findOrCreateElement(tournamentData, 'div', 'tournament-headband');
      this.updateHeadbandData(headbandData);
      var newRankText = "Overall Rank: ".concat(this.tournament.rank);
      this.ui.updateElementTextContent(rankData, newRankText);
    }
  }, {
    key: "updateHeadbandData",
    value: function updateHeadbandData(headbandData) {
      var headbandPseudoObject = this.ui.gameManager.findObjectById(800);
      if (headbandPseudoObject.level.gt(0)) {
        // let newHeadbandText = [`Headband Data:\n`];
        var newHeadbandText = [""];
        var headbandTier = 1;
        var _iterator = _createForOfIteratorHelper(headbandPseudoObject.observers),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var obs = _step.value;
            if (obs.active) {
              var str = "Headband Tier ".concat(headbandTier, ": ").concat(obs.targetType, " ").concat(obs.type, " ").concat(obs.runningCalcType, " (").concat(obs.value, " ").concat(obs.sourceCalcType, " ").concat(obs.source.level, ") \n");
              newHeadbandText.push(str);
              headbandTier++;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this.ui.updateElementTextContent(headbandData, newHeadbandText.join('\r'));
      } else {
        this.ui.updateElementTextContent(headbandData, '');
      }
    }
  }, {
    key: "renderRectangles",
    value: function renderRectangles(rectangleContainer) {
      var _this3 = this;
      var hasChanges = false;
      this.startIndex = this.tournament.currentFighterIndex;
      var _loop = function _loop() {
        var fighter = i >= 0 && i < _this3.fighters.length ? _this3.fighters[i] : null;
        var rectangle = rectangleContainer.querySelector(".rectangle[data-index=\"".concat(i, "\"]"));
        if (fighter) {
          var lastFighterState = _this3.lastFighterStates.get(fighter.id);
          var currentFighterState = {
            isDefeated: fighter.isDefeated,
            active: fighter.active,
            affordable: _this3.ui.isAffordable(fighter),
            isFighting: fighter.isFighting,
            prevFighterDefeated: fighter.prevFighterDefeated,
            tier: fighter.tier // Store the tier information
          };
          if (!lastFighterState || JSON.stringify(lastFighterState) !== JSON.stringify(currentFighterState)) {
            hasChanges = true;
            _this3.lastFighterStates.set(fighter.id, currentFighterState);
          }
        }
        if (!rectangle || hasChanges) {
          var newRectangle = document.createElement('div');
          newRectangle.className = 'rectangle';
          newRectangle.setAttribute('data-index', i);
          if (i === _this3.startIndex) {
            newRectangle.classList.add('center');
          } else {
            newRectangle.classList.remove('center');
          }
          if (i === _this3.startIndex + 1 || i === _this3.startIndex - 1) {
            newRectangle.classList.add('adjacent');
            newRectangle.classList.remove('first-last');
          } else if (i === _this3.startIndex + 2 || i === _this3.startIndex - 2) {
            newRectangle.classList.add('first-last');
            newRectangle.classList.remove('adjacent');
          } else {
            newRectangle.classList.remove('adjacent');
            newRectangle.classList.remove('first-last');
          }
          if (fighter) {
            newRectangle.innerHTML = "\n\t\t\t\t<div class=\"rectangle-name\">".concat(fighter.name, "</div>\n\t\t\t\t<div class=\"rectangle-cost\">").concat(fighter.costType, " ").concat(_this3.ui.formatNumber(fighter.costNextMultPurchase), "</div>\n\t\t\t\t<div class=\"rectangle-reward\">Reward: ").concat(_this3.ui.formatNumber(fighter.prodNextMultPurchase), " ").concat(fighter.prodType, "</div>\n\t\t\t  ");
            if (fighter.isDefeated) {
              var fighterTier = _this3.lastFighterStates.get(fighter.id).tier; // Get the stored tier
              newRectangle.style.background = "var(--color-".concat(fighterTier, ")"); // Use the stored tier for color
              newRectangle.style.color = 'white';
              newRectangle.style.border = '1px solid blue';
            } else {
              newRectangle.style.background = 'var(--color-cell)';
              newRectangle.style.color = "var(--color-".concat(fighter.tier, ")");
              newRectangle.style.border = '1px solid var(--color-cell-border)';
            }
            if (i === _this3.startIndex) {
              newRectangle.classList.add('clickable');
              newRectangle.disabled = fighter.isDefeated || !fighter.active || !_this3.ui.isAffordable(fighter) || fighter.isFighting || !fighter.prevFighterDefeated;
              if (newRectangle.disabled) {
                newRectangle.style.opacity = '0.5';
              } else {
                newRectangle.style.opacity = '1';
              }
              newRectangle.addEventListener('click', function () {
                if (!newRectangle.disabled) {
                  _this3.startFight(fighter.id);
                }
              });
            } else if (i === _this3.startIndex + 1 || i === _this3.startIndex + 2) {
              newRectangle.style.color = 'var(--color-text-muted)';
              newRectangle.style.border = "1px solid var(--color-".concat(fighter.tier, ")");
            }
          } else {
            newRectangle.classList.add('empty');
            newRectangle.style.background = 'var(--color-cell)';
            newRectangle.style.border = '1px solid var(--color-cell-border)';
          }
          if (rectangle) {
            rectangleContainer.replaceChild(newRectangle, rectangle);
          } else {
            rectangleContainer.appendChild(newRectangle);
          }
        }
      };
      for (var i = this.startIndex + 2; i >= this.startIndex - 2; i--) {
        _loop();
      }

      // Remove extra rectangles if there are more than 5
      while (rectangleContainer.childElementCount > 5) {
        rectangleContainer.removeChild(rectangleContainer.firstChild);
      }
    }

    // renderRectangles(rectangleContainer) {
    // 	let hasChanges = false;

    // 	this.startIndex = this.tournament.currentFighterIndex;

    // 	const existingRectangles = rectangleContainer.querySelectorAll('.rectangle');
    // 	const existingMap = new Map();
    // 	existingRectangles.forEach(rect => {
    // 		existingMap.set(parseInt(rect.getAttribute('data-index')), rect);
    // 	});

    // 	for (let i = this.startIndex + 2; i >= this.startIndex - 2; i--) {
    // 		const fighter = i >= 0 && i < this.fighters.length ? this.fighters[i] : null;
    // 		const rectangle = existingMap.get(i);

    // 		if (fighter) {
    // 			const lastFighterState = this.lastFighterStates.get(fighter.id);
    // 			const currentFighterState = {
    // 				isDefeated: fighter.isDefeated,
    // 				active: fighter.active,
    // 				affordable: this.ui.isAffordable(fighter),
    // 				isFighting: fighter.isFighting,
    // 				prevFighterDefeated: fighter.prevFighterDefeated,
    // 				tier: fighter.tier // Store the tier information
    // 			};

    // 			if (!lastFighterState || JSON.stringify(lastFighterState) !== JSON.stringify(currentFighterState)) {
    // 				hasChanges = true;
    // 				this.lastFighterStates.set(fighter.id, currentFighterState);
    // 			}
    // 		}

    // 		if (!rectangle || hasChanges) {
    // 			let newRectangle = rectangle || document.createElement('div');
    // 			newRectangle.className = 'rectangle';
    // 			newRectangle.setAttribute('data-index', i);

    // 			newRectangle.addEventListener('click', () => {
    // 			  if (!newRectangle.disabled) {
    // 				this.startFight(fighter.id);
    // 			  }
    // 			});
    // 			// Class adjustments
    // 			newRectangle.classList.remove('center', 'adjacent', 'first-last');
    // 			if (i === this.startIndex) {
    // 				newRectangle.classList.add('center');
    // 			} else if (i === this.startIndex + 1 || i === this.startIndex - 1) {
    // 				newRectangle.classList.add('adjacent');
    // 			} else if (i === this.startIndex + 2 || i === this.startIndex - 2) {
    // 				newRectangle.classList.add('first-last');
    // 			}

    // 			// Content updates
    // 			if (fighter) {
    // 				newRectangle.innerHTML = `
    // 					<div class="rectangle-name">${fighter.name}</div>
    // 					<div class="rectangle-cost">${fighter.costType} ${this.ui.formatNumber(fighter.costNextMultPurchase)}</div>
    // 					<div class="rectangle-reward">Reward: ${this.ui.formatNumber(fighter.prodNextMultPurchase)} ${fighter.prodType}</div>
    // 				`;

    // 				// Style adjustments based on state
    // 				newRectangle.style.background = fighter.isDefeated ? `var(--color-${fighter.tier})` : 'var(--color-cell)';
    // 				newRectangle.style.color = fighter.isDefeated ? 'white' : `var(--color-${fighter.tier})`;
    // 				newRectangle.style.border = fighter.isDefeated ? '1px solid blue' : '1px solid var(--color-cell-border)';
    // 				newRectangle.style.opacity = fighter.isDefeated || !fighter.active || !this.ui.isAffordable(fighter) || fighter.isFighting || !fighter.prevFighterDefeated ? '0.5' : '1';

    // 				if (i === this.startIndex) {
    // 					newRectangle.classList.add('clickable');
    // 					newRectangle.disabled = fighter.isDefeated || !fighter.active || !this.ui.isAffordable(fighter) || fighter.isFighting || !fighter.prevFighterDefeated;
    // 				}
    // 			} else {
    // 				newRectangle.classList.add('empty');
    // 			}

    // 			if (!rectangle) {
    // 				rectangleContainer.appendChild(newRectangle);
    // 			}
    // 		}
    // 	}

    // 	// Cleanup: remove extra rectangles if more than 5 exist
    // 	while (rectangleContainer.childElementCount > 5) {
    // 		rectangleContainer.removeChild(rectangleContainer.firstChild);
    // 	}
    // }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var rectangleContainer = document.getElementById('rectangle-container');
      this.renderRectangles(rectangleContainer);
      var tournamentData = this.ui.findOrCreateElement(this.tournamentCol, 'div', 'tournament-data', ['tournament-color']);
      var rankData = this.ui.findOrCreateElement(tournamentData, 'div', 'tournament-rank');
      var newRankText = "Overall Rank: ".concat(this.tournament.rank);
      this.ui.updateElementTextContent(rankData, newRankText);
      var headbandData = this.ui.findOrCreateElement(tournamentData, 'div', 'tournament-headband');
      this.updateHeadbandData(headbandData);
    }
  }, {
    key: "startFight",
    value: function startFight(id) {
      var triggeredByEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var fighter = this.ui.gameManager.findObjectById(id);
      this.tournament.processFighterDefeat(fighter.id);
      if (!triggeredByEvent) {
        // Update startIndex to match the currentFighterIndex
        this.startIndex = this.tournament.currentFighterIndex;
        this.renderRectangles(document.getElementById('rectangle-container'));
      }
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/ExplorationDisplay/ArtifactsSubTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ArtifactsSubTab = exports.default = /*#__PURE__*/function () {
  function ArtifactsSubTab(eventManager, ui, gameContent, tabManager) {
    _classCallCheck(this, ArtifactsSubTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.shardsMap = this.gameContent.shards;
    this.artifacts = this.gameContent.artifacts;
  }
  return _createClass(ArtifactsSubTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this = this;
      this.targetCol1 = document.getElementById("tab-col1-ArtifactsSubTab");
      this.targetCol2 = document.getElementById("tab-col2-ArtifactsSubTab");
      this.targetCol1.classList.add('artifacts-color');
      this.targetCol2.classList.add('artifacts-color');

      // Create overall shard multiplier cell
      var overallMultiplierId = 'overall-shard-multiplier';
      var overallMultiplierCell = this.targetCol1.querySelector("#".concat(overallMultiplierId));
      if (!overallMultiplierCell) {
        overallMultiplierCell = this.ui.createElement('div', overallMultiplierId, 'overall-multiplier-cell');
        this.targetCol1.appendChild(overallMultiplierCell);
      }

      // Populate shards currency display
      this.shardsMap.forEach(function (amount, shardType) {
        var shardId = "shard-".concat(shardType);
        var shardCell = _this.targetCol1.querySelector("#".concat(shardId));
        if (!shardCell) {
          shardCell = _this.ui.createElement('div', shardId, 'shard-cell');
          var shardName = _this.ui.createElement('div', null, 'shard-name');
          var shardMultiplier = _this.ui.createElement('div', null, 'shard-multiplier');
          shardCell.appendChild(shardName);
          shardCell.appendChild(shardMultiplier);
          _this.targetCol1.appendChild(shardCell);
        }
      });

      // populate initial base item artifact cells and hide inactive ones
      var _iterator = _createForOfIteratorHelper(this.artifacts),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var artifact = _step.value;
          var artifactId = "artifact-".concat(artifact.id);
          var artifactCell = this.targetCol2.querySelector("#".concat(artifactId));
          artifactCell = this.ui.populateFeatureCell(artifact, this.targetCol2, artifactId);
          this.ui.populateAutobuyCheckbox(artifact, artifactCell, null);
          this.ui.updateVisibility(artifactCell, artifact.active);
          this.ui.populateMouseOverZIndexEvents(artifactCell);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this2 = this;
      if (this.artifactEvolving) {
        return;
      }

      // Update shard column
      this.shardsMap.forEach(function (amount, shardType) {
        var shardId = "shard-".concat(shardType);
        var shardCell = _this2.targetCol1.querySelector("#".concat(shardId));
        var shardName = shardCell.querySelector('.shard-name');
        var shardMultiplier = shardCell.querySelector('.shard-multiplier');
        shardName.textContent = "".concat(shardType, ": ").concat(_this2.ui.formatNumber((0, _decimal.DEC)(amount)));
        var computedMultiplier = _this2.gameContent.computedShardMultipliers[shardType] || (0, _decimal.DEC)(0);
        shardMultiplier.textContent = "Multiplier: ".concat(_this2.ui.formatNumber(computedMultiplier));
        shardCell.style.opacity = amount == 0 ? 0 : 1;
      });

      // Update overall shard multiplier
      var overallMultiplierCell = this.targetCol1.querySelector('#overall-shard-multiplier');
      overallMultiplierCell.textContent = "Overall Shard Income Multiplier: ".concat(this.ui.formatNumber(this.gameContent.overallShardBonusMultiplier));

      // Update Artifact Column
      var _iterator2 = _createForOfIteratorHelper(this.artifacts),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var artifact = _step2.value;
          var artifactId = "artifact-".concat(artifact.id);
          var artifactCell = this.targetCol2.querySelector("#".concat(artifactId));
          if (artifact.active) {
            this.ui.updateFeatureCell(artifact, artifactCell);
            this.ui.updateAutobuyCheckbox(artifact, artifactCell);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }]);
}();
},{"../../../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/UI/DisplayComponents/ExplorationDisplay/ExplorationTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../../Utilities/decimal.js");
var _OdysseySubTab = _interopRequireDefault(require("./OdysseySubTab.js"));
var _TournamentSubTab = _interopRequireDefault(require("./TournamentSubTab.js"));
var _ArtifactsSubTab = _interopRequireDefault(require("./ArtifactsSubTab.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ExplorationTab = exports.default = /*#__PURE__*/function () {
  function ExplorationTab(eventManager, ui, gameContent, tabManager) {
    _classCallCheck(this, ExplorationTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.odysseySubTab = new _OdysseySubTab.default(this.eventManager, this.ui, this.gameContent);
    this.tournamentSubTab = new _TournamentSubTab.default(this.eventManager, this.ui, this.gameContent);
    this.artifactsSubTab = new _ArtifactsSubTab.default(this.eventManager, this.ui, this.gameContent);
  }
  return _createClass(ExplorationTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      this.populateExplorationTabSubTabButtons();
      this.odysseySubTab.populateDisplay();
      this.tournamentSubTab.populateDisplay();
      this.artifactsSubTab.populateDisplay();
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      switch (this.tabManager.currentSubTab) {
        case 'odyssey':
          this.odysseySubTab.updateDisplay();
          break;
        case 'tournament':
          this.tournamentSubTab.updateDisplay();
          break;
        case 'artifacts':
          this.artifactsSubTab.updateDisplay();
          break;
      }
    }
  }, {
    key: "populateExplorationTabSubTabButtons",
    value: function populateExplorationTabSubTabButtons() {
      var _this = this;
      var targetParent = document.getElementById('exploration');
      var tabButtonsContainer = document.getElementById("exploration-tab-buttons");
      var subTabButtons = Array.from(tabButtonsContainer.children);
      var subTabNames = subTabButtons.map(function (button) {
        return button.id.replace('SubTab', '').toLowerCase();
      });
      subTabButtons.forEach(function (button, index) {
        var buttonClickHandler = function buttonClickHandler() {
          _this.changeExplorationSubTab(button.id, subTabNames[index]);
        };
        _this.eventManager.addDomListener(button, 'click', buttonClickHandler);
        var tabContent = document.getElementById("tab-content-".concat(button.id));
        var col1, col2;
        if (!tabContent) {
          tabContent = _this.ui.createElement('div', "tab-content-".concat(button.id));
          tabContent.style.display = index === 0 ? 'flex' : 'none'; // Only display the first tab by default

          col1 = _this.ui.createElement('div', "tab-col1-".concat(button.id), 'content-tab-col');
          col2 = _this.ui.createElement('div', "tab-col2-".concat(button.id), 'content-tab-col');
          tabContent.appendChild(col1);
          tabContent.appendChild(col2);
          targetParent.appendChild(tabContent);
        }
        // else {
        // col1 = document.getElementById(`tab-col1-${button.id}`);
        // col2 = document.getElementById(`tab-col2-${button.id}`);
        // }
      });

      // If it's the first tab, add 'active-tab' class
      if (subTabButtons.length > 0) {
        subTabButtons[0].classList.add('active-tab');
      }
    }
  }, {
    key: "changeExplorationSubTab",
    value: function changeExplorationSubTab(tabId, subTabName) {
      var _this2 = this;
      this.tabManager.toggleActiveSubTabClass("exploration-tab-buttons", tabId);
      this.tabManager.toggleSubTabContentDisplay('exploration', 'tab-content', 'none');

      // Hide the current subTab's multiplier container if exists
      if (this.tabManager.currentSubTab) {
        var currentSubTabObject = this.tabManager.tabs.find(function (tab) {
          return tab.name === _this2.tabManager.currentSubTab;
        });
        this.ui.multiplierManager.toggleMultiplierContainer(currentSubTabObject, "none");
      }
      var explorationTab = this.tabManager.tabs.find(function (tab) {
        return tab.name === _this2.tabManager.currentTab;
      });
      explorationTab.currentSubTab = subTabName;
      this.tabManager.currentSubTab = subTabName;

      // Show the new subTab's multiplier container if exists
      if (this.tabManager.currentSubTab) {
        var _currentSubTabObject = this.tabManager.tabs.find(function (tab) {
          return tab.name === _this2.tabManager.currentSubTab;
        });
        this.ui.multiplierManager.toggleMultiplierContainer(_currentSubTabObject, "block");
        _currentSubTabObject.hasBeenOpened = true;

        //also assign the current subtab to the current tab
        explorationTab.currentSubTabObject = _currentSubTabObject;
      }
      this.eventManager.dispatchEvent('updateHotkeyButtons');
      this.ui.gameManager.onTabChange(explorationTab);
      this.ui.showElement("tab-content-".concat(tabId));
    }
  }]);
}();
},{"../../../Utilities/decimal.js":"components/Utilities/decimal.js","./OdysseySubTab.js":"components/UI/DisplayComponents/ExplorationDisplay/OdysseySubTab.js","./TournamentSubTab.js":"components/UI/DisplayComponents/ExplorationDisplay/TournamentSubTab.js","./ArtifactsSubTab.js":"components/UI/DisplayComponents/ExplorationDisplay/ArtifactsSubTab.js"}],"components/UI/DisplayComponents/TrainingTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../../Utilities/break_eternity.min.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// large number library
var TrainingTab = exports.default = /*#__PURE__*/function () {
  function TrainingTab(eventManager, ui, gameContent, tabManager) {
    _classCallCheck(this, TrainingTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.realms = this.gameContent.realms;
    this.eventManager.addListener('milestoneAchieved', this.onMilestoneAchieved.bind(this));
    this.evolutionTutorialGiven = false;
    this.eventManager.addListener('realmEvolved', this.onRealmEvolved.bind(this));
  }
  return _createClass(TrainingTab, [{
    key: "onRealmEvolved",
    value: function onRealmEvolved(event) {
      if (!this.evolutionTutorialGiven) {
        this.evolutionTutorialTrigger = true;
      }
    }
  }, {
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this = this;
      var targetParent = document.getElementById('training');
      // let realmButtonsContainer = document.getElementById('training-realm-buttons');

      this.realms.forEach(function (realm, index) {
        var realmButtonId = "".concat(realm.name, "SubTab");
        var realmButton = document.getElementById(realmButtonId);
        var realmContent = document.getElementById("realm-content-".concat(realm.name));
        var col1, col2;
        var realmButtonClickHandler = function realmButtonClickHandler() {
          return _this.changeRealmSubTab(realmButtonId, realm.name);
        };
        _this.eventManager.addDomListener(realmButton, 'click', realmButtonClickHandler);

        // If it's the first realm, add 'active-tab' class
        if (index === 0) {
          realmButton.classList.add('active-tab');
        }
        realmContent = _this.ui.createElement('div', "realm-content-".concat(realm.name), "realm-content");
        realmContent.style.display = index === 0 ? 'flex' : 'none'; // Only display the first realm by default

        var header = _this.ui.createElement('div', "".concat(realm.name, "-realm-header"), ['realm-header', "".concat(realm.name, "-color")]);
        var totalIncome = _this.ui.createElement('div', "".concat(realm.name, "-realm-income"), 'realm-income');
        var powerLevelContrib = _this.ui.createElement('div', "".concat(realm.name, "-realm-power-contrib"), 'realm-power-contrib');
        col1 = _this.ui.createElement('div', "".concat(realm.type, "-col1-").concat(realm.name), 'content-tab-col');
        col2 = _this.ui.createElement('div', "".concat(realm.type, "-col2-").concat(realm.name), 'content-tab-col');
        var realmNameContainer = _this.ui.createElement('div', "".concat(realm.name, "-realm-name"), ['realm-name', "".concat(realm.name, "-color")]);
        realmContent.appendChild(realmNameContainer);
        header.appendChild(totalIncome);
        header.appendChild(powerLevelContrib);
        realmContent.appendChild(col1);
        realmContent.appendChild(col2);
        realmContent.appendChild(header);
        targetParent.appendChild(realmContent);
        _this.populateRealm(col1, col2, realm);
      });
    }
  }, {
    key: "createPopup",
    value: function createPopup(title, message) {
      var _this2 = this;
      // Create the backdrop for the modal
      var backdrop = document.createElement('div');
      backdrop.id = 'modal-backdrop';

      // Create the modal container
      var modal = document.createElement('div');
      modal.className = 'modal-container';

      // Create the title element
      var modalTitle = document.createElement('h1');
      modalTitle.className = 'modal-title';
      modalTitle.textContent = title;

      // Create the message element
      var modalMessage = document.createElement('p');
      modalMessage.className = 'modal-message';
      modalMessage.textContent = message;

      // Create a close button for the modal
      var closeButton = document.createElement('button');
      closeButton.className = 'modal-close-button';
      closeButton.textContent = 'Close';
      closeButton.onclick = function () {
        document.body.removeChild(backdrop);
        if (_this2.onClose) _this2.onClose(); // Execute onClose callback if defined
      };

      // Append elements to modal
      modal.appendChild(modalTitle);
      modal.appendChild(modalMessage);
      modal.appendChild(closeButton);

      // Append modal to backdrop
      backdrop.appendChild(modal);

      // Append backdrop to body
      document.body.appendChild(backdrop);
      return {
        closeModal: function closeModal() {
          return closeButton.onclick();
        },
        onClose: null
      };
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this3 = this;
      if (this.evolutionTutorialTrigger) {
        this.showEvolutionTutorial();
        this.evolutionTutorialTrigger = false;
        this.evolutionTutorialGiven = true;
      }
      this.realms.forEach(function (realm) {
        if (_this3.tabManager.currentSubTab === realm.type) {
          var col1 = document.getElementById("".concat(realm.type, "-col1-").concat(realm.name));
          var col2 = document.getElementById("".concat(realm.type, "-col2-").concat(realm.name));
          _this3.populateRealm(col1, col2, realm);
        }
      });
    }
  }, {
    key: "showEvolutionTutorial",
    value: function showEvolutionTutorial() {
      // Code to display the popup
      var popup = this.createPopup("evolution.", "Your powers grow, you have outgrown your old training, etc.  Anyways, your training levels reset and are replaced with more powerful trainings.  Cuz you gotta become a big strong boi!  Your upgrades also cost less.  Get over it.  This is the only time you'll see this.");
      // this.ui.freezeUI(true); // Freeze the UI
      // popup.onClose = () => this.ui.freezeUI(false); // Unfreeze UI on close
    }
  }, {
    key: "populateRealm",
    value: function populateRealm(targetCol1, targetCol2, realm) {
      var _this4 = this;
      var realmFeatures;
      if (realm.type === "force" || realm.type === "energy") {
        realmFeatures = realm.trainings;
      } else if (realm.type === "wisdom" || realm.type === "divine") {
        realmFeatures = realm.generatorChains[0].generators;
      }
      realmFeatures.forEach(function (feature) {
        var featureId = "feature-".concat(feature.id);
        var featureCell = targetCol1.querySelector("#".concat(featureId));
        var currentValueElement;
        if (!featureCell) {
          featureCell = _this4.ui.populateFeatureCell(feature, targetCol1, featureId);
          var featureCellNameContainer = featureCell.getElementsByClassName('feature-name-container')[0];
          var progressBar = _this4.ui.createElement('div', "progress-bar-".concat(feature.id), 'progress-bar');
          var progressFill = _this4.ui.createElement('div', "progress-fill-".concat(feature.id), 'progress-fill');
          progressBar.appendChild(progressFill);
          // Create a text element for flashing text
          var flashText = _this4.ui.createElement('div', "flash-text-".concat(feature.id), 'flash-text');
          flashText.textContent = "Milestone Achieved!"; // Filler text
          flashText.style.display = 'none'; // Hide it by default
          progressBar.appendChild(flashText);
          featureCellNameContainer.appendChild(progressBar);
          var milestoneTierLevel = _this4.ui.createElement('div', "milestone-tier-level-".concat(feature.id), 'milestone-tier-level');
          featureCellNameContainer.appendChild(milestoneTierLevel);
          _this4.updateMilestoneProgress(feature, featureCell);
          _this4.ui.populateMouseOverZIndexEvents(featureCell);
          _this4.ui.populateAutobuyCheckbox(feature, featureCell, _this4.ui.gameManager.automationManager[realm.type + 'Heap']);
          currentValueElement = _this4.ui.populateCurrentValueElement(feature, featureCell);
        } else {
          currentValueElement = featureCell.querySelector(".".concat(feature.featureType, "-current-value"));
        }
        if (feature.id === 1001 && realm.type === 'force') {
          var button = featureCell.querySelector("#button-".concat(feature.id));
          if (button) {
            if (feature.manualLevel.eq(0)) {
              button.classList.add('glow');
            } else {
              button.classList.remove('glow');
            }
          }
        }
        _this4.ui.updateAutobuyCheckbox(feature, featureCell);
        var newCurrentValueText;
        if (feature.prodCurrentGlobal.gt(0)) {
          newCurrentValueText = "".concat(_this4.ui.formatNumber(feature.prodCurrentGlobal), " ").concat(feature.prodType.replace("Income", ""), "/sec\r\n");
          _this4.ui.updateElementTextContent(currentValueElement, newCurrentValueText);
        } else {
          _this4.ui.updateElementTextContent(currentValueElement, '');
        }
        _this4.ui.updateFeatureCell(feature, featureCell);
        _this4.updateMilestoneProgress(feature, featureCell);
      });
      realm.realmUpgrades.forEach(function (upgrade) {
        var upgradeId = "upgrade-".concat(upgrade.id);
        var upgradeCell = targetCol2.querySelector("#".concat(upgradeId));
        if (!upgradeCell) {
          upgradeCell = _this4.ui.populateFeatureCell(upgrade, targetCol2, upgradeId);
          _this4.ui.populateAutobuyCheckbox(upgrade, upgradeCell, _this4.ui.gameManager.automationManager[realm.type + 'Heap']);
          _this4.ui.populateMouseOverZIndexEvents(upgradeCell);
          targetCol2.appendChild(upgradeCell);
        }
        _this4.ui.updateAutobuyCheckbox(upgrade, upgradeCell);
        _this4.ui.updateFeatureCell(upgrade, upgradeCell);
      });

      // update realm stats

      var totalIncome = document.getElementById("".concat(realm.name, "-realm-income"));
      var newIncomeText = '';
      if (this.gameContent[realm.name + 'Income'].gt(0)) {
        newIncomeText = "Total Income: ".concat(this.ui.formatNumber(this.gameContent[realm.name + 'Income']), " /sec");
      }
      this.ui.updateElementTextContent(totalIncome, newIncomeText);
      var powerLevelContrib = document.getElementById("".concat(realm.name, "-realm-power-contrib"));
      var newPowerContribText = '';
      if (this.gameContent[realm.name + 'PowerLevelMultiplier'].gt(1)) {
        newPowerContribText = "Contribution to Power Level: x".concat(this.ui.formatNumber(this.gameContent[realm.name + 'PowerLevelMultiplier']));
      }
      this.ui.updateElementTextContent(powerLevelContrib, newPowerContribText);

      // update realm name
      var realmNameContainer = document.getElementById("".concat(realm.name, "-realm-name"));
      var newRealmNameText = '';
      if (realm.evolutionTier.gt(1)) {
        newRealmNameText = "".concat(realm.evolutionTierNames[Number(realm.evolutionTier) - 1], " - ");
        newRealmNameText += "Tier ".concat(this.ui.numberFormatter.toRoman(realm.evolutionTier));
      } else if (realm.evolutionTier.eq(1)) {
        newRealmNameText = "".concat(realm.evolutionTierNames[Number(realm.evolutionTier) - 1]);
      }
      this.ui.updateElementTextContent(realmNameContainer, newRealmNameText);
    }
  }, {
    key: "onMilestoneAchieved",
    value: function onMilestoneAchieved(event) {
      // console.log("Milestone achieved:", event);
      var featureId = event.id;
      var progressBar = document.querySelector("#progress-bar-".concat(featureId));
      var flashText = document.querySelector("#flash-text-".concat(featureId)); // Get the text element
      flashText.textContent = "x ".concat(event.milestonesAchieved * 2);
      if (progressBar && flashText) {
        progressBar.classList.add('flash-effect');
        flashText.classList.add('flash-effect-text'); // Apply the text flashing effect

        progressBar.addEventListener('animationend', function () {
          progressBar.classList.remove('flash-effect');
        }, {
          once: true
        });
        flashText.addEventListener('animationend', function () {
          flashText.classList.remove('flash-effect-text'); // Remove class after animation to reset state
          flashText.style.display = 'none'; // Hide the text after animation
        }, {
          once: true
        });
      }
    }
  }, {
    key: "updateMilestoneProgress",
    value: function updateMilestoneProgress(feature, featureCell) {
      var progressFill = featureCell.querySelector("#progress-fill-".concat(feature.id));
      var milestoneTierLevel = featureCell.querySelector("#milestone-tier-level-".concat(feature.id));
      if (feature.milestoneTiers.length > 0) {
        var currentMilestone = feature.milestonesAchieved;
        // Assuming the game level starts at 0 or any predefined starting point
        var previousMilestoneLevel = new _break_eternityMin.default(0); // Modify this if your starting level is different
        var nextMilestoneLevel;
        if (currentMilestone > 0) {
          previousMilestoneLevel = new _break_eternityMin.default(feature.milestoneTiers[currentMilestone - 1]);
        }
        nextMilestoneLevel = new _break_eternityMin.default(feature.milestoneTiers[currentMilestone]);

        // Calculate progress
        if (nextMilestoneLevel.gt(previousMilestoneLevel)) {
          // Ensure next milestone is greater than the previous
          var progress = feature.manualLevel.minus(previousMilestoneLevel).div(nextMilestoneLevel.minus(previousMilestoneLevel));
          progressFill.style.width = "".concat(Math.max(0, Math.min(progress.toNumber(), 1)) * 100, "%");
        } else {
          progressFill.style.width = '100%'; // Should not happen normally, but a fallback in case of error
        }
        milestoneTierLevel.textContent = "Rank: ".concat(feature.milestonesAchieved);
      } else {
        progressFill.style.width = '0%';
        milestoneTierLevel.textContent = '';
      }
    }
  }, {
    key: "changeRealmSubTab",
    value: function changeRealmSubTab(realmButtonId, realmType) {
      var _this5 = this;
      this.tabManager.toggleActiveSubTabClass("training-realm-buttons", realmButtonId);
      this.tabManager.toggleSubTabContentDisplay('training', 'realm-content', 'none');

      // Hide the current subTab's multiplier container if exists
      if (this.tabManager.currentSubTab) {
        var currentSubTabObject = this.tabManager.tabs.find(function (tab) {
          return tab.name === _this5.tabManager.currentSubTab;
        });
        this.ui.multiplierManager.toggleMultiplierContainer(currentSubTabObject, "none");
      }
      var trainingTab = this.tabManager.tabs.find(function (tab) {
        return tab.name === _this5.tabManager.currentTab;
      });
      trainingTab.currentSubTab = realmType;
      this.tabManager.currentSubTab = realmType;

      // Show the new subTab's multiplier container if exists
      if (this.tabManager.currentSubTab) {
        var _currentSubTabObject = this.tabManager.tabs.find(function (tab) {
          return tab.name === _this5.tabManager.currentSubTab;
        });
        this.ui.multiplierManager.toggleMultiplierContainer(_currentSubTabObject, "block");
        _currentSubTabObject.hasBeenOpened = true;

        //also assign new subtab to currentTab object
        trainingTab.currentSubTabObject = _currentSubTabObject;
      }
      this.eventManager.dispatchEvent('updateHotkeyButtons');
      this.ui.gameManager.onTabChange(trainingTab);
      this.ui.showElement("realm-content-".concat(realmType));
    }
  }]);
}();
},{"../../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js"}],"components/UI/DisplayComponents/EssenceTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var EssenceTab = exports.default = /*#__PURE__*/function () {
  function EssenceTab(eventManager, ui, gameContent, tabManager) {
    var _this = this;
    _classCallCheck(this, EssenceTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.essenceUpgrades = this.gameContent.essenceUpgrades;
    this.targetCol1 = this.ui.essenceCol1;
    this.targetCol2 = this.ui.essenceCol2;
    window.addEventListener('resize', function () {
      _this.repositionElements();
    });
  }
  return _createClass(EssenceTab, [{
    key: "repositionElements",
    value: function repositionElements() {
      var centerX = window.innerWidth / 2;
      var centerY = window.innerHeight / 3;

      // Only reposition essence cells, not the rebirth button
      this.essenceUpgrades.forEach(function (upgrade) {
        var upgradeID = "eUpgrade-".concat(upgrade.id);
        var essenceCell = document.getElementById(upgradeID);
        if (essenceCell) {
          var angleInRadians = upgrade.angleFromParent * (Math.PI / 180);
          var topPosition = centerY + upgrade.distanceFromParent * Math.sin(angleInRadians);
          var leftPosition = centerX + upgrade.distanceFromParent * Math.cos(angleInRadians);

          // Check if parent exists and adjust accordingly
          if (upgrade.parent) {
            var parentCell = document.getElementById("eUpgrade-".concat(upgrade.parent.id));
            if (parentCell) {
              topPosition = parseInt(parentCell.style.top, 10) + upgrade.distanceFromParent * Math.sin(angleInRadians);
              leftPosition = parseInt(parentCell.style.left, 10) + upgrade.distanceFromParent * Math.cos(angleInRadians);
            }
          }
          essenceCell.style.position = 'absolute';
          essenceCell.style.top = "".concat(topPosition, "px");
          essenceCell.style.left = "".concat(leftPosition, "px");
        }
      });
    }
  }, {
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this2 = this;
      var initialX = window.innerWidth / 2;
      var initialY = window.innerHeight / 3;

      //set overall essence stats/multiplier
      var rebirth1Button = this.ui.createElement('button', 'rebirth1Button', 'rebirth-button', 'Rebirth 1');
      rebirth1Button.disabled = true;
      var rebirth1ButtonClickHandler = function rebirth1ButtonClickHandler() {
        _this2.ui.stateManager.saveState(1);
      };
      this.eventManager.addDomListener(rebirth1Button, 'click', rebirth1ButtonClickHandler);
      this.rebirth1Button = rebirth1Button;
      this.targetCol1.appendChild(this.rebirth1Button);
      var essenceStats = this.ui.createElement('div', null, 'essence-stats');
      this.targetCol2.appendChild(essenceStats);

      //init essence cells container
      //assign tab color
      this.targetCol1.classList.add('essence-color');
      var essenceGrid = this.ui.createElement('div', "essence-grid");
      this.targetCol1.appendChild(essenceGrid);
      this.essenceUpgrades.forEach(function (upgrade) {
        var upgradeID = "eUpgrade-".concat(upgrade.id);
        var essenceCell = _this2.targetCol1.querySelector("#".concat(upgradeID));

        //set essence cells
        essenceCell = _this2.ui.createElement('button', upgradeID, 'essence-cell');
        var essenceCellClickHandler = function essenceCellClickHandler() {
          _this2.ui.buyFeature(upgrade.id);
          upgrade.activateChildren();
        };
        _this2.eventManager.addDomListener(essenceCell, 'click', essenceCellClickHandler);
        _this2.ui.populateMouseOverZIndexEvents(essenceCell);
        var topPosition = initialY;
        var leftPosition = initialX;
        // calculate the position of the upgradeCell
        if (upgrade.parent) {
          var angleInRadians = upgrade.angleFromParent * (Math.PI / 180);
          topPosition = upgrade.parent.y + upgrade.distanceFromParent * Math.sin(angleInRadians);
          leftPosition = upgrade.parent.x + upgrade.distanceFromParent * Math.cos(angleInRadians);
        }
        essenceCell.style.position = 'absolute';
        essenceCell.style.top = "".concat(topPosition, "px");
        essenceCell.style.left = "".concat(leftPosition, "px");
        upgrade.y = topPosition;
        upgrade.x = leftPosition;

        //Add connecting lines
        if (upgrade.parent) {
          // Calculate the line's width (the distance between the cells) and angle
          var dx = upgrade.x - upgrade.parent.x;
          var dy = upgrade.y - upgrade.parent.y;
          var lineLength = Math.sqrt(dx * dx + dy * dy);
          var angle = Math.atan2(dy, dx) * 180 / Math.PI - 180;

          // Create line div and apply the calculated width and angle
          var line = _this2.ui.createElement('div', null, 'essence-line');
          line.style.width = lineLength + 'px';
          line.style.transform = "rotate(".concat(angle, "deg)");

          // Append the line to the upgrade cell
          essenceCell.appendChild(line);
        }
        var essenceData = _this2.ui.createElement('div', "essence-data-".concat(upgradeID));
        essenceCell.appendChild(essenceData);
        _this2.ui.populateTooltip(upgrade, essenceCell);
        essenceGrid.appendChild(essenceCell);
      });
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this3 = this;
      var essenceStats = document.querySelector('.essence-stats');
      var essenceGrid = this.targetCol1.querySelector("#essence-grid");

      //update overall essence stats/multiplier
      var essenceGain = this.gameContent.essenceGainOnNextRebirth1;
      var rebirthMultGain = essenceGain;
      var essencePseudoObject = this.ui.gameManager.findObjectById(60000);

      //update essence stats

      var newEssenceStatsText = "\n\t\tTotal Essence Earned: ".concat(this.ui.formatNumber(this.gameContent.lifetimeEssenceEarned), "\n\t\tEssenceMultiplier: ").concat(this.ui.formatNumber(essencePseudoObject.level), "\n\t\tCurrent Essence: ").concat(this.ui.formatNumber(this.gameContent.essence), "\n\t\tEssence Gain on next Rebirth: ").concat(this.ui.formatNumber(essenceGain), "\n\t\tMultiplier after rebirth: ").concat(this.ui.formatNumber(rebirthMultGain.plus(essencePseudoObject.level)));
      this.ui.updateElementTextContent(essenceStats, newEssenceStatsText);
      this.essenceUpgrades.forEach(function (upgrade) {
        var upgradeID = "eUpgrade-".concat(upgrade.id);
        var essenceCell = _this3.targetCol1.querySelector("#".concat(upgradeID));
        //update essence cells/button statii
        var essenceData = essenceCell.querySelector("#essence-data-".concat(upgradeID));
        _this3.ui.updateTooltip(upgrade);
        var newEssenceDataText = "".concat(upgrade.name, "\nlvl ").concat(upgrade.level, "/").concat(upgrade.maxLevel, "\nCost: ").concat(_this3.ui.formatNumber(upgrade.costNextMultPurchase));
        _this3.ui.updateElementTextContent(essenceData, newEssenceDataText);
        if (upgrade.active && upgrade.level.neq(upgrade.maxLevel) && _this3.ui.isAffordable(upgrade) && upgrade.nextLevelIncrement.gt(0)) {
          essenceCell.disabled = false;
          essenceCell.classList.add('enabled');
          essenceCell.classList.remove('disabled');
        } else if (upgrade.level.eq(upgrade.maxLevel)) {
          essenceCell.disabled = true;
          essenceCell.classList.add('complete');
          essenceCell.classList.remove('enabled');
          // essenceCell.style.border = '2px solid cyan';
        } else {
          essenceCell.disabled = true;
          essenceCell.classList.add('disabled');
          essenceCell.classList.remove('enabled');
        }
      });
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/RadianceTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RadianceTab = exports.default = /*#__PURE__*/function () {
  function RadianceTab(eventManager, ui, gameContent, tabManager) {
    _classCallCheck(this, RadianceTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.radianceUpgrades = this.gameContent.radianceUpgrades;
    this.targetCol = document.getElementById("radiance-col1");
    this.crystalContainerWrapper = null;
    this.baseCrystalContainer = null;
    this.upgradeCrystalContainer = null;
    this.baseCrystal = null;
    this.upgradeCrystal = null;
    this.baseCrystalFacets = [];
    this.upgradeCrystalFacets = [];
    this.baseSpeedIndicator = null;
    this.upgradeSpeedIndicator = null;
  }
  return _createClass(RadianceTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this = this;
      this.targetCol.classList.add('radiance-color');
      this.radianceUpgrades.forEach(function (upgrade) {
        var upgradeId = "upgrade-".concat(upgrade.id);
        var upgradeCell = _this.ui.populateFeatureCell(upgrade, _this.targetCol, upgradeId);
        _this.ui.populateMouseOverZIndexEvents(upgradeCell);
        _this.targetCol.appendChild(upgradeCell);
      });

      // Create the crystal container wrapper
      this.crystalContainerWrapper = document.createElement('div');
      this.crystalContainerWrapper.classList.add('crystal-container-wrapper');
      this.targetCol.appendChild(this.crystalContainerWrapper);

      // Create the base crystal container
      this.baseCrystalContainer = document.createElement('div');
      this.baseCrystalContainer.classList.add('crystal-container', 'base-crystal-container');
      this.crystalContainerWrapper.appendChild(this.baseCrystalContainer);

      // Create the base crystal
      this.baseCrystal = document.createElement('div');
      this.baseCrystal.classList.add('crystal', 'base-crystal');
      this.baseCrystalContainer.appendChild(this.baseCrystal);

      // Create the base crystal facets
      for (var i = 0; i < 6; i++) {
        var facet = document.createElement('div');
        facet.classList.add('facet');
        this.baseCrystalFacets.push(facet);
        this.baseCrystal.appendChild(facet);
      }

      // Create the base speed indicator
      this.baseSpeedIndicator = document.createElement('div');
      this.baseSpeedIndicator.classList.add('speed-indicator');
      this.baseSpeedIndicator.textContent = 'Base Speed: 100%';
      this.baseCrystalContainer.appendChild(this.baseSpeedIndicator);

      // Create the upgrade crystal container
      this.upgradeCrystalContainer = document.createElement('div');
      this.upgradeCrystalContainer.classList.add('crystal-container', 'upgrade-crystal-container');
      this.crystalContainerWrapper.appendChild(this.upgradeCrystalContainer);

      // Create the upgrade crystal
      this.upgradeCrystal = document.createElement('div');
      this.upgradeCrystal.classList.add('crystal', 'upgrade-crystal');
      this.upgradeCrystalContainer.appendChild(this.upgradeCrystal);

      // Create the upgrade crystal facets
      for (var _i = 0; _i < 6; _i++) {
        var _facet = document.createElement('div');
        _facet.classList.add('facet');
        this.upgradeCrystalFacets.push(_facet);
        this.upgradeCrystal.appendChild(_facet);
      }

      // Create the upgrade speed indicator
      this.upgradeSpeedIndicator = document.createElement('div');
      this.upgradeSpeedIndicator.classList.add('speed-indicator');
      this.upgradeCrystalContainer.appendChild(this.upgradeSpeedIndicator);
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this2 = this;
      this.radianceUpgrades.forEach(function (upgrade) {
        var upgradeId = "upgrade-".concat(upgrade.id);
        var upgradeCell = _this2.targetCol.querySelector("#".concat(upgradeId));
        _this2.ui.updateFeatureCell(upgrade, upgradeCell);
      });

      // Update the crystal color and rotation speed based on the upgrade level
      var speedUpgrade = this.radianceUpgrades.find(function (upgrade) {
        return upgrade.id === 120001;
      });
      if (speedUpgrade) {
        var colorIndex = speedUpgrade.level % 10;
        var colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#800000', '#008000', '#000080', '#808000'];
        var selectedColor = colors[colorIndex];
        this.upgradeCrystalFacets.forEach(function (facet) {
          facet.style.backgroundColor = selectedColor;
          facet.style.borderColor = selectedColor;
        });
        var rotateSpeed = 5 / (1 + 0.1 * speedUpgrade.level);
        this.upgradeCrystal.style.animation = "rotate ".concat(rotateSpeed, "s infinite linear");

        // Update the upgrade speed indicator text
        var speedIncrease = speedUpgrade.level * 10;
        this.upgradeSpeedIndicator.textContent = "Upgraded Speed: ".concat(speedIncrease + 100, "%");
      } else {
        // Default color and rotation speed when the upgrade is not available
        this.upgradeCrystalFacets.forEach(function (facet) {
          facet.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
          facet.style.borderColor = 'rgba(255, 255, 255, 0.8)';
        });
        this.upgradeCrystal.style.animation = 'rotate 5s infinite linear';
        this.upgradeSpeedIndicator.textContent = 'Upgraded Speed: +0%';
      }
    }
  }]);
}();
},{}],"components/UI/DisplayComponents/AchievementsTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AchievementsTab = exports.default = /*#__PURE__*/function () {
  function AchievementsTab(eventManager, ui, gameContent, tabManager) {
    _classCallCheck(this, AchievementsTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.achievements = this.gameContent.achievements;
    this.achievementSets = this.gameContent.achievementsGrid.achievementSets;
    this.targetCol = this.ui.achievementsCol1;
  }
  return _createClass(AchievementsTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var _this = this;
      // let achievementsChecker = this.ui.createElement('div','achieve-checker');
      var _iterator = _createForOfIteratorHelper(this.achievementSets),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var achievementSet = _step.value;
          achievementSet.achievements.forEach(function (achievement) {
            var achievementID = "achievement-".concat(achievement.id);
            var achievementCell = _this.ui.createElement('button', achievementID, 'achievement-cell');
            achievementCell.style.color = "".concat(achievement.set.color);
            achievementCell.style.border = "2px solid ".concat(achievement.set.color);
            var achievementContent = _this.ui.createElement('div', null, null);

            // Set the background image for the achievementCell, otherwise put the title
            if (achievement.image) {
              achievementCell.style.backgroundImage = "url(".concat(achievement.image, ")");
              achievementCell.style.backgroundSize = 'cover'; // To make sure the image covers the entire div
            } else {
              _this.ui.updateElementTextContent(achievementContent, "".concat(achievement.name));
            }
            achievementCell.appendChild(achievementContent);

            // Named function for the click event
            var achievementClickHandler = function achievementClickHandler() {
              _this.claimAchievement(achievement);

              // Check if the achievement was successfully claimed and then animate
              if (achievement.isClaimed) {
                achievementCell.classList.add('swirling');

                // Named function for the animationend event
                var animationEndHandler = function animationEndHandler() {
                  achievementCell.style.backgroundColor = "".concat(achievement.set.color);
                  achievementCell.style.color = "white";
                  achievementCell.classList.remove('swirling');

                  // Remove the event listener after it fires
                  achievementCell.removeEventListener('animationend', animationEndHandler);
                };

                // Add the animationend listener directly since it's a one-time event
                achievementCell.addEventListener('animationend', animationEndHandler);
              }
            };

            // Use EventManager to add the click event listener
            _this.eventManager.addDomListener(achievementCell, 'click', achievementClickHandler);
            _this.ui.populateTooltip(achievement, achievementCell);
            _this.ui.populateMouseOverZIndexEvents(achievementCell);
            _this.targetCol.appendChild(achievementCell);
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var _this2 = this;
      var _iterator2 = _createForOfIteratorHelper(this.achievementSets),
        _step2;
      try {
        var _loop = function _loop() {
          var achievementSet = _step2.value;
          achievementSet.achievements.forEach(function (achievement) {
            var achievementID = "achievement-".concat(achievement.id);
            var achievementCell = _this2.targetCol.querySelector("#".concat(achievementID));
            _this2.ui.updateTooltip(achievement);

            // Update button appearance based on achievement.isClaimable and achievementSet.visible
            if (achievement.isClaimed) {
              achievementCell.disabled = true;
              achievementCell.classList.add('complete');
              achievementCell.classList.remove('enabled');
              achievementCell.classList.remove('disabled');
              achievementCell.style.fontWeight = 'bold';
              achievementCell.style.border = "4px solid ".concat(achievement.set.color);
              achievementCell.style.backgroundColor = "".concat(achievement.set.color);
              achievementCell.style.color = "white";
              achievementCell.style.opacity = achievementSet.visible ? 1 : 0;
            } else if (achievement.isClaimable) {
              achievementCell.disabled = false;
              achievementCell.classList.add('enabled');
              achievementCell.classList.remove('disabled');
              achievementCell.style.fontWeight = 'bold';
              achievementCell.style.color = "".concat(achievement.set.color);
              achievementCell.style.border = '4px solid';
              achievementCell.style.opacity = achievementSet.visible ? 1 : 0;
            } else {
              achievementCell.disabled = true;
              achievementCell.classList.add('disabled');
              achievementCell.classList.remove('enabled');
              achievementCell.style.opacity = achievementSet.visible ? 0.5 : 0;
            }
            achievementCell.style.pointerEvents = achievementSet.visible ? 'auto' : 'none';
          });
        };
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "claimAchievement",
    value: function claimAchievement(achievement) {
      achievement.claim();
    }
  }]);
}();
},{}],"components/Utilities/config.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GAME_VERSION = exports.COMPATIBLE_VERSIONS = void 0;
var GAME_VERSION = exports.GAME_VERSION = "0.5.4b";
var COMPATIBLE_VERSIONS = exports.COMPATIBLE_VERSIONS = [""];
},{}],"components/Core/Admin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Admin = exports.default = /*#__PURE__*/function () {
  function Admin(eventManager, gameManager, gameUI) {
    _classCallCheck(this, Admin);
    this.eventManager = eventManager;
    this.gameManager = gameManager;
    this.gameContent = gameManager.gameContent;
    this.ui = gameUI;
  }
  return _createClass(Admin, [{
    key: "progressState",
    value: function progressState(option) {
      var forceTrainings = this.gameManager.gameContent.trainings.filter(function (training) {
        return training.realmID === 10;
      });
      var wisdomGenerators = this.gameManager.gameContent.generators.filter(function (generator) {
        return generator.parentGenChain.realmID === 20;
      });
      var energyTrainings = this.gameManager.gameContent.trainings.filter(function (training) {
        return training.realmID === 30;
      });
      var divineGenerators = this.gameManager.gameContent.generators.filter(function (generator) {
        return generator.parentGenChain.realmID === 40;
      });
      var forceUpgrades = this.gameManager.gameContent.realmUpgrades.filter(function (upgrades) {
        return upgrades.realmID === 10;
      });
      var wisdomUpgrades = this.gameManager.gameContent.realmUpgrades.filter(function (upgrades) {
        return upgrades.realmID === 20;
      });
      var energyUpgrades = this.gameManager.gameContent.realmUpgrades.filter(function (upgrades) {
        return upgrades.realmID === 30;
      });
      var divineUpgrades = this.gameManager.gameContent.realmUpgrades.filter(function (upgrades) {
        return upgrades.realmID === 40;
      });
      var forgeUpgrades = this.gameManager.gameContent.forgeUpgrades;
      var radianceUpgrades = this.gameManager.gameContent.radianceUpgrades;
      var essenceUpgrades = this.gameManager.gameContent.essenceUpgrades;
      var tournament = this.gameManager.gameContent.tournament;
      var fighters = this.gameManager.gameContent.fighters;
      var fighterTiers = this.gameManager.gameContent.fighterTiers;
      var worldManager = this.gameManager.gameContent.worldManager;
      var zones = this.gameManager.gameContent.zones;
      var mods = this.gameManager.gameContent.mods;
      var achievements = this.gameManager.gameContent.achievements;
      var unlocks = this.gameManager.gameContent.unlocks;
      var skills = this.gameManager.gameContent.skills;
      var filtered;
      switch (option) {
        case 0:
          var amounToMultiply = 1000;
          this.gameContent.force = this.gameContent.force.times(amounToMultiply);
          this.gameContent.wisdom = this.gameContent.wisdom.times(amounToMultiply);
          this.gameContent.energy = this.gameContent.energy.times(amounToMultiply);
          this.gameContent.divine = this.gameContent.divine.times(amounToMultiply);
          this.gameContent.crystal = this.gameContent.crystal.times(amounToMultiply);
          this.gameContent.radiance = this.gameContent.radiance.times(amounToMultiply);
          this.gameContent.essence = this.gameContent.essence.times(amounToMultiply);
          this.gameContent.powerLevel = this.gameContent.powerLevel.times(amounToMultiply);
          break;
        case 1:
          this.addResource('force', 1e20);
          var _iterator = _createForOfIteratorHelper(forceTrainings),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var training = _step.value;
              this.gameManager.handlePurchase(training.id, 40);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          var _iterator2 = _createForOfIteratorHelper(forceUpgrades),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var upgrade = _step2.value;
              this.gameManager.handlePurchase(upgrade.id, 40);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          break;
        case 2:
          this.addResource('force', 1e20);
          this.addResource('wisdom', 1e20);
          var _iterator3 = _createForOfIteratorHelper(forceTrainings),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _training = _step3.value;
              this.gameManager.handlePurchase(_training.id, 40);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
          var _iterator4 = _createForOfIteratorHelper(wisdomGenerators),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var generator = _step4.value;
              this.gameManager.handlePurchase(generator.id, 40);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          var _iterator5 = _createForOfIteratorHelper(forceUpgrades.concat(wisdomUpgrades)),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var _upgrade = _step5.value;
              this.gameManager.handlePurchase(_upgrade.id, 10);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
          break;
        case 3:
          filtered = zones.filter(function (zone) {
            return zone.id <= 9009;
          });
          var _iterator6 = _createForOfIteratorHelper(filtered),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var zone = _step6.value;
              zone.handleConquestComplete();
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
          break;
        case 4:
          var tempFiltered = [];
          var _iterator7 = _createForOfIteratorHelper(zones),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var _zone = _step7.value;
              if (_zone.region) {
                if (_zone.region.world.id) {
                  tempFiltered.push(_zone);
                }
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
          filtered = tempFiltered.filter(function (zone) {
            return zone.region.world.id && zone.region.world.id === 1000001 && zone.zoneType !== 'legendaryBoss';
          });
          var _iterator8 = _createForOfIteratorHelper(filtered),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var _zone2 = _step8.value;
              _zone2.handleConquestComplete();
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
          break;
        case 5:
          filtered = fighters.filter(function (fighter) {
            return fighter.tier === 1;
          });
          var _iterator9 = _createForOfIteratorHelper(filtered),
            _step9;
          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var fighter = _step9.value;
              tournament.processFighterDefeat(fighter.id);
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
          break;
        case 6:
          var targetIDs1 = [10001, 10002, 10003, 10004, 10101, 10102, 10103, 10104];
          filtered = forgeUpgrades.filter(function (upgrade) {
            return targetIDs1.includes(upgrade.id);
          });
          var _iterator10 = _createForOfIteratorHelper(filtered),
            _step10;
          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var _upgrade2 = _step10.value;
              this.gameManager.handlePurchase(_upgrade2.id);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }
          break;
        case 7:
          var targetIDs2 = [10401, 10402, 10403, 10404, 10406, 10407];
          filtered = forgeUpgrades.filter(function (upgrade) {
            return targetIDs2.includes(upgrade.id);
          });
          var _iterator11 = _createForOfIteratorHelper(filtered),
            _step11;
          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var _upgrade3 = _step11.value;
              this.gameManager.handlePurchase(_upgrade3.id);
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
          break;
        case 8:
          var tempFiltered2 = [];
          var _iterator12 = _createForOfIteratorHelper(zones),
            _step12;
          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var _zone3 = _step12.value;
              tempFiltered2.push(_zone3);
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }
          filtered = tempFiltered2.filter(function (zone) {
            return zone.region.world.id && zone.region.world.id === worldManager.currentWorld.id;
          });
          var _iterator13 = _createForOfIteratorHelper(filtered),
            _step13;
          try {
            for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
              var _zone4 = _step13.value;
              _zone4.stopConquest();
              _zone4.handleConquestComplete();
              _zone4.progress = 0;
            }
          } catch (err) {
            _iterator13.e(err);
          } finally {
            _iterator13.f();
          }
          break;
        case 9:
          filtered = fighters.filter(function (fighter) {
            return fighter.tier === tournament.currentFighterTier.tier;
          });
          var _iterator14 = _createForOfIteratorHelper(filtered),
            _step14;
          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var _fighter = _step14.value;
              tournament.processFighterDefeat(_fighter.id);
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
          break;
        case 10:
          this.addResource('essence', 1e4);
          break;
      }
    }
  }, {
    key: "completeAllUnlocks",
    value: function completeAllUnlocks() {
      this.gameManager.unlockManager.completeAllUnlocks();
    }
  }, {
    key: "resetGame",
    value: function resetGame() {
      this.eventManager.dispatchEvent('restart', -1);
    }
  }, {
    key: "addResource",
    value: function addResource(resource, value) {
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: resource,
        value: (0, _decimal.DEC)(value),
        operation: 'add'
      });
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/UI/DisplayComponents/SettingsTab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _config = require("../../Utilities/config.js");
var _Admin = _interopRequireDefault(require("../../Core/Admin.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var SettingsTab = exports.default = /*#__PURE__*/function () {
  function SettingsTab(eventManager, ui, gameContent, tabManager) {
    _classCallCheck(this, SettingsTab);
    this.eventManager = eventManager;
    this.ui = ui;
    this.gameContent = gameContent;
    this.tabManager = tabManager;
    this.admin = new _Admin.default(eventManager, this.ui.gameManager, this);
  }
  return _createClass(SettingsTab, [{
    key: "populateDisplay",
    value: function populateDisplay() {
      var settingsTabContent = document.getElementById('settings');
      var settingsTabContainer = document.getElementById('settings-tab-container');
      var settingsStateButtons = document.getElementById('settings-state-buttons');
      // let rewardContainer = document.getElementById('reward-container');

      // Populate initial elements
      var col1 = document.getElementById('settings-col1');
      var col2 = document.getElementById('settings-col2');
      settingsStateButtons = this.populateSettingsStateButtons();
      var settingsHotkeyList = this.populateSettingsHotkeyToggle();
      var settingsGameContentStats = this.ui.createElement('div', "settings-stats");

      // rewardContainer = this.populateAndUpdateRewardsContainer();

      var gameVersionText = this.ui.createElement('div', null, null, "version ".concat(_config.GAME_VERSION, " (beta)"));

      //SETTINGS
      var tooltipSettingsToggle = this.populateSettingsTooltipToggle();
      var notificationSettingsToggle = this.populateSettingsNotificationsToggle();
      var hotkeySettingsToggle = this.populateSettingsHotkeysToggle();
      var numberNotationSettings = this.populateSettingsNumberNotation();

      // Append all elements to the DOM

      // col1.appendChild(rewardContainer);

      col1.appendChild(settingsStateButtons);
      col1.appendChild(settingsHotkeyList);
      col1.appendChild(numberNotationSettings);
      col1.appendChild(tooltipSettingsToggle);
      col1.appendChild(notificationSettingsToggle);
      col1.appendChild(hotkeySettingsToggle);

      // Append Admin Settings Buttons
      var adminContainer = this.populateAdminSettings();
      col1.appendChild(adminContainer);
      col2.appendChild(settingsGameContentStats);
      settingsTabContainer.appendChild(col1);
      settingsTabContainer.appendChild(col2);
      settingsTabContent.appendChild(gameVersionText);

      // Update Elements
      // rewardContainer = this.populateAndUpdateRewardsContainer();
    }
  }, {
    key: "updateDisplay",
    value: function updateDisplay() {
      var options = {
        timeZone: 'America/Chicago',
        timeZoneName: 'short'
      };
      var formattedDate = new Date(this.ui.stateManager.lastSaveTime).toLocaleString('en-US', options);
      var outputString = "".concat(formattedDate);
      var settingsGameContentStats = document.getElementById('settings-stats');
      settingsGameContentStats.innerHTML = "\n\t\t<b>Lifetime Stats:</b>\n\t\t\r\nMax PowerLevel Achieved: ".concat(this.ui.formatNumber(this.gameContent.maxPowerLevelAchieved), "\n\t\t\r\nLifetime Force Earned: ").concat(this.ui.formatNumber(this.gameContent.lifetimeForceEarned), "\n\t\t\rLifetime Wisdom Earned: ").concat(this.ui.formatNumber(this.gameContent.lifetimeWisdomEarned), "\n\t\t\nLifetime Energy Earned: ").concat(this.ui.formatNumber(this.gameContent.lifetimeEnergyEarned), "\n\t\t\nLifetime Divine Earned: ").concat(this.ui.formatNumber(this.gameContent.lifetimeDivineEarned), "\n\t\t\nLifetime Essence Earned: ").concat(this.ui.formatNumber(this.gameContent.lifetimeEssenceEarned), "\n\t\t\nLifetime Crystal Earned: ").concat(this.ui.formatNumber(this.gameContent.lifetimeCrystalEarned), "\n\t\t\nMax World Achieved: ").concat(this.ui.formatNumber(this.gameContent.maxProgressionWorld), "\n\t\t\nMax Region Achieved: ").concat(this.ui.formatNumber(this.gameContent.maxProgressionRegion), "\n\t\t\nLifetime Zone Completions: ").concat(this.ui.formatNumber(this.gameContent.lifetimeZoneCompletions), "\n\t\t\nLifetime Region Progressions: ").concat(this.ui.formatNumber(this.gameContent.lifetimeRegionProgressions), "\n\t\t\nLifetime World Progressions: ").concat(this.ui.formatNumber(this.gameContent.lifetimeWorldProgressions), "\n\t\t\nMax Tournament Rank Achieved:").concat(this.ui.formatNumber(this.gameContent.maxTournamentRank), "\n\t\t\nLifetime Kills: ").concat(this.ui.formatNumber(this.gameContent.lifetimeKills), "\n\t\t\nLifetime FighterTiers Defeated: ").concat(this.ui.formatNumber(this.gameContent.lifetimeFighterTiersDefeated), "\n\t\t\nTotal Rebirth 1's: ").concat(this.ui.formatNumber(this.gameContent.rebirth1Count), "\n\t\t\nTotal Playtime: ").concat(this.ui.formatTime(this.gameContent.totalPlaytime.mag), "\n\t\t\nStarted Playing: ").concat(this.gameContent.originalStartDateTime.toLocaleString(), "\n\t\t\n\t\t\nLast Save: ").concat(outputString);
    }
  }, {
    key: "populateSettingsStateButtons",
    value: function populateSettingsStateButtons() {
      var _this = this;
      var settingsStateButtons = this.ui.createElement('div', 'settings-state-buttons');
      var saveButton = this.ui.createElement('button', 'save', 'state-button', 'Save');
      var loadButton = this.ui.createElement('button', 'load', 'state-button', 'Load');
      var exportButton = this.ui.createElement('button', 'export', 'state-button', 'Export');
      var importButton = this.ui.createElement('button', 'import', 'state-button', 'Import');
      // Create the textarea element
      var importArea = document.createElement("textarea");
      // Set the attributes for the textarea
      importArea.id = "importInput";
      importArea.rows = "5";
      importArea.cols = "30";
      importArea.placeholder = "Paste Import String. No validation yet";
      this.saveButtonHandler = function () {
        _this.ui.stateManager.saveState(0);
        // saveButton.innerHTML = "Game Saved!";
        // saveButton.classList.add('fade');
        // setTimeout(function () {
        // 	saveButton.classList.remove('fade');
        // 	saveButton.innerHTML = "Save";
        // }, 1000);
      };
      this.loadButtonHandler = function () {
        _this.eventManager.dispatchEvent('restart', 0);
        // loadButton.innerHTML = "Game Loaded!";
        // loadButton.classList.add('fade');
        // setTimeout(function () {
        // 	loadButton.classList.remove('fade');
        // 	loadButton.innerHTML = "Load";
        // }, 1000);
      };

      // Assuming this.eventManager is accessible

      // For saveButton
      this.eventManager.addDomListener(saveButton, 'click', this.saveButtonHandler.bind(this));

      // For loadButton
      this.eventManager.addDomListener(loadButton, 'click', this.loadButtonHandler.bind(this));
      var exportButtonHandler = function exportButtonHandler() {
        _this.ui.stateManager.exportGameState();
      };
      var importButtonHandler = function importButtonHandler() {
        var importedData = document.getElementById('importInput').value;
        _this.ui.stateManager.importGameState(importedData);
      };

      // Use EventManager to add event listeners
      this.eventManager.addDomListener(exportButton, 'click', exportButtonHandler);
      this.eventManager.addDomListener(importButton, 'click', importButtonHandler);
      settingsStateButtons.appendChild(saveButton);
      settingsStateButtons.appendChild(loadButton);
      settingsStateButtons.appendChild(exportButton);
      settingsStateButtons.appendChild(importButton);
      settingsStateButtons.appendChild(importArea);
      return settingsStateButtons;
    }
  }, {
    key: "populateSettingsNumberNotation",
    value: function populateSettingsNumberNotation() {
      var numberSettingsContainer = this.ui.createElement('div', 'number-settings-container');
      var numberSettingsTitle = this.ui.createElement("div", 'number-settings-title');
      numberSettingsTitle.textContent = 'Notation:';
      var numberSettings = this.ui.createElement("select", "numberSettings");
      var options = ["scientific", "engineering", "log10", "string", "verbose", "cute"];
      options.forEach(function (option) {
        var opt = document.createElement('option');
        opt.value = option;
        opt.innerText = option;
        numberSettings.appendChild(opt);
      });
      this.numberSettings = numberSettings;

      // Creating a bound function for the change event
      var numberSettingsChangeHandler = this.updateNumberNotation.bind(this);

      // Use EventManager to add the event listener
      this.eventManager.addDomListener(numberSettings, 'change', numberSettingsChangeHandler);

      // Optionally store the listener for future removal
      numberSettings.changeListener = numberSettingsChangeHandler;
      numberSettingsContainer.appendChild(numberSettingsTitle);
      numberSettingsContainer.appendChild(numberSettings);
      return numberSettingsContainer;
    }
  }, {
    key: "updateNumberNotation",
    value: function updateNumberNotation(event) {
      var value = event.target.value;
      this.eventManager.dispatchEvent('updateNumberNotation', {
        value: value
      });
    }
  }, {
    key: "populateSettingsHotkeyToggle",
    value: function populateSettingsHotkeyToggle() {
      var settingsHotkeyToggle = this.ui.createElement('div', "settings-hotkeys");
      settingsHotkeyToggle.innerHTML = this.ui.hotkeyManager.populateHotkeyListDisplay();
      return settingsHotkeyToggle;
    }
  }, {
    key: "populateSettingsHotkeysToggle",
    value: function populateSettingsHotkeysToggle() {
      var _this2 = this;
      var hotkeysContainer = this.ui.createElement('div', 'hotkeys-settings-container');
      var hotkeysTitle = this.ui.createElement('div', null, null, "Toggle Hotkeys");
      var hotkeysCheckBox = document.createElement('div');
      var checkbox = this.ui.createElement('input', "checkbox-hotkeys");
      checkbox.type = 'checkbox';
      checkbox.style.display = 'none';
      checkbox.checked = true;
      var hotkeysCheckboxHandler = function hotkeysCheckboxHandler() {
        if (checkbox.checked) {
          _this2.eventManager.dispatchEvent('hotkeyEnabled');
        } else {
          _this2.eventManager.dispatchEvent('hotkeyDisabled');
        }
      };

      // Use EventManager to add the event listener
      this.eventManager.addDomListener(checkbox, 'change', hotkeysCheckboxHandler);

      // Optionally store the listener for future removal
      checkbox.changeListener = hotkeysCheckboxHandler;
      var label = this.ui.createElement('label', "label-hotkeys");
      label.htmlFor = checkbox.id;
      hotkeysCheckBox.appendChild(checkbox);
      hotkeysCheckBox.appendChild(label);
      hotkeysContainer.appendChild(hotkeysTitle);
      hotkeysContainer.appendChild(hotkeysCheckBox);
      return hotkeysContainer;
    }
  }, {
    key: "populateSettingsTooltipToggle",
    value: function populateSettingsTooltipToggle() {
      var tooltipContainer = this.ui.createElement('div', 'tooltips-settings-container');
      var tooltipTitle = this.ui.createElement('div', null, null, "Toggle Tooltips");
      var tooltipCheckBox = document.createElement('div');
      var checkbox = this.ui.createElement('input', "checkbox-tooltips");
      checkbox.type = 'checkbox';
      checkbox.style.display = 'none';
      checkbox.checked = true;

      // Named function for the change event
      var tooltipCheckboxHandler = function tooltipCheckboxHandler() {
        if (checkbox.checked) {
          document.querySelector('#root').classList.remove('tooltips-off');
        } else {
          document.querySelector('#root').classList.add('tooltips-off');
        }
      };

      // Use EventManager to add the event listener
      this.eventManager.addDomListener(checkbox, 'change', tooltipCheckboxHandler);

      // Optionally store the listener for future removal
      checkbox.changeListener = tooltipCheckboxHandler;
      var label = this.ui.createElement('label', "label-tooltips");
      label.htmlFor = checkbox.id;
      tooltipCheckBox.appendChild(checkbox);
      tooltipCheckBox.appendChild(label);
      tooltipContainer.appendChild(tooltipTitle);
      tooltipContainer.appendChild(tooltipCheckBox);
      return tooltipContainer;
    }
  }, {
    key: "populateSettingsNotificationsToggle",
    value: function populateSettingsNotificationsToggle() {
      var _this3 = this;
      var tooltipContainer = this.ui.createElement('div', 'notifications-settings-container');
      var tooltipTitle = this.ui.createElement('div', null, null, "Toggle Notifications");
      var tooltipCheckBox = document.createElement('div');
      var checkbox = this.ui.createElement('input', "checkbox-notifications");
      checkbox.type = 'checkbox';
      checkbox.style.display = 'none';
      checkbox.checked = true;
      var notificationsCheckboxHandler = function notificationsCheckboxHandler() {
        if (checkbox.checked) {
          _this3.ui.gameManager.notificationsToggled = true;
        } else {
          _this3.ui.gameManager.notificationsToggled = false;
        }
      };

      // Use EventManager to add the event listener
      this.eventManager.addDomListener(checkbox, 'change', notificationsCheckboxHandler);

      // Optionally store the listener for future removal
      checkbox.changeListener = notificationsCheckboxHandler;
      var label = this.ui.createElement('label', "label-notifications");
      label.htmlFor = checkbox.id;
      tooltipCheckBox.appendChild(checkbox);
      tooltipCheckBox.appendChild(label);
      tooltipContainer.appendChild(tooltipTitle);
      tooltipContainer.appendChild(tooltipCheckBox);
      return tooltipContainer;
    }
  }, {
    key: "populateAdminSettings",
    value: function populateAdminSettings() {
      var adminContainer = this.ui.createElement('div', 'admin-container', 'admin-container');
      var adminTitle = this.ui.createElement('div', "admin-title", null, "Admin Settings");
      adminContainer.appendChild(adminTitle);

      // Create a loop to handle similar buttons
      for (var i = 0; i <= 10; i++) {
        var adminButton = this.ui.createElement('button', "adminButton".concat(i), 'admin-button', this.getAdminButtonLabel(i));
        var adminButtonHandler = this.admin.progressState.bind(this.admin, i);
        this.eventManager.addDomListener(adminButton, 'click', adminButtonHandler);
        adminContainer.appendChild(adminButton);
      }

      // Create Uber Buttons
      var adminButton30 = this.ui.createElement('button', 'adminButton30', ['admin-uber-button', 'admin-button'], 'Complete All Unlocks');
      var adminButton30Handler = this.admin.completeAllUnlocks.bind(this.admin);
      this.eventManager.addDomListener(adminButton30, 'click', adminButton30Handler);
      adminContainer.appendChild(adminButton30);
      var adminButton31 = this.ui.createElement('button', 'adminButton31', ['admin-uber-button', 'admin-button'], 'Full Reset');
      var adminButton31Handler = this.admin.resetGame.bind(this.admin);
      this.eventManager.addDomListener(adminButton31, 'click', adminButton31Handler);
      adminContainer.appendChild(adminButton31);
      return adminContainer;
    }

    // Helper function to get labels based on the button index
  }, {
    key: "getAdminButtonLabel",
    value: function getAdminButtonLabel(index) {
      var labels = ['Currencies * 1000', 'Force Train/Up x40', 'Force/Wisdom Train/Up x100', 'Region 1 Complete', 'World 1 Complete', 'Fighter Tier 1 Complete', 'Initial Forge Upgrades', 'Initial Forge Automations', 'Complete Next World', 'Complete Next Fighter Tier', 'Give 10k essence'];
      return labels[index] || 'Button';
    }
  }, {
    key: "populateAndUpdateRewardsContainer",
    value: function populateAndUpdateRewardsContainer() {
      // Add a new container for the rewards
      var rewardContainer = document.getElementById('reward-cantainer');
      if (!rewardContainer) {

        // rewardContainer = this.ui.createElement('div', 'reward-container');

        // Create elements for daily reward
        // let dailyRewardContainer = this.ui.createElement('div', 'dailyRewardContainer');
        // let dailyRewardTitle = this.ui.createElement('div', null, null, 'Daily Reward');
        // let dailyRewardTimer = this.ui.createElement('div', 'dailyRewardTimer');
        // let dailyRewardButton = this.ui.createElement('button', 'dailyRewardButton', null, 'Claim Daily Reward');
        // dailyRewardButton.onclick = () => this.rewardManager.giveDailyReward();

        // // Create elements for hourly reward
        // let hourlyRewardContainer = this.ui.createElement('div', 'hourlyRewardContainer');
        // let hourlyRewardTitle = this.ui.createElement('div', 'hourlyRewardTitle', null, 'Hourly Reward');
        // let hourlyRewardTimer = this.ui.createElement('div', 'hourlyRewardTimer');
        // let hourlyRewardButton = this.ui.createElement('button', 'hourlyRewardButton', null, 'Claim Hourly Reward');
        // hourlyRewardButton.onclick = () => this.rewardManager.giveHourlyReward();

        // dailyRewardContainer.appendChild(dailyRewardTitle);
        // dailyRewardContainer.appendChild(dailyRewardTimer);
        // dailyRewardContainer.appendChild(dailyRewardButton);
        // hourlyRewardContainer.appendChild(hourlyRewardTitle);
        // hourlyRewardContainer.appendChild(hourlyRewardTimer);
        // hourlyRewardContainer.appendChild(hourlyRewardButton);
        // rewardContainer.appendChild(dailyRewardContainer);
        // rewardContainer.appendChild(hourlyRewardContainer);
      }

      // // Check and display the time until the next daily reward
      // let dailyRewardTimeLeft = this.rewardManager.checkDailyReward();
      // let dailyRewardTimer = document.getElementById('dailyRewardTimer');
      // dailyRewardTimer.innerText = this.formatTime(dailyRewardTimeLeft);
      // let dailyRewardButton = document.getElementById('dailyRewardButton');
      // //disable button if not claimable
      // dailyRewardButton.disabled = !this.rewardManager.dailyRewardClaimable;

      // // hourly reward info
      // let hourlyRewardTitle = document.getElementById(`hourlyRewardTitle`);
      // hourlyRewardTitle.innerText = `Hourly Reward (${this.rewardManager.currentHourlyRewardsClaimable}/${this.rewardManager.hourlyRewardCap})`;
      // hourlyRewardTitle.id = "hourlyRewardTitle";

      // // Check and display the time until the next hourly reward
      // let hourlyRewardTimeLeft = this.rewardManager.checkHourlyReward();
      // let hourlyRewardTimer = document.getElementById('hourlyRewardTimer');
      // hourlyRewardTimer.innerText = this.formatTime(hourlyRewardTimeLeft);
      // let hourlyRewardButton = document.getElementById('hourlyRewardButton');
      // //disable button if not claimable
      // hourlyRewardButton.disabled = !this.rewardManager.hourlyRewardClaimable;

      // // Display the current amount of hourly rewards that are claimable on the claim button
      // let currentHourlyRewards = this.rewardManager.currentHourlyRewardsClaimable;
      // if (currentHourlyRewards.gt(0)) {
      // 	hourlyRewardButton.innerText = `Claim Hourly Reward (${currentHourlyRewards.toString()})`;
      // } else {
      // 	hourlyRewardButton.innerText = 'Claim Hourly Reward';
      // }
    }
  }]);
}();
},{"../../Utilities/config.js":"components/Utilities/config.js","../../Core/Admin.js":"components/Core/Admin.js"}],"components/UI/Core/TabManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ = _interopRequireDefault(require("../../../assets/icons/*.png"));
var _Tab = _interopRequireDefault(require("./Tab.js"));
var _SkillsTab = _interopRequireDefault(require("../DisplayComponents/SkillsTab.js"));
var _ForgeTab = _interopRequireDefault(require("../DisplayComponents/ForgeTab.js"));
var _ExplorationTab = _interopRequireDefault(require("../DisplayComponents/ExplorationDisplay/ExplorationTab.js"));
var _TrainingTab = _interopRequireDefault(require("../DisplayComponents/TrainingTab.js"));
var _EssenceTab = _interopRequireDefault(require("../DisplayComponents/EssenceTab.js"));
var _RadianceTab = _interopRequireDefault(require("../DisplayComponents/RadianceTab.js"));
var _AchievementsTab = _interopRequireDefault(require("../DisplayComponents/AchievementsTab.js"));
var _SettingsTab = _interopRequireDefault(require("../DisplayComponents/SettingsTab.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var TabManager = exports.default = /*#__PURE__*/function () {
  function TabManager(eventManager, gameContent, tabData, ui) {
    _classCallCheck(this, TabManager);
    this.eventManager = eventManager;
    this.gameContent = gameContent;
    this.tabData = tabData;
    this.ui = ui;
    this.trainingTab = new _TrainingTab.default(this.eventManager, this.ui, this.gameContent, this);
    this.forgeTab = new _ForgeTab.default(this.eventManager, this.ui, this.gameContent.forgeUpgrades);
    this.skillsTab = new _SkillsTab.default(this.eventManager, this.ui, this.gameContent);
    this.explorationTab = new _ExplorationTab.default(this.eventManager, this.ui, this.gameContent, this);
    this.essenceTab = new _EssenceTab.default(this.eventManager, this.ui, this.gameContent, this);
    this.radianceTab = new _RadianceTab.default(this.eventManager, this.ui, this.gameContent, this);
    this.achievementsTab = new _AchievementsTab.default(this.eventManager, this.ui, this.gameContent, this);
    this.settingsTab = new _SettingsTab.default(this.eventManager, this.ui, this.gameContent, this);
    this.tabIDs = ['training', 'forge', 'skills', 'exploration', 'essence', 'achievements', 'radiance', 'settings'];
    this.tabDisplays = [this.trainingTab, this.explorationTab, this.skillsTab, this.forgeTab, this.essenceTab, this.radianceTab, this.achievementsTab, this.settingsTab];
    this.tabs = [];
    this.initTabData();
    this.assignButtonsToTabObjects();
    this.currentTab = 'training'; //set default tab
    this.currentSubTab = 'force';
    this.currentTabHotkeys = null;
    this.currentTabButton = document.getElementById(this.currentTab + 'Tab'); // Set default tab button
    this.eventManager.addListener('changeTab', this.changeTab.bind(this));
    this.createTabEventListeners();
  }
  return _createClass(TabManager, [{
    key: "populateTabs",
    value: function populateTabs() {
      var _iterator = _createForOfIteratorHelper(this.tabDisplays),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var tab = _step.value;
          tab.populateDisplay();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      var _iterator2 = _createForOfIteratorHelper(this.tabs),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _tab = _step2.value;
          this.populateTabInfoTooltips(_tab);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "updateCurrentTabDisplay",
    value: function updateCurrentTabDisplay() {
      //perform follow-up UI updates only when tabs are the current active tab
      switch (this.currentTab) {
        case "training":
          this.trainingTab.updateDisplay();
          break;
        case "forge":
          this.forgeTab.updateDisplay();
          break;
        case "skills":
          this.skillsTab.updateDisplay();
          break;
        case "essence":
          this.essenceTab.updateDisplay();
          break;
        case "achievements":
          this.achievementsTab.updateDisplay();
          break;
        case "exploration":
          this.explorationTab.updateDisplay();
          break;
        case "settings":
          this.settingsTab.updateDisplay();
          break;
        case "radiance":
          this.radianceTab.updateDisplay();
          break;
        default:
          console.warn("Unknown tab: ".concat(this.ui.activeTab));
      }
    }
  }, {
    key: "initTabData",
    value: function initTabData() {
      var _this = this;
      this.tabData.forEach(function (data) {
        var id = data.id,
          name = data.name,
          active = data.active,
          initialUnlockedFeatureIDs = data.initialUnlockedFeatureIDs,
          infoText = data.infoText,
          _data$subTabs = data.subTabs,
          subTabs = _data$subTabs === void 0 ? [] : _data$subTabs;
        var newTab = new _Tab.default(_this.eventManager, id, name, active, initialUnlockedFeatureIDs, infoText);
        _this.setTabInitialFeatureUnlockRefs(newTab);

        // create sub tabs if they exist
        subTabs.forEach(function (subTabData) {
          var id = subTabData.id,
            name = subTabData.name,
            active = subTabData.active,
            initialUnlockedFeatureIDs = subTabData.initialUnlockedFeatureIDs,
            infoText = subTabData.infoText;
          var newSubTab = new _Tab.default(_this.eventManager, id, name, active, initialUnlockedFeatureIDs, infoText, null, newTab);
          _this.setTabInitialFeatureUnlockRefs(newSubTab);

          // Add sub tab to parent tab's subTab list
          newTab.subTabs.push(newSubTab);
          if (newTab.subTabs.length === 1) {
            newTab.currentSubTab = newSubTab.name;
          }
          _this.propagateTabReferences(newSubTab);
        });
        _this.propagateTabReferences(newTab);
      });
    }

    // Add the tab to tabs list and id to object map
  }, {
    key: "propagateTabReferences",
    value: function propagateTabReferences(tab) {
      this.tabs.push(tab);
      // this.gameContent.tabs.push(tab);
      this.gameContent.idToObjectMap.set(tab.id, tab);
    }

    //add refernces to objects that the tab unlocks when it is initially set active
  }, {
    key: "setTabInitialFeatureUnlockRefs",
    value: function setTabInitialFeatureUnlockRefs(tab) {
      if (tab.initialUnlockedFeatureIDs) {
        var _iterator3 = _createForOfIteratorHelper(tab.initialUnlockedFeatureIDs),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var id = _step3.value;
            if (this.ui.gameManager.findObjectById(id)) {
              tab.initialUnlockedFeatureRefs.push(this.ui.gameManager.findObjectById(id));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "toggleSubTabContentDisplay",
    value: function toggleSubTabContentDisplay(parentId, idIncludes, displayStyle) {
      // Get the parent container for the tabs
      var parent = document.getElementById(parentId);

      // Toggle all content display
      var contents = Array.from(parent.children);
      contents.forEach(function (content) {
        if (content.id.includes(idIncludes)) {
          content.style.display = displayStyle;
        }
      });
    }
  }, {
    key: "toggleActiveSubTabClass",
    value: function toggleActiveSubTabClass(containerId, newActiveId) {
      // Get the parent container
      var container = document.getElementById(containerId);
      var buttons = Array.from(container.children);

      // Remove 'active-tab' class from all buttons
      buttons.forEach(function (button) {
        button.classList.remove('active-tab');
      });

      // Add 'active-tab' class to the new active element
      var newActiveElement = document.getElementById(newActiveId);
      newActiveElement.classList.add('active-tab');
    }
  }, {
    key: "returnSubTabButtons",
    value: function returnSubTabButtons() {
      var currentTabElement = document.getElementById(this.currentTab);
      var allButtons = Array.from(currentTabElement.querySelectorAll('button'));
      var filteredButtons = allButtons.filter(function (button) {
        return button.id.includes('SubTab') && getComputedStyle(button).opacity !== '0';
      });
      if (filteredButtons.length === 0) {
        this.currentSubTab = null;
      }
      return filteredButtons;
    }
  }, {
    key: "getActiveTabs",
    value: function getActiveTabs() {
      var activeTabs = [];

      // Iterate over the tab objects to check if the tab is active
      var _iterator4 = _createForOfIteratorHelper(this.tabs),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var tab = _step4.value;
          if (tab.active && !tab.parentTab) {
            activeTabs.push(tab);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return activeTabs;
    }
  }, {
    key: "updateTabButtons",
    value: function updateTabButtons() {
      var _iterator5 = _createForOfIteratorHelper(this.tabs),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var tab = _step5.value;
          // this.ui.updateVisibility(tab.button, tab.active);

          if (tab.active) {
            // tab.button.style.opacity = tab.active ? 1 : 0;
            tab.button.style.pointerEvents = tab.active ? 'auto' : 'none';
            tab.button.classList.remove('inactive-tab');
          } else {
            tab.button.classList.add('inactive-tab');
            // tab.button.style.opacity = tab.active ? 1 : 0;
            tab.button.style.pointerEvents = tab.active ? 'auto' : 'none';
          }

          // - flash newly unlocked tabs a soft blue until they are visited for the first time
          if (tab.hasBeenOpened === false && tab.active) {
            tab.button.classList.add('unvisited-tab');
          } else {
            tab.button.classList.remove('unvisited-tab');
          }

          // Update skills tab to reflect un-used skill points
          if (tab.name === "skills") {
            var name = tab.button.id;
            name = name.replace("Tab", "");
            name = name.charAt(0).toUpperCase() + name.slice(1);
            ;
            this.ui.updateElementTextContent(tab.button, "".concat(name, " (").concat(this.gameContent.skillpoints, ")"));
          }

          // Update Exploration and Odyssey tabs to reflect active conquest
          if (tab.name === "exploration" || tab.name === "odyssey") {
            // check all zones, if any are isConquesting = true, then put a small blue dot on bottom right corner of odyssey and exploration tab buttons
            var isConquesting = false;
            var _iterator6 = _createForOfIteratorHelper(this.gameContent.zones),
              _step6;
            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var zone = _step6.value;
                if (zone.isConquesting) {
                  isConquesting = true;
                  break;
                }
              }
              // put a small blue dot on bottom right corner of odyssey and exploration tab buttons
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
            if (isConquesting) {
              tab.button.classList.add('conquesting-tab');
            } else {
              tab.button.classList.remove('conquesting-tab');
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "assignButtonsToTabObjects",
    value: function assignButtonsToTabObjects() {
      var primaryTabButtons = Array.from(document.getElementsByClassName('tabButton'));
      var explorationSubTabButtons = Array.from(document.getElementsByClassName('exploration-tab-button'));
      var realmSubTabButtons = Array.from(document.getElementsByClassName('realm-button'));
      var allTabButtons = primaryTabButtons.concat(explorationSubTabButtons).concat(realmSubTabButtons);
      var _iterator7 = _createForOfIteratorHelper(allTabButtons),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var tabButton = _step7.value;
          var tabButtonIdWithoutTab = tabButton.id.replace('Tab', '').replace('realm-', '').replace('Sub', '').toLowerCase();
          var _iterator8 = _createForOfIteratorHelper(this.tabs),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var tab = _step8.value;
              if (tab.name === tabButtonIdWithoutTab) {
                tab.button = tabButton;
                break; // Breaks the inner loop if the matching button is found
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "createTabEventListeners",
    value: function createTabEventListeners() {
      var _this2 = this;
      var tabButtons = document.getElementById('tab-buttons').getElementsByTagName('button');

      // Loop through each button and add a click event listener
      var _iterator9 = _createForOfIteratorHelper(tabButtons),
        _step9;
      try {
        var _loop = function _loop() {
          var button = _step9.value;
          var buttonClickHandler = function buttonClickHandler() {
            var tabId = button.id.slice(0, -3);
            _this2.changeTab(tabId);
          };
          _this2.eventManager.addDomListener(button, 'click', buttonClickHandler);
        };
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "changeTab",
    value: function changeTab(tabName) {
      var _this3 = this;
      // Hide the current tab
      this.ui.hideElement(this.currentTab);
      var currentTabObject = this.tabs.find(function (tab) {
        return tab.name === _this3.currentTab;
      });
      if (currentTabObject) {
        this.ui.multiplierManager.toggleMultiplierContainer(currentTabObject, "none");

        // Hide the current subTab's multiplier container if exists
        if (this.currentSubTab) {
          var currentSubTabObject = this.tabs.find(function (tab) {
            return tab.name === _this3.currentSubTab;
          });
          this.ui.multiplierManager.toggleMultiplierContainer(currentSubTabObject, "none");
        }
      }

      //set new current tab
      if (tabName) {
        this.currentTab = tabName;
      }
      var newTabObject = this.tabs.find(function (tab) {
        return tab.name === tabName;
      });
      newTabObject.hasBeenOpened = true;
      if (!newTabObject.subTabs.length > 0) {
        this.currentSubTab = null;
      } else {
        this.currentSubTab = newTabObject.currentSubTab;

        // Show the current subTab's multiplier container if exists
        var newSubTabObject = this.tabs.find(function (tab) {
          return tab.name === _this3.currentSubTab;
        });
        newSubTabObject.hasBeenOpened = true;
        this.ui.multiplierManager.toggleMultiplierContainer(newSubTabObject, "block");

        //also assign the current subtab to the current tab
        newTabObject.currentSubTabObject = newSubTabObject;
      }

      // Show the new tab
      this.ui.showElement(tabName);
      this.ui.multiplierManager.toggleMultiplierContainer(newTabObject, "block");
      if (this.currentTabButton) {
        this.currentTabButton.classList.remove('active-tab');
      }
      this.currentTabButton = document.getElementById(this.currentTab + 'Tab');
      if (this.currentTabButton) {
        this.currentTabButton.classList.add('active-tab');
      }
      this.eventManager.dispatchEvent('updateHotkeyButtons');
      // this.ui.updateVisibility(newTabObject.multiplierContainer,newTabObject.active);
      this.ui.gameManager.onTabChange(newTabObject);
    }
  }, {
    key: "populateTabInfoTooltips",
    value: function populateTabInfoTooltips(tab) {
      if (!tab.infoText) {
        return;
      }

      //find tab ID's, doing this manually for subtabs for now until Tab initialization is cleaned up
      var tabElementID = tab.name;
      if (tab.parentTab) {
        if (tab.parentTab.name === "training") {
          tabElementID = 'realm-content-' + tab.name;
        } else if (tab.parentTab.name === "exploration") {
          tabElementID = 'tab-content-' + tab.name.charAt(0).toUpperCase() + tab.name.slice(1) + 'SubTab';
        }
      }
      var targetElement = document.getElementById(tabElementID);
      var tabInfoText = tab.infoText.join('\n\n');
      if (targetElement) {
        var tabInfoContainer = this.ui.createElement('div', "".concat(tab.name, "-tab-info"), "tab-info-container");
        var infoIcon = this.ui.createElement('img', null, "info-icon");
        infoIcon.src = _.default.info_icon;
        infoIcon.alt = 'Info';
        var infoTextContainer = this.ui.createElement('div', "".concat(tab.name, "-info-text"), 'info-text-container');
        this.ui.updateElementHTML(infoTextContainer, tabInfoText);
        infoTextContainer.style.display = "none"; // initially hidden

        var infoIconClickHandler = function infoIconClickHandler() {
          if (infoTextContainer.style.display === "none") {
            infoTextContainer.style.display = "block";
          } else {
            infoTextContainer.style.display = "none";
          }
        };
        this.eventManager.addDomListener(infoIcon, 'click', infoIconClickHandler);
        tabInfoContainer.appendChild(infoIcon);
        tabInfoContainer.appendChild(infoTextContainer);
        targetElement.prepend(tabInfoContainer);
        // infoIcon.click();
      }
    }
  }]);
}();
},{"../../../assets/icons/*.png":"assets/icons/*.png","./Tab.js":"components/UI/Core/Tab.js","../DisplayComponents/SkillsTab.js":"components/UI/DisplayComponents/SkillsTab.js","../DisplayComponents/ForgeTab.js":"components/UI/DisplayComponents/ForgeTab.js","../DisplayComponents/ExplorationDisplay/ExplorationTab.js":"components/UI/DisplayComponents/ExplorationDisplay/ExplorationTab.js","../DisplayComponents/TrainingTab.js":"components/UI/DisplayComponents/TrainingTab.js","../DisplayComponents/EssenceTab.js":"components/UI/DisplayComponents/EssenceTab.js","../DisplayComponents/RadianceTab.js":"components/UI/DisplayComponents/RadianceTab.js","../DisplayComponents/AchievementsTab.js":"components/UI/DisplayComponents/AchievementsTab.js","../DisplayComponents/SettingsTab.js":"components/UI/DisplayComponents/SettingsTab.js"}],"components/UI/DisplayComponents/StatsDisplay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var StatsDisplay = exports.default = /*#__PURE__*/function () {
  function StatsDisplay(eventManager, gameContent, ui) {
    _classCallCheck(this, StatsDisplay);
    this.eventManager = eventManager;
    this.gameContent = gameContent;
    this.ui = ui;
    this.statsList = ['force', 'wisdom', 'energy', 'divine', 'crystal', 'essence', 'radiance', 'powerLevel'];
  }
  return _createClass(StatsDisplay, [{
    key: "populateDisplay",
    value: function () {
      var _populateDisplay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var column, i, statDiv, statNameDiv, statValueDiv;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              column = null;
              for (i = 0; i < this.statsList.length; i++) {
                // Check for 'powerLevel' or new column every 2 items
                if (this.statsList[i] === 'powerLevel' || i % 2 === 0) {
                  column = this.ui.createElement('div', null, 'stats-column');
                  this.ui.statsRow.appendChild(column);
                }
                statDiv = document.createElement('div');
                statDiv.className = this.statsList[i] === 'powerLevel' ? "".concat(this.statsList[i], "-stat") : "".concat(this.statsList[i], "-stat ").concat(this.statsList[i], "-color");
                statDiv.classList.add("stats-container");
                statNameDiv = this.ui.createElement('div', null, 'stat-name', "".concat(this.statsList[i].charAt(0).toUpperCase() + this.statsList[i].slice(1)));
                statValueDiv = this.ui.createElement('div', null, 'stat-value');
                statDiv.appendChild(statNameDiv);
                statDiv.appendChild(statValueDiv);
                if (this.statsList[i] !== "radiance" && this.statsList[i] !== "essence" && this.statsList[i] !== "crystal") {
                  this.ui.populateTooltip("".concat(this.statsList[i], "-stat"), statDiv);
                }
                column.appendChild(statDiv);
              }
            case 2:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function populateDisplay() {
        return _populateDisplay.apply(this, arguments);
      }
      return populateDisplay;
    }()
  }, {
    key: "updateDisplay",
    value: function () {
      var _updateDisplay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _this = this;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              this.statsList.forEach(function (stat) {
                var statDiv = _this.ui.statsRow.querySelector(".".concat(stat, "-stat"));
                if (statDiv) {
                  var statValueDiv = _this.ui.statsRow.querySelector(".".concat(stat, "-stat .stat-value")) || _this.ui.statsRow.querySelector(".".concat(stat, " .stat-value"));
                  _this.ui.updateElementTextContent(statValueDiv, "".concat(_this.ui.formatNumber(_this.gameContent[stat])));
                  if (stat !== "radiance" && stat !== "essence" && stat !== "crystal") {
                    _this.ui.updateTooltip(null, stat);
                  }

                  // Update the opacity and width of the statDiv based on the stat value
                  if (_this.gameContent[stat] == 0) {
                    statDiv.style.opacity = 0;
                    statDiv.style.width = '0';
                    statDiv.style.marginLeft = '0';
                    statDiv.style.marginRight = '0';
                    statDiv.style.padding = '0';
                  } else {
                    statDiv.style.opacity = 1;
                    statDiv.style.width = '';
                    statDiv.style.marginLeft = '';
                    statDiv.style.marginRight = '';
                    statDiv.style.padding = '';
                  }
                }
              });
            case 1:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function updateDisplay() {
        return _updateDisplay.apply(this, arguments);
      }
      return updateDisplay;
    }()
  }]);
}();
},{}],"components/UI/Core/_GameUI.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../../Utilities/decimal.js");
var _NumberFormatter = _interopRequireDefault(require("./NumberFormatter.js"));
var _HotkeyManager = _interopRequireDefault(require("./HotkeyManager.js"));
var _MultiplierManager = _interopRequireDefault(require("./MultiplierManager.js"));
var _NotificationManager = _interopRequireDefault(require("./NotificationManager.js"));
var _TabManager = _interopRequireDefault(require("./TabManager.js"));
var _StatsDisplay = _interopRequireDefault(require("../DisplayComponents/StatsDisplay.js"));
var _ = _interopRequireDefault(require("../../../assets/gameData/*.json"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GameUI = exports.default = /*#__PURE__*/function () {
  function GameUI(eventManager, gameManager, stateManager, rewardManager) {
    _classCallCheck(this, GameUI);
    this.affordableBypass = false;
    this.isUiPopulated = false;

    // Update interval defined in Game

    this.eventManager = eventManager;
    this.gameManager = gameManager;
    this.gameContent = gameManager.gameContent;
    this.stateManager = stateManager;
    this.rewardManager = rewardManager;
    this.buildUiSkeleton();
    this.numberFormatter = new _NumberFormatter.default(eventManager, this);
    this.tabManager = new _TabManager.default(eventManager, this.gameContent, _.default.tabData, this);
    this.hotkeyManager = new _HotkeyManager.default(eventManager, this);
    this.multiplierManager = new _MultiplierManager.default(eventManager, this);
    this.notificationManager = new _NotificationManager.default(eventManager, this);
    this.statsDisplay = new _StatsDisplay.default(eventManager, this.gameContent, this);

    // this.elements = [];

    this.populateUI();
    this.multiplierManager.setupMultiplierButtons(this.tabManager.tabs);
    this.tabManager.changeTab('training'); // Set start tab
    this.hotkeyManager.initHotkeys();
  }
  return _createClass(GameUI, [{
    key: "populateUI",
    value: function populateUI() {
      this.statsDisplay.populateDisplay();
      this.tabManager.populateTabs();
      this.isUiPopulated = true;
    }
  }, {
    key: "updateUI",
    value: function updateUI() {
      this.statsDisplay.updateDisplay();
      this.tabManager.updateTabButtons();
      this.tabManager.updateCurrentTabDisplay();
    }
  }, {
    key: "returnFirstTenButtonElements",
    value: function returnFirstTenButtonElements(tabID) {
      var currentTabElement, allButtons, filteredButtons;
      if (tabID === "tab-content-OdysseySubTab") {
        currentTabElement = document.getElementById("Odyssey-tab-buttons");
        allButtons = Array.from(currentTabElement.querySelectorAll('button'));
        filteredButtons = allButtons.filter(function (button) {
          return !(button.id.includes('realm') || button.id.includes('refund')) && getComputedStyle(button).opacity !== '0';
        });
      } else {
        currentTabElement = document.getElementById(tabID);
        allButtons = Array.from(currentTabElement.querySelectorAll('button'));
        filteredButtons = allButtons.filter(function (button) {
          if (tabID === 'essence' && button.id === 'rebirth1Button') {
            return false;
          }
          return !(button.id.includes('realm') || button.id.includes('tab') || button.id.includes('refund') || button.id.includes('Tab')) && getComputedStyle(button).opacity !== '0';
        });
      }
      return filteredButtons;
    }
  }, {
    key: "buildUiSkeleton",
    value: function buildUiSkeleton() {
      var _this = this;
      this.uiElementsMap = new Map();
      this.uiElementCounter = 0;
      this.rootElement = document.getElementById("root");
      _.default.interfaceElementData.forEach(function (element) {
        if (!_this[element.variableName]) {
          var newElement = document.createElement(element.tag);
          if (element.tag === "select") {
            element.options.forEach(function (optionValue) {
              var option = document.createElement('option');
              option.value = optionValue;
              option.text = optionValue;
              newElement.appendChild(option);
            });
          }
          newElement.id = element.id;

          // Assigning button text as id
          if (element.tag === "button") {
            var name = element.id;
            if (name.includes("SubTab")) {
              name = name.replace("SubTab", "");
            } else if (name.includes("Tab")) {
              name = name.replace("Tab", "");
            }

            // Making the first letter uppercase
            name = name.charAt(0).toUpperCase() + name.slice(1);
            newElement.textContent = name;
          }
          if (element.className) {
            newElement.className = element.className;
          }
          var parentElement = document.getElementById(element.parent);
          parentElement.appendChild(newElement);
          _this[element.variableName] = newElement; // store the reference
          _this.uiElementsMap.set(element.variableName, newElement); // Add to the Map for later deletion
        }
      });
    }
  }, {
    key: "hideElement",
    value: function hideElement(id) {
      var element = document.getElementById(id);
      if (element) {
        element.style.display = "none";
      }
    }
  }, {
    key: "showElement",
    value: function showElement(id) {
      var displayStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "flex";
      // console.error(id);
      var element = document.getElementById(id);
      // console.error(element);
      if (element) {
        element.style.display = displayStyle;
      }
    }
  }, {
    key: "isAffordable",
    value: function isAffordable(feature) {
      if (this.affordableBypass) {
        return true;
      }
      var currentResource = this.gameManager.gameContent.queryPropertyValues(feature.costType);
      if (feature.featureType === "zone") {
        if (currentResource.gte(feature.costBase)) {
          return true;
        }
        return false;
      }
      if (currentResource.gte(feature.costNextMultPurchase)) {
        return true;
      }
      return false;
    }
  }, {
    key: "hideChildren",
    value: function hideChildren(parentElement) {
      Array.from(parentElement.children).forEach(function (child) {
        child.style.display = 'none';
      });
    }
  }, {
    key: "populateMouseOverZIndexEvents",
    value: function populateMouseOverZIndexEvents(element) {
      var originalZIndex = element.style.zIndex;

      // Define named functions for the mouseover and mouseout events
      var mouseOverListener = function mouseOverListener() {
        element.style.zIndex = 1000;
      };
      var mouseOutListener = function mouseOutListener() {
        element.style.zIndex = originalZIndex;
      };

      // Use EventManager to add the event listeners
      this.eventManager.addDomListener(element, 'mouseover', mouseOverListener);
      this.eventManager.addDomListener(element, 'mouseout', mouseOutListener);

      // Optionally store the listeners if you need to remove them later
      element.mouseOverListener = mouseOverListener;
      element.mouseOutListener = mouseOutListener;
    }
  }, {
    key: "populateAutobuyCheckbox",
    value: function populateAutobuyCheckbox(feature, container, heap) {
      var _this2 = this;
      var checkbox = container.querySelector("#checkbox-".concat(feature.id));
      var label = container.querySelector("#label-".concat(feature.id));
      if (!checkbox) {
        checkbox = this.createElement('input', "checkbox-".concat(feature.id));
        checkbox.type = 'checkbox';
        checkbox.style.display = 'none';

        // Define a named function for the change event
        var checkboxChangeListener = function checkboxChangeListener() {
          feature.autoToggle = checkbox.checked;
          if (feature.featureType === "artifact") {
            if (checkbox.checked) {
              _this2.gameManager.automationManager.artifactAutobuys.push(feature);
            } else {
              _this2.gameManager.automationManager.artifactAutobuys = _this2.gameManager.automationManager.artifactAutobuys.filter(function (item) {
                return item !== feature;
              });
            }
          } else {
            if (checkbox.checked) {
              heap.add(feature);
              feature.currentAutoHeap = heap;
            } else {
              heap.remove(feature);
              feature.currentAutoHeap = null;
            }
          }
        };

        // Use EventManager to add the event listener
        this.eventManager.addDomListener(checkbox, 'change', checkboxChangeListener);

        // Optional: Store the listener reference if you need to remove it later
        checkbox.changeListener = checkboxChangeListener;
        label = this.createElement('label', "label-".concat(feature.id), null, "Auto");
        label.htmlFor = checkbox.id;
        label.style.fontSize = 'small';
        container.appendChild(checkbox);
        container.appendChild(label);
      }
    }
  }, {
    key: "updateAutobuyCheckbox",
    value: function updateAutobuyCheckbox(feature, container) {
      // Update checkbox visibility based on feature.autoUnlocked
      var checkbox = container.querySelector("#checkbox-".concat(feature.id));
      var label = container.querySelector("#label-".concat(feature.id));
      if (feature.autoUnlocked) {
        //changed to opacity vs display so the UI space is already taken and doesnt shift elements on enable
        label.style.opacity = 1;
        label.style.pointerEvents = 'auto';
      } else {
        label.style.opacity = 0;
        label.style.pointerEvents = 'none';
      }

      // Update checkbox checked state based on feature.autoToggle
      if (feature.maxLevel.eq(feature.level)) {
        checkbox.checked = false;
        checkbox.disabled = true;
      } else {
        checkbox.checked = feature.autoToggle;
        checkbox.disabled = !feature.active;
      }
    }
  }, {
    key: "populateTooltip",
    value: function populateTooltip(feature, element) {
      var tooltip;
      if (feature.id) {
        tooltip = this.createElement('span', "tooltip-".concat(feature.id), 'tooltip-text', "Tooltip content here");
      } else {
        tooltip = this.createElement('span', "tooltip-".concat(feature), ['tooltip-text', 'stat-tooltip-text'], "Tooltip content here");
      }
      element.appendChild(tooltip);
    }
  }, {
    key: "updateTooltip",
    value: function updateTooltip(feature) {
      var stat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var tooltipText = [];

      //populate tooltips for stats
      if (stat) {
        //stats with power level multiplier
        if (this.gameContent[stat + 'PowerLevelMultiplier']) {
          tooltipText.push("<b>".concat(stat.charAt(0).toUpperCase() + stat.slice(1), " Info:</b>"));
          // tooltipText.push('------');
          tooltipText.push("Total Income: ".concat(this.formatNumber(this.gameContent[stat + 'Income']), " /sec"));
          tooltipText.push("Contribution to Power Level: x".concat(this.formatNumber(this.gameContent[stat + 'PowerLevelMultiplier'])));
        } else {
          tooltipText.push("".concat(stat, " Info:"));
          if (this.gameContent.force.gt(0)) {
            tooltipText.push("Force Contribution: ".concat(this.formatNumber(this.gameContent.forcePowerLevelMultiplier), "x"));
          }
          if (this.gameContent.wisdom.gt(0)) {
            tooltipText.push("Wisdom Contribution: ".concat(this.formatNumber(this.gameContent.wisdomPowerLevelMultiplier), "x"));
          }
          if (this.gameContent.energy.gt(0)) {
            tooltipText.push("Energy Contribution: ".concat(this.formatNumber(this.gameContent.energyPowerLevelMultiplier), "x"));
          }
          if (this.gameContent.divine.gt(0)) {
            tooltipText.push("Divine Contribution: ".concat(this.formatNumber(this.gameContent.divinePowerLevelMultiplier), "x"));
          }
        }
        var newContent = tooltipText.join('\n');
        var tooltipElement = document.getElementById("tooltip-".concat(stat, "-stat"));
        this.updateElementHTML(tooltipElement, newContent);
      } else {
        tooltipText = [];
        if (feature.featureType === "zone" || feature.featureType === "achievement" || feature.featureType === "skill") {
          tooltipText.push("<span style=\"font-size:120%; font-weight: bold;\">".concat(feature.name, "</span>"));
          tooltipText.push("");
        }
        if (feature.note.length > 0) {
          tooltipText.push("".concat(feature.note));
        }
        if (feature.description.length > 0) {
          tooltipText.push("".concat(feature.description));
          tooltipText.push('------');
        }
        if (feature.featureType === "forgeUpgrade") {
          tooltipText.push("".concat(this.formatNumber(feature.costBase), " ").concat(feature.costType));
        } else if (feature.featureType === "zone") {
          if (feature.zoneType === "boss") {
            tooltipText.push("Region Boss: 1 skillpoints on first kill");
          }
          if (feature.unlocked) {
            if (feature.zoneType === "legendaryBoss" && !feature.isDefeated) {
              tooltipText = [];
              tooltipText.push(feature.unlockReqText);
            } else {
              tooltipText.push("<b>Cost:</b> ".concat(this.formatNumber(feature.costNextMultPurchase), " ").concat(feature.costType));
              tooltipText.push("<b>Reward:</b> ".concat(this.formatNumber(feature.prodNextMultPurchase), " ").concat(feature.prodType, " "));
              tooltipText.push("<b>Duration:</b> ".concat(Math.round(feature.conquestTime * 100) / 100, " sec"));
              if (feature.timeRemaining > 0) {
                tooltipText.push("<b>Remaining:</b> ".concat(feature.timeRemaining.toFixed(2), " sec"));
              }
            }
          } else if (feature.zoneType === "legendaryBoss") {
            //clear tooltiptext array
            tooltipText = [];
            // if (feature.unlocked){

            // 	tooltipText.push(`<span style="font-size:120%; font-weight: bold;">${feature.name}</span>`);
            // 	tooltipText.push('------');
            // }
            // else {
            tooltipText.push(feature.unlockReqText);
            // }
          } else {
            console.log("uh oh-update tooltip for zones");
          }
        } else if (feature.featureType === "skill") {} else if (feature.featureType === "artifact") {
          // for (let obs of feature.observers) {
          // if (obs.targetType) {
          // let treeType = obs.type;
          // tooltipText.push(`<b>Current Contribution:</b> ${treeType} ${obs.runningCalcType}`);
          // tooltipText.push('type targetting - not handled yet ');
          // continue; // Skip to the next iteration of the loop
          // }
          // }
          if (feature.featureType === "artifact") {
            var modData = feature.observers[0];
            var contribution = (0, _decimal.DEC)(modData.value).plus(feature.level);

            // Generate the artifact description dynamically
            var description = "".concat(modData.targetType, " ").concat(modData.type, " ").concat(modData.runningCalcType, " (").concat(modData.value, " ").concat(modData.sourceCalcType, " artifact level)");
            tooltipText.push("".concat(description));
            tooltipText.push("<b>Current Contribution:</b> ".concat(modData.targetType, " ").concat(modData.type, " ").concat(modData.runningCalcType, " ").concat(contribution));
            tooltipText.push("<b>Evolution Tier:</b> ".concat(feature.evolutionTier));
            var nextEvolution = feature.evolutions.find(function (evo) {
              return evo.evolutionTier === Number(feature.evolutionTier) + 1;
            });
            if (nextEvolution) {
              tooltipText.push("Artifact evolves at level ".concat(feature.maxLevel));
            } else {
              tooltipText.push("Artifact at max evolution");
            }
          }
        } else if (feature.featureType === "essenceUpgrade") {} else if (feature.featureType === "achievement") {
          tooltipText.push("Radiance Bonus: ".concat(feature.radianceReward));
          var achievementText = 'Set Bonus: ' + feature.set.description;
          if (feature.set.completed) {
            achievementText = "<span style = \"color:".concat(feature.set.color, "; font-weight:bold;\">").concat(achievementText, " <br>(Active)</span>");
          }
          tooltipText.push(achievementText);
        } else if (feature.featureType === "realmUpgrade") {
          var _iterator = _createForOfIteratorHelper(feature.observers),
            _step;
          try {
            var _loop = function _loop() {
              var obs = _step.value;
              // Check if 'obs' has a 'targetType' property
              if (obs.targetType) {
                tooltipText.push('type targetting - not handled yet ');
                return 1; // continue
                // Skip to the next iteration of the loop
              }
              var tree = obs.target.modTreesMap.get("production");
              var targetNode = tree.nodes.find(function (node) {
                return node.ref.id === obs.id;
              });
              var treeType = "prod";

              // Check if targetNode wasn't found in 'production'. If not, look for it in 'cost'
              if (!targetNode) {
                tree = obs.target.modTreesMap.get("cost");
                targetNode = tree.nodes.find(function (node) {
                  return node.ref.id === obs.id;
                });
                treeType = "cost";
              }
              if (targetNode) {
                tooltipText.push("<b>Effect: </b>".concat(obs.target.name, " ").concat(treeType, " ").concat(obs.runningCalcType, " level"));
                var result = tree.calcNodeResult(targetNode, obs.source.level);
                tooltipText.push("<b>Current Contribution:</b> ".concat(treeType, " ").concat(obs.runningCalcType, " ").concat(result.toFixed(3), " "));
              }
            };
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              if (_loop()) continue;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else if (feature.featureType === "training" || feature.featureType === "generator") {
          if (feature.featureType === "generator") {
            tooltipText.push("Manual Levels: ".concat(feature.manualLevel));
          }
          tooltipText.push("<b>Multiplier:</b> ".concat(feature.prodMult.toPrecision(3), "\n<b>Prod Growthrate:</b> ").concat(feature.prodGrowthRate.toPrecision(3)));
          tooltipText.push("<b>Cost Multiplier:</b> ".concat(feature.costMult.toPrecision(3), "\n<b>Cost Growthrate:</b> ").concat(feature.costGrowthRate.toPrecision(3)));
          tooltipText.push("<b>Evolution Tier:</b> ".concat(feature.evolutionTier));

          //dont display prodNextMultPurchase value on upgrades or features who dont have prodNextMultPurchase
          if (feature.prodNextMultPurchase.gt(0)) {
            //incorporate milestone multipliers into next calculations where applicable
            var milestoneMult = (0, _decimal.DEC)(1);
            if (feature.milestoneTiers && feature.featureType !== "artifact") {
              if (feature.nextLevelIncrement.plus(feature.manualLevel).gte(feature.nextMilestoneLevel)) {
                milestoneMult = feature.nextMilestoneMult;
              }
              tooltipText.push("<b>Current Milestone Mult:</b>".concat(feature.milestonesAchieved * 2, "\n<b>Next Milestone Lvl:</b> ").concat(feature.nextMilestoneLevel, "\n<b>Next Milestone Mult:</b>").concat(feature.nextMilestoneMult));
            }
          }
        }
        var _newContent = tooltipText.join('\n');
        _newContent = _newContent.replace(/ mult /g, " * ").replace(/ add /g, " + ").replace(/ div /g, " / ").replace(/ minus /g, " - ");
        var _tooltipElement = document.getElementById("tooltip-".concat(feature.id));
        this.updateElementHTML(_tooltipElement, _newContent);
      }
    }
  }, {
    key: "createElement",
    value: function createElement(type) {
      var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var classes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var textContent = arguments.length > 3 ? arguments[3] : undefined;
      var element = document.createElement(type);
      if (id) {
        element.id = id;
      }
      if (typeof classes === 'string') {
        element.classList.add(classes);
      } else if (Array.isArray(classes)) {
        var _iterator2 = _createForOfIteratorHelper(classes),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var cls = _step2.value;
            element.classList.add(cls);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (textContent) {
        element.textContent = textContent;
      }
      var elementKey = 'uiElement_' + this.uiElementCounter++;
      this.uiElementsMap.set(elementKey, element);
      return element;
    }
  }, {
    key: "findOrCreateElement",
    value: function findOrCreateElement(parent, type, id) {
      var classes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      var element = parent.querySelector("#".concat(id));
      if (!element) {
        element = this.createElement(type, id, classes);
        parent.appendChild(element);
      }
      return element;
    }
  }, {
    key: "updateVisibility",
    value: function updateVisibility(element, condition) {
      // element.style.display = condition ? 'block' : 'none';
      element.style.opacity = condition ? 1 : 0;
      element.style.pointerEvents = condition ? 'auto' : 'none';
    }
  }, {
    key: "updateElementTextContent",
    value: function updateElementTextContent(element, newContent) {
      if (element.textContent !== newContent) {
        element.textContent = newContent;
      }
    }
  }, {
    key: "updateElementHTML",
    value: function updateElementHTML(element, newContent) {
      if (element.innerHTML !== newContent) {
        element.innerHTML = newContent;
      }
    }
  }, {
    key: "populateFeatureCell",
    value: function populateFeatureCell(feature, targetCol, featureId) {
      var _this3 = this;
      var realmTypeForColor = targetCol.id.split("-")[0];
      var cell = this.createElement('div', featureId, ["feature-cell", "".concat(feature.featureType, "-cell"), "".concat(realmTypeForColor, "-color")]);
      if (feature.featureType === "artifact") {
        var artifactSlot = this.createElement('span', null, 'gear-type', feature.gearType);
        cell.appendChild(artifactSlot);
      }
      var featureNameContainer = this.createElement('div', null, ["feature-name-container", feature.featureType + '-name-container']);
      var featureName = this.createElement('div', null, ["feature-name", feature.featureType + '-name'], feature.name + ": " + feature.level + "\n" + feature.description);
      featureNameContainer.appendChild(featureName);
      cell.appendChild(featureNameContainer);
      var button = this.createElement('button', "button-".concat(feature.id));
      button.setAttribute('data-ticks', '0'); // Start with 0 tick marks

      // Create a span to hold the button's text
      var buttonText = this.createElement('span', "buttonText-".concat(feature.id));
      button.classList.add('tick-button');
      button.appendChild(buttonText);
      this.populateTooltip(feature, button);
      var buttonClickListener = function buttonClickListener() {
        _this3.buyFeature(feature.id);
      };

      // Use EventManager to add the event listener
      this.eventManager.addDomListener(button, 'click', buttonClickListener);

      // Optional: Store the listener reference if you need to remove it later
      button.clickListener = buttonClickListener;
      cell.appendChild(button);
      targetCol.appendChild(cell);
      return cell;
    }
  }, {
    key: "updateFeatureCell",
    value: function updateFeatureCell(feature, featureCell) {
      if (feature.id === 12001) {
        console.error(feature);
      }
      this.updateVisibility(featureCell, feature.active);
      // const featureNameContainer= featureCell.querySelector('.' + feature.featureType + '-name-container');
      var featureNameElement = featureCell.querySelector('.' + feature.featureType + '-name');
      var featureNameText = feature.name + ": " + this.formatNumber(feature.level.floor());
      this.updateElementHTML(featureNameElement, featureNameText);

      // Update button text, style, and clickability based on feature.active
      var buttonTextElement = featureCell.querySelector("#buttonText-".concat(feature.id));
      var newButtonText = [];
      newButtonText.push("<b>+".concat(feature.nextLevelIncrement, " level</b>"));

      //dont display prodNextMultPurchase value on upgrades or features who dont have prodNextMultPurchase
      if (feature.prodNextMultPurchase.gt(0)) {
        //incorporate milestone multipliers into next calculations if it will be achieved
        var milestoneMult = (0, _decimal.DEC)(1);
        if (feature.milestoneTiers) {
          if (feature.nextLevelIncrement.plus(feature.manualLevel).gte(feature.nextMilestoneLevel)) {
            milestoneMult = feature.nextMilestoneMult;
            newButtonText.push("+".concat(this.formatNumber(feature.prodNextMultPurchase.plus(feature.prodCurrentGlobal).times(milestoneMult).minus(feature.prodCurrentGlobal)), " ").concat(feature.prodType.replace("Income", ""), "/sec"));
          } else {
            newButtonText.push("+".concat(this.formatNumber(feature.prodNextMultPurchase), " ").concat(feature.prodType.replace("Income", ""), "/sec"));
          }
        } else {
          if (feature.featureType === "radianceUpgrade") {
            newButtonText.push("+".concat(this.formatNumber(feature.nextLevelIncrement.times(10)), "% Speed"));
          } else {
            newButtonText.push("+".concat(this.formatNumber(feature.prodNextMultPurchase), " ").concat(feature.prodType.replace("Income", ""), "/sec"));
          }
        }
      }
      newButtonText.push("-".concat(this.formatNumber(feature.costNextMultPurchase), " ").concat(feature.costType));
      var button = featureCell.querySelector("#button-".concat(feature.id));

      // this.updateMilestoneButtonMarks(button,feature.milestonesAchieved);

      if (feature.active && feature.level.neq(feature.maxLevel) && this.isAffordable(feature) && feature.nextLevelIncrement.gt(0)) {
        button.disabled = false;
        button.classList.add('enabled');
        button.classList.remove('disabled');
        if (feature.nextLevelIncrement.gte(feature.nextMilestoneLevel) && feature.nextMilestoneLevel && feature.nextMilestoneLevel.gt(0)) {
          button.classList.add('milestone-affordable');
        } else {
          button.classList.remove('milestone-affordable');
        }
      } else if (feature.level.eq(feature.maxLevel)) {
        button.disabled = true;
        button.classList.remove('enabled');
        button.classList.add('disabled', 'complete');
        newButtonText = ["max"];
        button.classList.remove('milestone-affordable');
      } else {
        button.disabled = true;
        button.classList.remove('enabled');
        button.classList.add('disabled');
        button.classList.remove('milestone-affordable');
      }
      this.updateTooltip(feature);
      this.updateElementHTML(buttonTextElement, newButtonText.join("\r"));
    }
  }, {
    key: "updateMilestoneButtonMarks",
    value: function updateMilestoneButtonMarks(button, numberOfTicks) {
      if (numberOfTicks >= 0 && numberOfTicks <= 10) {
        button.setAttribute('data-ticks', numberOfTicks.toString());
      }
    }
  }, {
    key: "populateCurrentValueElement",
    value: function populateCurrentValueElement(feature, featureCell) {
      var currentValueElement = this.createElement('div', null, ["feature-current-value", "".concat(feature.featureType, "-current-value")]);
      featureCell.appendChild(currentValueElement);
      return currentValueElement;
    }
  }, {
    key: "formatTime",
    value: function formatTime(milliseconds) {
      var totalSeconds = Math.floor(milliseconds / 1000);
      var hours = Math.floor(totalSeconds / 3600);
      totalSeconds %= 3600;
      var minutes = Math.floor(totalSeconds / 60);
      var seconds = totalSeconds % 60;
      return "".concat(hours.toString().padStart(2, '0'), ":").concat(minutes.toString().padStart(2, '0'), ":").concat(seconds.toString().padStart(2, '0'));
    }

    //dispatch to gameManager
  }, {
    key: "buyFeature",
    value: function buyFeature(id) {
      this.eventManager.dispatchEvent('handlePurchase', {
        id: id
      });
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(number) {
      return this.numberFormatter.formatNumber(number);
    }
  }]);
}();
},{"../../Utilities/decimal.js":"components/Utilities/decimal.js","./NumberFormatter.js":"components/UI/Core/NumberFormatter.js","./HotkeyManager.js":"components/UI/Core/HotkeyManager.js","./MultiplierManager.js":"components/UI/Core/MultiplierManager.js","./NotificationManager.js":"components/UI/Core/NotificationManager.js","./TabManager.js":"components/UI/Core/TabManager.js","../DisplayComponents/StatsDisplay.js":"components/UI/DisplayComponents/StatsDisplay.js","../../../assets/gameData/*.json":"assets/gameData/*.json"}],"node_modules/lz-string/libs/lz-string.js":[function(require,module,exports) {
var define;
// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.5
var LZString = (function() {

// private property
var f = String.fromCharCode;
var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
var baseReverseDic = {};

function getBaseValue(alphabet, character) {
  if (!baseReverseDic[alphabet]) {
    baseReverseDic[alphabet] = {};
    for (var i=0 ; i<alphabet.length ; i++) {
      baseReverseDic[alphabet][alphabet.charAt(i)] = i;
    }
  }
  return baseReverseDic[alphabet][character];
}

var LZString = {
  compressToBase64 : function (input) {
    if (input == null) return "";
    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
    switch (res.length % 4) { // To produce valid Base64
    default: // When could this happen ?
    case 0 : return res;
    case 1 : return res+"===";
    case 2 : return res+"==";
    case 3 : return res+"=";
    }
  },

  decompressFromBase64 : function (input) {
    if (input == null) return "";
    if (input == "") return null;
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
  },

  compressToUTF16 : function (input) {
    if (input == null) return "";
    return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
  },

  decompressFromUTF16: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
  },

  //compress into uint8array (UCS-2 big endian format)
  compressToUint8Array: function (uncompressed) {
    var compressed = LZString.compress(uncompressed);
    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
      var current_value = compressed.charCodeAt(i);
      buf[i*2] = current_value >>> 8;
      buf[i*2+1] = current_value % 256;
    }
    return buf;
  },

  //decompress from uint8array (UCS-2 big endian format)
  decompressFromUint8Array:function (compressed) {
    if (compressed===null || compressed===undefined){
        return LZString.decompress(compressed);
    } else {
        var buf=new Array(compressed.length/2); // 2 bytes per character
        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
          buf[i]=compressed[i*2]*256+compressed[i*2+1];
        }

        var result = [];
        buf.forEach(function (c) {
          result.push(f(c));
        });
        return LZString.decompress(result.join(''));

    }

  },


  //compress into a string that is already URI encoded
  compressToEncodedURIComponent: function (input) {
    if (input == null) return "";
    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
  },

  //decompress from an output of compressToEncodedURIComponent
  decompressFromEncodedURIComponent:function (input) {
    if (input == null) return "";
    if (input == "") return null;
    input = input.replace(/ /g, "+");
    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
  },

  compress: function (uncompressed) {
    return LZString._compress(uncompressed, 16, function(a){return f(a);});
  },
  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    var i, value,
        context_dictionary= {},
        context_dictionaryToCreate= {},
        context_c="",
        context_wc="",
        context_w="",
        context_enlargeIn= 2, // Compensate for the first entry which should not count
        context_dictSize= 3,
        context_numBits= 2,
        context_data=[],
        context_data_val=0,
        context_data_position=0,
        ii;

    for (ii = 0; ii < uncompressed.length; ii += 1) {
      context_c = uncompressed.charAt(ii);
      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
          if (context_w.charCodeAt(0)<256) {
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<8 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          } else {
            value = 1;
            for (i=0 ; i<context_numBits ; i++) {
              context_data_val = (context_data_val << 1) | value;
              if (context_data_position ==bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = 0;
            }
            value = context_w.charCodeAt(0);
            for (i=0 ; i<16 ; i++) {
              context_data_val = (context_data_val << 1) | (value&1);
              if (context_data_position == bitsPerChar-1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          value = context_dictionary[context_w];
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }


        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        // Add wc to the dictionary.
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    // Output the code for w.
    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
        if (context_w.charCodeAt(0)<256) {
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<8 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        } else {
          value = 1;
          for (i=0 ; i<context_numBits ; i++) {
            context_data_val = (context_data_val << 1) | value;
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = 0;
          }
          value = context_w.charCodeAt(0);
          for (i=0 ; i<16 ; i++) {
            context_data_val = (context_data_val << 1) | (value&1);
            if (context_data_position == bitsPerChar-1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        value = context_dictionary[context_w];
        for (i=0 ; i<context_numBits ; i++) {
          context_data_val = (context_data_val << 1) | (value&1);
          if (context_data_position == bitsPerChar-1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }


      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    value = 2;
    for (i=0 ; i<context_numBits ; i++) {
      context_data_val = (context_data_val << 1) | (value&1);
      if (context_data_position == bitsPerChar-1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    // Flush the last char
    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar-1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      }
      else context_data_position++;
    }
    return context_data.join('');
  },

  decompress: function (compressed) {
    if (compressed == null) return "";
    if (compressed == "") return null;
    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
  },

  _decompress: function (length, resetValue, getNextValue) {
    var dictionary = [],
        next,
        enlargeIn = 4,
        dictSize = 4,
        numBits = 3,
        entry = "",
        result = [],
        i,
        w,
        bits, resb, maxpower, power,
        c,
        data = {val:getNextValue(0), position:resetValue, index:1};

    for (i = 0; i < 3; i += 1) {
      dictionary[i] = i;
    }

    bits = 0;
    maxpower = Math.pow(2,2);
    power=1;
    while (power!=maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position == 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb>0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
        c = f(bits);
        break;
      case 2:
        return "";
    }
    dictionary[3] = c;
    w = c;
    result.push(c);
    while (true) {
      if (data.index > length) {
        return "";
      }

      bits = 0;
      maxpower = Math.pow(2,numBits);
      power=1;
      while (power!=maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position == 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb>0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2,8);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }

          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2,16);
          power=1;
          while (power!=maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position == 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb>0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize-1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      if (dictionary[c]) {
        entry = dictionary[c];
      } else {
        if (c === dictSize) {
          entry = w + w.charAt(0);
        } else {
          return null;
        }
      }
      result.push(entry);

      // Add w+entry[0] to the dictionary.
      dictionary[dictSize++] = w + entry.charAt(0);
      enlargeIn--;

      w = entry;

      if (enlargeIn == 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

    }
  }
};
  return LZString;
})();

if (typeof define === 'function' && define.amd) {
  define(function () { return LZString; });
} else if( typeof module !== 'undefined' && module != null ) {
  module.exports = LZString
} else if( typeof angular !== 'undefined' && angular != null ) {
  angular.module('LZString', [])
  .factory('LZString', function () {
    return LZString;
  });
}

},{}],"components/StateManagement/RealmState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RealmState = exports.default = /*#__PURE__*/function () {
  function RealmState(gameManager, stateManager) {
    _classCallCheck(this, RealmState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "realms";
    this.regularPropertiesFull = ['active', 'evolutionTier'];
    this.propertiesFull = this.regularPropertiesFull;
  }
  return _createClass(RealmState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/TrainingState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var TrainingState = exports.default = /*#__PURE__*/function () {
  function TrainingState(gameManager, stateManager) {
    _classCallCheck(this, TrainingState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "trainings";

    // took these out cuz realm evolution writes over cost/prodbase
    // this.baseFeatureProperties = ['baseLevel', 'costBase', 'prodBase'];
    this.propertiesBase = ['baseLevel'];
    this.autoFeatureProperties = ['autoUnlocked', 'autoToggle'];
    this.milestonePropertiesFull = ['nextMilestoneMult', 'nextMilestoneLevel', 'nextAffordableMilestoneLevel', 'milestonesAchieved'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier', 'nextLevelIncrement'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull).concat(this.milestonePropertiesFull).concat(this.autoFeatureProperties);
  }
  return _createClass(TrainingState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);

      // apply realm evolutions
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.trainings),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;
          feature.evolve(feature.evolutionTier);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.initializeTrainingIncome();
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }, {
    key: "initializeTrainingIncome",
    value: function initializeTrainingIncome() {
      var _this = this;
      this.gameManager.gameContent.trainings.forEach(function (training) {
        if (training.active) {
          var incomeType = training.prodType;
          if (_this.gameManager.gameContent.hasOwnProperty(incomeType)) {
            _this.gameManager.gameContent[incomeType] = _this.gameManager.gameContent[incomeType].plus(training.prodCurrentGlobal);
          } else {
            console.error("Income type ".concat(incomeType, " does not exist on gameManager.gameContent"));
          }
        }
      });
    }
  }]);
}();
},{}],"components/StateManagement/RealmUpgradeState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RealmUpgradeState = exports.default = /*#__PURE__*/function () {
  function RealmUpgradeState(gameManager, stateManager) {
    _classCallCheck(this, RealmUpgradeState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "realmUpgrades";

    // took these out cuz realm evolution writes over cost/prodbase
    // this.baseFeatureProperties = ['baseLevel', 'costBase', 'prodBase'];
    this.propertiesBase = ['baseLevel'];
    this.autoFeatureProperties = ['autoUnlocked', 'autoToggle'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull).concat(this.milestonePropertiesFull).concat(this.autoFeatureProperties);
  }
  return _createClass(RealmUpgradeState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);

      // apply realm evolutions
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.realmUpgrades),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;
          feature.evolve(feature.evolutionTier);
        }

        // this.initializeUpgradeEffects();
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    // Don't need this after implementing ModState
    // as they propogate the ModTrees and update multipliers automatically
  }, {
    key: "initializeUpgradeEffects",
    value: function initializeUpgradeEffects() {
      var _this = this;
      this.gameManager.gameContent.realmUpgrades.forEach(function (upgrade) {
        if (upgrade.active) {
          upgrade.updateObservers();
          _this.gameManager.updateFeatureValues(upgrade, true);
        }
      });
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/GeneratorState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GeneratorState = exports.default = /*#__PURE__*/function () {
  function GeneratorState(gameManager, stateManager) {
    _classCallCheck(this, GeneratorState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "generators";

    // took these out cuz realm evolution writes over cost/prodbase
    // this.baseFeatureProperties = ['baseLevel', 'costBase', 'prodBase'];
    this.propertiesBase = ['baseLevel'];
    this.autoFeatureProperties = ['autoUnlocked', 'autoToggle'];
    this.milestonePropertiesFull = ['nextMilestoneMult', 'nextMilestoneLevel', 'nextAffordableMilestoneLevel', 'milestonesAchieved'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.propertiesFull = this.regularPropertiesFull.concat(this.milestonePropertiesFull).concat(this.autoFeatureProperties);
  }
  return _createClass(GeneratorState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);

      // apply realm evolutions
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.generators),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;
          feature.evolve(feature.evolutionTier);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.initializeGeneratorIncome();
    }
  }, {
    key: "initializeGeneratorIncome",
    value: function initializeGeneratorIncome() {
      var _this = this;
      this.gameManager.gameContent.generatorChains.forEach(function (generatorChain) {
        if (generatorChain.generators[0].active) {
          generatorChain.active = true;
        }
      });
      this.gameManager.gameContent.generatorChains.forEach(function (generatorChain) {
        if (generatorChain.active) {
          var incomeType = generatorChain.generators[0].prodType;
          if (_this.gameManager.gameContent.hasOwnProperty(incomeType)) {
            _this.gameManager.gameContent[incomeType] = _this.gameManager.gameContent[incomeType].plus(generatorChain.generators[0].prodCurrentGlobal);
          } else {
            console.error("Income type ".concat(incomeType, " does not exist on gameManager.gameContent"));
          }
        }
      });
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/AchievementState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var AchievementState = exports.default = /*#__PURE__*/function () {
  function AchievementState(gameManager, stateManager) {
    _classCallCheck(this, AchievementState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "achievements";
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.claimPropertiesFull = ['isClaimable', 'isClaimed'];
    this.propertiesFull = this.regularPropertiesFull.concat(this.claimPropertiesFull);
  }
  return _createClass(AchievementState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      this.reApplyAchievements();
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      this.reApplyAchievements();
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }, {
    key: "reApplyAchievements",
    value: function reApplyAchievements() {
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.achievements),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var achievement = _step.value;
          if (achievement.isClaimed) {
            achievement.setActive();
            achievement.updateObservers();
            achievement.set.checkCompletion();

            //not doing anything? hmmmmm
            // for (const unlock of this.gameContent.unlocks){
            // 	if (unlock.target === achievement){
            // 		this.gameContent.unlockManager.transferUnlockToCompleted(unlock);
            // 	}
            // }
          }
          if (achievement.isClaimed || achievement.isClaimable) {
            achievement.set.visible = true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
},{}],"components/StateManagement/ForgeUpgradeState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ForgeUpgradeState = exports.default = /*#__PURE__*/function () {
  function ForgeUpgradeState(gameManager, stateManager) {
    _classCallCheck(this, ForgeUpgradeState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "forgeUpgrades";
    this.propertiesBase = ['baseLevel'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull);
  }
  return _createClass(ForgeUpgradeState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      // Don't need this here after implementing ModState
      // as they propogate the ModTrees and update multipliers automatically
      // this.reApplyForgeUpgrades(gameData);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      var forceTrainAuto = this.gameManager.findObjectById(10401);
      if (forceTrainAuto.level.gt(0)) {
        var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.trainings.filter(function (training) {
            return training.realmID === 10;
          })),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var training = _step.value;
            training.autoUnlocked = true;
            training.autoToggle = true;
            this.gameManager.automationManager.forceHeap.add(training);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      var forceUpgradeAuto = this.gameManager.findObjectById(10402);
      if (forceUpgradeAuto.level.gt(0)) {
        var _iterator2 = _createForOfIteratorHelper(this.gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
            return upgrade.realmID === 10;
          })),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var upgrade = _step2.value;
            upgrade.autoUnlocked = true;
            upgrade.autoToggle = true;
            this.gameManager.automationManager.forceHeap.add(upgrade);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      var wisdomTrainAuto = this.gameManager.findObjectById(10406);
      if (wisdomTrainAuto.level.gt(0)) {
        var _iterator3 = _createForOfIteratorHelper(this.gameManager.gameContent.generators.filter(function (generator) {
            return generator.realmID === 20;
          })),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var generator = _step3.value;
            generator.autoUnlocked = true;
            generator.autoToggle = true;
            this.gameManager.automationManager.wisdomHeap.add(generator);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      var wisdomUpgradeAuto = this.gameManager.findObjectById(10407);
      if (wisdomUpgradeAuto.level.gt(0)) {
        var _iterator4 = _createForOfIteratorHelper(this.gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
            return upgrade.realmID === 20;
          })),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _upgrade = _step4.value;
            _upgrade.autoUnlocked = true;
            _upgrade.autoToggle = true;
            this.gameManager.automationManager.wisdomHeap.add(_upgrade);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
      var energyTrainAuto = this.gameManager.findObjectById(10408);
      if (energyTrainAuto.level.gt(0)) {
        var _iterator5 = _createForOfIteratorHelper(this.gameManager.gameContent.trainings.filter(function (training) {
            return training.realmID === 30;
          })),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _training = _step5.value;
            _training.autoUnlocked = true;
            _training.autoToggle = true;
            this.gameManager.automationManager.energyHeap.add(_training);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
      var energyUpgradeAuto = this.gameManager.findObjectById(10409);
      if (energyUpgradeAuto.level.gt(0)) {
        var _iterator6 = _createForOfIteratorHelper(this.gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
            return upgrade.realmID === 30;
          })),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _upgrade2 = _step6.value;
            _upgrade2.autoUnlocked = true;
            _upgrade2.autoToggle = true;
            this.gameManager.automationManager.energyHeap.add(_upgrade2);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
      var divineTrainAuto = this.gameManager.findObjectById(10416);
      if (divineTrainAuto.level.gt(0)) {
        var _iterator7 = _createForOfIteratorHelper(this.gameManager.gameContent.trainings.filter(function (training) {
            return training.realmID === 40;
          })),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _training2 = _step7.value;
            _training2.autoUnlocked = true;
            _training2.autoToggle = true;
            this.gameManager.automationManager.divineHeap.add(_training2);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
      var divineUpgradeAuto = this.gameManager.findObjectById(10417);
      if (divineUpgradeAuto.level.gt(0)) {
        var _iterator8 = _createForOfIteratorHelper(this.gameManager.gameContent.realmUpgrades.filter(function (upgrade) {
            return upgrade.realmID === 40;
          })),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var _upgrade3 = _step8.value;
            _upgrade3.autoUnlocked = true;
            _upgrade3.autoToggle = true;
            this.gameManager.automationManager.divineHeap.add(_upgrade3);
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      }
      var artifactAuto = this.gameManager.findObjectById(10410);
      if (artifactAuto.level.gt(0)) {
        var _iterator9 = _createForOfIteratorHelper(this.gameManager.gameContent.artifacts),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var artifact = _step9.value;
            artifact.autoUnlocked = true;
            artifact.autoToggle = true;
            this.gameManager.automationManager.artifactAutobuys.push(artifact);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }, {
    key: "reApplyForgeUpgrades",
    value: function reApplyForgeUpgrades(gameData) {
      var _this = this;
      gameData.forgeUpgrades.forEach(function (data) {
        var _iterator10 = _createForOfIteratorHelper(_this.gameManager.gameContent.forgeUpgrades),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var forgeUpgrade = _step10.value;
            if (data.id === forgeUpgrade.id) {
              if (data.active) {
                forgeUpgrade.setActive();
                forgeUpgrade.updateObservers();
              }
            }
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
      });
    }
  }]);
}();
},{}],"components/StateManagement/SkillsState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var TrainingState = exports.default = /*#__PURE__*/function () {
  function TrainingState(gameManager, stateManager) {
    _classCallCheck(this, TrainingState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "skills";

    // took these out cuz realm evolution writes over cost/prodbase
    // this.baseFeatureProperties = ['baseLevel', 'costBase', 'prodBase'];
    this.propertiesBase = ['baseLevel'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull);
  }
  return _createClass(TrainingState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/EssenceUpgradesState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var EssenceUpgradesState = exports.default = /*#__PURE__*/function () {
  function EssenceUpgradesState(gameManager, stateManager) {
    _classCallCheck(this, EssenceUpgradesState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "essenceUpgrades";
    this.propertiesBase = ['baseLevel'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull);
  }
  return _createClass(EssenceUpgradesState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      // this.reApplyEssenceeUpgrades(gameData);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      // this.reApplyEssenceeUpgrades(gameData);
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}

    // Don't need this after implementing ModState?
    // as they propogate the ModTrees and update multipliers automaticall
  }, {
    key: "reApplyEssenceeUpgrades",
    value: function reApplyEssenceeUpgrades(gameData) {
      var _this = this;
      gameData.essenceUpgrades.forEach(function (data) {
        var _iterator = _createForOfIteratorHelper(_this.gameManager.gameContent.essenceUpgrades),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var essenceUpgrade = _step.value;
            if (data.id === essenceUpgrade.id) {
              if (data.active) {
                essenceUpgrade.setActive();
                essenceUpgrade.updateObservers();
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }
  }]);
}();
},{}],"components/StateManagement/RadianceUpgradeState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RadianceUpgradeState = exports.default = /*#__PURE__*/function () {
  function RadianceUpgradeState(gameManager, stateManager) {
    _classCallCheck(this, RadianceUpgradeState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "radianceUpgrades";
    this.propertiesBase = ['baseLevel'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull);
  }
  return _createClass(RadianceUpgradeState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/ArtifactState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ArtifactState = exports.default = /*#__PURE__*/function () {
  function ArtifactState(gameManager, stateManager) {
    _classCallCheck(this, ArtifactState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "artifacts";
    this.propertiesBase = ['baseLevel'];
    this.autoFeatureProperties = ['autoUnlocked', 'autoToggle'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier', 'unlocked', 'evolved', 'evolutionTier'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull).concat(this.autoFeatureProperties);
  }
  return _createClass(ArtifactState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase(gameData);
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2(gameData);
          break;
        case 3:
          this.populateSaveDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase(gameData) {
      this.stateManager.populateSaveData(this.featureType, this.propertiesBase);
    }
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);

      // save artifact autobuy array
      gameData.artifactAutobuys = this.stateManager.mapAndSaveIds(this.gameManager.automationManager.artifactAutobuys);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1(gameData) {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2(gameData) {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3(gameData) {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesBase);
    }
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);

      // load artifact autobuy array
      this.loadAutobuyArtifactData(gameData, 'artifactAutobuys');
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}

    // Helper to load autoubuys
  }, {
    key: "loadAutobuyArtifactData",
    value: function loadAutobuyArtifactData(gameData, autoBuyName) {
      var _iterator = _createForOfIteratorHelper(gameData[autoBuyName]),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var item = _step.value;
          var artifact = this.gameManager.findObjectById(item.id);
          this.gameManager.automationManager[autoBuyName].push(artifact);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
}();
},{}],"components/StateManagement/UnlockState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Unlock = _interopRequireDefault(require("../Core/Unlock.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var UnlockState = exports.default = /*#__PURE__*/function () {
  function UnlockState(gameManager, stateManager) {
    _classCallCheck(this, UnlockState);
    this.gameManager = gameManager;
    this.gameContent = gameManager.gameContent;
    this.unlockManager = gameManager.unlockManager;
    this.stateManager = stateManager;
    this.featureType = "unlocks";
  }
  return _createClass(UnlockState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase(gameData);
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      gameData.incompleteUnlocks = this.stateManager.mapAndSaveIds(Array.from(this.gameManager.unlockManager.unlocks.values()));
      gameData.completedUnlocks = this.stateManager.mapAndSaveIds(Array.from(this.gameManager.unlockManager.completedUnlocks.values()));
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      var _this = this;
      // Process completed unlocks
      gameData.completedUnlocks.forEach(function (data) {
        if (_this.unlockManager.unlocks.has(data.id)) {
          var completedUnlock = _this.unlockManager.unlocks.get(data.id);
          _this.unlockManager.unlocks.delete(data.id);
          _this.unlockManager.completedUnlocks.set(data.id, completedUnlock);
        }
      });

      // Process incomplete unlocks
      gameData.incompleteUnlocks.forEach(function (data) {
        if (!_this.unlockManager.unlocks.has(data.id) && !_this.unlockManager.completedUnlocks.has(data.id)) {
          _this.unlockManager.unlocks.set(data.id, data);
        }
      });

      // Filter out evolution unlocks from completed unlocks
      var tempCompletedUnlocks = new Map(Array.from(this.unlockManager.completedUnlocks.entries()).filter(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          _ = _ref2[0],
          unlock = _ref2[1];
        return unlock.triggerType !== 'evolve';
      }));

      // Process triggers for completed unlocks (excluding evolution unlocks)
      this.unlockManager.processTriggers(tempCompletedUnlocks, false);
    }

    // replaced this because evolutions were still applying multiple times when save/load multiple times.  so refactored a bit to clean this up
    // applyLoadDataFull(gameData) {
    //     let tempCompletedUnlocks = new Map();
    //     gameData.completedUnlocks.forEach(data => {
    // 		if (this.unlockManager.unlocks.has(data.id)) {
    // 			const completedUnlock = this.unlockManager.unlocks.get(data.id);
    // 			this.unlockManager.unlocks.delete(data.id);

    // 			 // Check if the unlock is not an evolution unlock before adding it to tempCompletedUnlocks
    // 			 if (completedUnlock.triggerType !== 'evolve') {
    // 				tempCompletedUnlocks.set(data.id, completedUnlock);
    // 			  }

    // 			// tempCompletedUnlocks.set(data.id, completedUnlock);

    // 			// this.unlockManager.completedUnlocks.set(data.id, completedUnlock);
    // 		}
    // 	});

    //     //notifications set to false
    //     this.unlockManager.processTriggers(tempCompletedUnlocks, false);
    // }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }, {
    key: "reApplyUnlocks",
    value: function reApplyUnlocks() {}
  }]);
}();
},{"../Core/Unlock.js":"components/Core/Unlock.js"}],"components/StateManagement/ZoneState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ZoneState = exports.default = /*#__PURE__*/function () {
  function ZoneState(gameManager, stateManager) {
    _classCallCheck(this, ZoneState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "zones";
    this.propertiesBase = ['baseLevel'];
    this.autoFeatureProperties = ['autoUnlocked', 'autoToggle'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'evolutionTier', 'isDefeated', 'defeatCount', 'baseConquestTime', 'conquestTime', 'isConquesting', 'progress', 'unlocked'];
    this.rebirthProperties = ['defeatCount', 'unlocked'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull);
  }
  return _createClass(ZoneState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {
      this.stateManager.populateSaveData(this.featureType, this.rebirthProperties);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {
      this.stateManager.applyLoadData(this.featureType, this.rebirthProperties);
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/RegionState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RegionState = exports.default = /*#__PURE__*/function () {
  function RegionState(gameManager, stateManager) {
    _classCallCheck(this, RegionState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "regions";
    this.regularPropertiesFull = ['isProgressed', 'isCompleted', 'active', 'totalZonesCompleted', 'progressPercentage', 'currentlyViewing'];
    this.propertiesFull = this.regularPropertiesFull;
  }
  return _createClass(RegionState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/WorldState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var WorldState = exports.default = /*#__PURE__*/function () {
  function WorldState(gameManager, stateManager) {
    _classCallCheck(this, WorldState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "worlds";
    this.regularPropertiesFull = ['isProgressed', 'isCompleted', 'active', 'totalZonesCompleted', 'progressPercentage', 'currentlyViewing'];
    this.propertiesFull = this.regularPropertiesFull;
  }
  return _createClass(WorldState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase(gameData);
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2(gameData);
          break;
        case 3:
          this.populateSaveDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2(gameData);
          break;
        case 3:
          this.applyLoadDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase(gameData) {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);

      // save worldmanager data
      gameData.conquestAuto = this.gameManager.gameContent.worldManager.autoUnlocked;
      gameData.currentWorldID = this.gameManager.gameContent.worldManager.currentWorld.id;
      gameData.totalZonesCompleted = this.gameManager.gameContent.worldManager.totalZonesCompleted;
      gameData.progressPercentage = this.gameManager.gameContent.worldManager.progressPercentage;
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1(gameData) {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2(gameData) {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3(gameData) {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
      this.gameManager.gameContent.worldManager.autoUnlocked = gameData.conquestAuto;
      this.gameManager.gameContent.worldManager.currentWorld = this.gameManager.findObjectById(gameData.currentWorldID);
      this.gameManager.gameContent.worldManager.totalZonesCompleted = Number(gameData.totalZonesCompleted);
      this.gameManager.gameContent.worldManager.progressPercentage = Number(gameData.progressPercentage);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2(gameData) {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3(gameData) {}
  }]);
}();
},{}],"components/StateManagement/ModState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ModState = exports.default = /*#__PURE__*/function () {
  function ModState(gameManager, stateManager) {
    _classCallCheck(this, ModState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "mods";
    this.propertiesFull = ['active'];
  }
  return _createClass(ModState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/TournamentState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var TournamentState = exports.default = /*#__PURE__*/function () {
  function TournamentState(gameManager, stateManager) {
    _classCallCheck(this, TournamentState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "tournament";
  }
  return _createClass(TournamentState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase(gameData);
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2(gameData);
          break;
        case 3:
          this.populateSaveDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2(gameData);
          break;
        case 3:
          this.applyLoadDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase(gameData) {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      gameData.headbandPseudoObject = {};
      gameData.tournamentAuto = this.gameManager.gameContent.tournament.autoUnlocked;
      gameData.currentFighterTierID = this.gameManager.gameContent.tournament.currentFighterTier.id;
      gameData.currentFighterIndex = this.gameManager.gameContent.tournament.currentFighterIndex;

      // save headband pseudo object
      var headbandPseudoObject = this.gameManager.findObjectById(800);
      gameData.headbandPseudoObject = {
        // id: headbandPseudoObject.id,
        // level: headbandPseudoObject.level.toString(),
        active: headbandPseudoObject.active
      };
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1(gameData) {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2(gameData) {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3(gameData) {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.gameManager.gameContent.tournament.autoUnlocked = gameData.tournamentAuto;
      this.gameManager.gameContent.tournament.currentFighterTierID = this.gameManager.findObjectById(gameData.currentFighterTierID);
      this.gameManager.gameContent.tournament.currentFighterIndex = gameData.currentFighterIndex;

      // load headband pseudo object
      var headbandPseudoObject = this.gameManager.findObjectById(800);
      if (gameData.headbandPseudoObject.active) {
        headbandPseudoObject.setActive();
        headbandPseudoObject.updateObservers();
      }

      // recalculate accurate tournament rank
      this.gameManager.gameContent.tournament.calculateCurrentRank();
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2(gameData) {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3(gameData) {}
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/StateManagement/FighterTierState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var FighterTierState = exports.default = /*#__PURE__*/function () {
  function FighterTierState(gameManager, stateManager) {
    _classCallCheck(this, FighterTierState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "fighterTiers";
    this.regularPropertiesFull = ['isCompleted', 'active'];
    this.propertiesFull = this.regularPropertiesFull;
  }
  return _createClass(FighterTierState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/FighterState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var FighterState = exports.default = /*#__PURE__*/function () {
  function FighterState(gameManager, stateManager) {
    _classCallCheck(this, FighterState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.featureType = "fighters";
    this.propertiesBase = ['baseLevel'];
    this.regularPropertiesFull = ['level', 'manualLevel', 'autoLevel', 'active', 'prodCurrentGlobal', 'prodPrevious', 'prodNextMultPurchase', 'prodNextSingle', 'prodMult', 'costNextMultPurchase', 'costNextSingle', 'costMult', 'maxAffLvl', 'isDefeated', 'defeatCount', 'baseFightTime', 'prevFighterDefeated'];
    this.propertiesFull = this.propertiesBase.concat(this.regularPropertiesFull);
    this.propertiesRebirth = ['defeatCount'];
  }
  return _createClass(FighterState, [{
    key: "saveState",
    value: function saveState(state) {
      this.populateSaveDataBase();
      switch (state) {
        case 0:
          this.populateSaveDataFull();
          break;
        case 1:
          this.populateSaveDataRebirth1();
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      this.applyLoadDataBase();
      switch (state) {
        case 0:
          this.applyLoadDataFull();
          break;
        case 1:
          this.applyLoadDataRebirth1();
          break;
        case 2:
          this.applyLoadDataRebirth2();
          break;
        case 3:
          this.applyLoadDataRebirth3();
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase() {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1() {
      this.stateManager.populateSaveData(this.featureType, this.propertiesRebirth);
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3() {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase() {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesFull);
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1() {
      this.stateManager.applyLoadData(this.featureType, this.propertiesRebirth);
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2() {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3() {}
  }]);
}();
},{}],"components/StateManagement/_DisplayState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var DisplayState = exports.default = /*#__PURE__*/function () {
  function DisplayState(gameManager, eventManager, stateManager) {
    _classCallCheck(this, DisplayState);
    this.gameManager = gameManager;
    this.eventManager = eventManager;
    this.stateManager = stateManager;
    this.tabs;
  }
  return _createClass(DisplayState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase(gameData);
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2(gameData);
          break;
        case 3:
          this.populateSaveDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2(gameData);
          break;
        case 3:
          this.applyLoadDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase(gameData) {
      gameData.essenceTab = this.saveTabData('essence');
      gameData.explorationTab = this.saveTabData('exploration');
      gameData.artifactsTab = this.saveTabData('artifacts');
      gameData.forgeTab = this.saveTabData('forge');
      gameData.skillsTab = this.saveTabData('skills');
      gameData.achievementsTab = this.saveTabData('achievements');

      // save number notation setting
      var numberSettingsButton = document.getElementById("numberSettings");
      gameData.notationSetting = numberSettingsButton.value;

      // save tooltips toggle setting
      var tooltipToggle = document.getElementById("checkbox-tooltips");
      gameData.tooltipToggleSetting = tooltipToggle.checked;

      // save notification toggle setting
      var notificationToggle = document.getElementById("checkbox-notifications");
      gameData.notificationToggleSetting = notificationToggle.checked;

      // save hotkey toggle setting
      var hotkeyToggle = document.getElementById("checkbox-hotkeys");
      gameData.hotkeyToggleSetting = hotkeyToggle.checked;

      // save tab multiplier button state
      gameData.tabMultData = {};
      var _iterator = _createForOfIteratorHelper(this.tabs),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var tab = _step.value;
          if (tab.multiplierString) {
            gameData.tabMultData[tab.name] = {
              multiplierString: tab.multiplierString
            };
          }
        }

        // save tab hasBeenOpened value
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      gameData.tabUnvisitedData = {};
      var _iterator2 = _createForOfIteratorHelper(this.tabs),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _tab = _step2.value;
          if (_tab.hasBeenOpened) {
            gameData.tabUnvisitedData[_tab.name] = {
              hasBeenOpened: _tab.hasBeenOpened
            };
          }
        }

        // Save whether the evolution tutorial has been given
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      gameData.evolutionTutorialGiven = this.stateManager.ui.tabManager.trainingTab.evolutionTutorialGiven;
    }
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      // save essence tab so the tab is available if it's active
      gameData.essenceTab = this.saveTabData('essence');

      // save current tab for gameManager
      gameData.currentTabID = this.gameManager.currentTab.id;
      if (this.gameManager.currentSubTab) {
        gameData.currentSubTabID = this.gameManager.currentSubTab.id;
      }

      // save odyssey current view data
      if (this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld) {
        gameData.currentlyViewedWorldId = this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld.id;
      } else if (this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion) {
        gameData.currentlyViewedRegionId = this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion.id;
      }
      gameData.currentViewType = this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType;
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1(gameData) {}
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2(gameData) {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3(gameData) {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {
      var _this = this;
      this.loadTabData('essence', gameData.essenceTab);
      this.loadTabData('exploration', gameData.explorationTab);
      this.loadTabData('artifacts', gameData.artifactsTab);
      this.loadTabData('forge', gameData.forgeTab);
      this.loadTabData('skills', gameData.skillsTab);
      this.loadTabData('achievements', gameData.achievementsTab);

      // load number notation setting
      var numberSettingsButton = document.getElementById("numberSettings");
      numberSettingsButton.value = gameData.notationSetting;
      this.eventManager.dispatchEvent('updateNumberNotation', {
        value: gameData.notationSetting
      });

      // load tooltips toggle setting
      var tooltipToggle = document.getElementById("checkbox-tooltips");
      tooltipToggle.checked = gameData.tooltipToggleSetting;
      if (tooltipToggle.checked) {
        document.querySelector('#root').classList.remove('tooltips-off');
      } else {
        document.querySelector('#root').classList.add('tooltips-off');
      }

      // load notification toggle setting
      var notificationToggle = document.getElementById("checkbox-notifications");
      notificationToggle.checked = gameData.notificationToggleSetting;
      if (notificationToggle.checked) {
        this.gameManager.notificationsToggled = true;
      } else {
        this.gameManager.notificationsToggled = false;
      }

      // load hotkey toggle setting
      var hotkeyToggle = document.getElementById("checkbox-hotkeys");
      hotkeyToggle.checked = gameData.hotkeyToggleSetting;
      if (hotkeyToggle.checked) {
        this.eventManager.dispatchEvent('hotkeyEnabled');
      } else {
        this.eventManager.dispatchEvent('hotkeyDisabled');
      }

      // load tab multiplier button state
      var _loop = function _loop(tabName) {
        var savedTabData = gameData.tabMultData[tabName];

        // Find the matching tab in your game
        var gameTab = _this.tabs.find(function (tab) {
          return tab.name === tabName;
        });

        // Check if the tab exists and update the multiplierString
        if (gameTab) {
          gameTab.tempMultString = savedTabData.multiplierString;
          _this.eventManager.dispatchEvent('updateMultiplier', gameTab);
          gameTab.tempMultString = null;
        } else {
          console.error("Tab with name ".concat(tabName, " not found in game."));
        }
      };
      for (var tabName in gameData.tabMultData) {
        _loop(tabName);
      }

      // load tab hasBeenOpened value
      var _loop2 = function _loop2(_tabName) {
        var savedTabOpenStatus = gameData.tabUnvisitedData[_tabName];

        // Find the matching tab in your game
        var gameTab = _this.tabs.find(function (tab) {
          return tab.name === _tabName;
        });

        // Check if the tab exists and update the hasBeenOpened value
        if (gameTab) {
          gameTab.hasBeenOpened = savedTabOpenStatus.hasBeenOpened;
        } else {
          console.error("Tab with name ".concat(_tabName, " not found in game."));
        }
      };
      for (var _tabName in gameData.tabUnvisitedData) {
        _loop2(_tabName);
      }

      // Load whether the evolution tutorial has been given
      this.stateManager.ui.tabManager.trainingTab.evolutionTutorialGiven = gameData.evolutionTutorialGiven; // Load whether the evolution tutorial has been given
    }
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      this.loadTabData('essence', gameData.essenceTab);

      // load current tab for gameManager
      this.gameManager.currentTab = this.tabs.find(function (tab) {
        return tab.id === gameData.currentTabID;
      });
      this.gameManager.currentSubTab = this.tabs.find(function (subTab) {
        return subTab.id === gameData.currentSubTabID;
      });
      this.eventManager.dispatchEvent('changeTab', this.gameManager.currentTab.name);

      // load odyssey current view data
      this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld = this.gameManager.findObjectById(gameData.currentlyViewedWorldId);
      this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion = this.gameManager.findObjectById(gameData.currentlyViewedRegionId);
      this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType = gameData.currentViewType;
      var viewedRegion = this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion;
      var viewedWorld = this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld;
      if (viewedRegion) {
        // Set the currentlyViewedRegion and currentlyViewedWorld properties
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedRegion = viewedRegion;
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld = viewedRegion.world;

        // Set the currentViewType to "region"
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType = "region";

        // Update the map view with the viewedRegion
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.mapViewManager.updateMapView(viewedRegion);

        // Dispatch the 'changeWorldMap' event with the viewedRegion's world
        this.eventManager.dispatchEvent('changeWorldMap', viewedRegion.world);

        // Show the region view
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.mapViewManager.showRegionView(viewedRegion);
      } else if (viewedWorld) {
        // Set the currentlyViewedWorld property
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentlyViewedWorld = viewedWorld;

        // Set the currentViewType to "world"
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.worldDisplayManager.currentViewType = "world";

        // Update the map view with the viewedWorld
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.mapViewManager.updateMapView(viewedWorld);

        // Dispatch the 'changeWorldMap' event with the viewedWorld
        this.eventManager.dispatchEvent('changeWorldMap', viewedWorld);

        // Show the world view
        this.stateManager.ui.tabManager.explorationTab.odysseySubTab.mapViewManager.showWorldView(viewedWorld);
      }
      if (gameData.currentlyViewedWorldId) {
        var currentlyViewedWorld = this.gameManager.findObjectById(gameData.currentlyViewedWorldId);
        this.eventManager.dispatchEvent('changeWorldMap', currentlyViewedWorld);
      } else if (gameData.currentlyViewedRegionId) {
        var currentlyViewedRegion = this.gameManager.findObjectById(gameData.currentlyViewedRegionId);
        this.eventManager.dispatchEvent('changeWorldMap', currentlyViewedRegion.world);
      }
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {}
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2(gameData) {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3(gameData) {}
  }, {
    key: "saveTabData",
    value: function saveTabData(tabName) {
      var allTabs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (allTabs) {} else {
        var tab = this.tabs.find(function (tab) {
          return tab.name === tabName;
        });
        if (tab) {
          return {
            active: tab.active
          };
        }
        return null;
      }
    }
  }, {
    key: "loadTabData",
    value: function loadTabData(tabName, tabData) {
      var tab = this.tabs.find(function (tab) {
        return tab.name === tabName;
      });
      if (tab && tabData) {
        tab.active = tabData.active;
      }
    }
  }]);
}();
},{}],"components/StateManagement/GameContentState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var GameContentState = exports.default = /*#__PURE__*/function () {
  function GameContentState(gameManager, stateManager) {
    _classCallCheck(this, GameContentState);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
    this.gameContent = this.gameManager.gameContent;
    this.baseStateValues = [
    //lifetime stats
    'lifetimeForceEarned', 'lifetimeWisdomEarned', 'lifetimeEnergyEarned', 'lifetimeDivineEarned', 'lifetimeCrystalEarned', 'maxPowerLevelAchieved', 'lifetimeEssenceEarned', 'rebirth1Count', 'maxPowerLevelAchieved', 'lifetimeZoneCompletions', 'lifetimeRegionProgressions', 'lifetimeWorldProgressions', 'maxProgressionWorld', 'maxProgressionRegion', 'maxTournamentRank', 'lifetimeFighterTiersDefeated', 'lifetimeKills', 'totalPlaytime',
    //base stats
    'baseForce', 'baseWisdom', 'baseEnergy', 'baseDivine', 'baseSkillpoint', 'baseCrystal', 'baseEssence', 'baseForcePowerLevelMultiplier', 'baseWisdomPowerLevelMultiplier', 'baseEnergyPowerLevelMultiplier', 'baseDivinePowerLevelMultiplier', 'essenceGainOnNextRebirth1'
    //other
    ];
    this.fullStateValues = ['powerLevel', 'force', 'wisdom', 'energy', 'divine', 'crystal', 'essence', 'skillpoints', 'forcePowerLevelMultiplier', 'powerLevelFromForce', 'wisdomPowerLevelMultiplier', 'powerLevelFromWisdom', 'energyPowerLevelMultiplier', 'powerLevelFromEnergy', 'divinePowerLevelMultiplier', 'powerLevelFromDivine', 'radiance', 'timeModifierUpgrade', 'lastRebirth1', 'essenceGainOnNextRebirth1'];
    this.rebirth1StateValues = ['essence', 'lifetimeEssenceEarned', 'rebirth1Count', 'essenceGainOnNextRebirth1', 'baseSkillpoint', 'timeModifierUpgrade'];
  }
  return _createClass(GameContentState, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      switch (state) {
        case 0:
          this.populateSaveDataBase(gameData);
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2();
          break;
        case 3:
          this.populateSaveDataRebirth3();
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      switch (state) {
        case 0:
          this.applyLoadDataBase(gameData);
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2(gameData);
          break;
        case 3:
          this.applyLoadDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase(gameData) {
      this.saveGameContentData(gameData, this.baseStateValues);

      // save time variables
      gameData.originalStartDateTime = this.gameContent.originalStartDateTime.toString();
    }
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      this.saveGameContentData(gameData, this.fullStateValues);
      // Save synergyUpgrades
      gameData.gameContentData.synergyUpgrades = this.stateManager.stringifyObjectArrays(this.gameContent.synergyUpgrades);

      // Save shards
      gameData.gameContentData.shards = this.stateManager.stringifyObjectArrays(this.gameContent.shards);

      // Save heap data
      gameData.forceHeap = this.stateManager.mapAndSaveIds(this.gameManager.automationManager.forceHeap.heap);
      gameData.wisdomHeap = this.stateManager.mapAndSaveIds(this.gameManager.automationManager.wisdomHeap.heap);
      gameData.energyHeap = this.stateManager.mapAndSaveIds(this.gameManager.automationManager.energyHeap.heap);
      gameData.divineHeap = this.stateManager.mapAndSaveIds(this.gameManager.automationManager.divineHeap.heap);

      //save autoUnlocks from essence upgrades
      gameData.gameContentData.autoConquestUnlocked = this.gameManager.gameContent.worldManager.autoUnlocked;
      gameData.gameContentData.autoTournamentUnlocked = this.gameManager.gameContent.tournament.autoUnlocked;
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1(gameData) {
      this.saveGameContentData(gameData, this.rebirth1StateValues);

      //save autoUnlocks from essence upgrades
      gameData.gameContentData.autoConquestUnlocked = this.gameManager.gameContent.worldManager.autoUnlocked;
      gameData.gameContentData.autoTournamentUnlocked = this.gameManager.gameContent.tournament.autoUnlocked;
    }
  }, {
    key: "populateSaveDataRebirth2",
    value: function populateSaveDataRebirth2(gameData) {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3(gameData) {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {
      this.loadGameContentData(gameData, this.baseStateValues);

      // load time variables
      this.gameContent.originalStartDateTime = new Date(gameData.originalStartDateTime);
    }
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      var _this = this;
      this.loadGameContentData(gameData, this.fullStateValues);
      // Load synergyUpgrades
      for (var _i = 0, _Object$entries = Object.entries(gameData.gameContentData.synergyUpgrades || {}); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          value = _Object$entries$_i[1];
        this.gameContent.synergyUpgrades[key] = (0, _decimal.DEC)(value);
      }

      // Load shards
      for (var _i2 = 0, _Object$entries2 = Object.entries(gameData.gameContentData.shards || {}); _i2 < _Object$entries2.length; _i2++) {
        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
          _key = _Object$entries2$_i[0],
          _value = _Object$entries2$_i[1];
        this.gameContent.shards.set(_key, (0, _decimal.DEC)(_value));
      }

      // Load heap data
      ['forceHeap', 'wisdomHeap', 'energyHeap', 'divineHeap'].forEach(function (heapName) {
        return _this.loadAutobuyHeapData(gameData, heapName);
      });

      // load autoUnlocks from essence upgrades
      this.gameManager.gameContent.worldManager.autoUnlocked = gameData.gameContentData.autoConquestUnlocked;
      this.gameManager.gameContent.tournament.autoUnlocked = gameData.gameContentData.autoTournamentUnlocked;
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {
      this.loadGameContentData(gameData, this.rebirth1StateValues);
      this.gameContent.essence = this.gameContent.essence.plus(this.gameContent.essenceGainOnNextRebirth1);
      this.gameContent.essenceGainOnNextRebirth1 = new _decimal.DEC(0);

      // set skillpoints from skillpoints gained from rebirth upgarde
      this.gameContent.skillpoints = this.gameContent.baseSkillpoint;

      // load autoUnlocks from essence upgrades
      this.gameManager.gameContent.worldManager.autoUnlocked = gameData.gameContentData.autoConquestUnlocked;
      this.gameManager.gameContent.tournament.autoUnlocked = gameData.gameContentData.autoTournamentUnlocked;
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2(gameData) {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3(gameData) {}
  }, {
    key: "saveGameContentData",
    value: function saveGameContentData(gameData, properties) {
      var _this2 = this;
      properties.forEach(function (stat) {
        var _this2$gameContent$st;
        gameData.gameContentData[stat] = (_this2$gameContent$st = _this2.gameContent[stat]) === null || _this2$gameContent$st === void 0 ? void 0 : _this2$gameContent$st.toString();
      });
    }
  }, {
    key: "loadGameContentData",
    value: function loadGameContentData(gameData, properties) {
      var _this3 = this;
      properties.forEach(function (stat) {
        _this3.loadDecimalData(gameData, 'gameContentData', _this3.gameContent, stat);
        // this.gameData.gameContentData[stat] = this.gameContent[stat]?.toString();
      });
    }

    // Helper to load Decimal data into the game content
  }, {
    key: "loadDecimalData",
    value: function loadDecimalData(gameData, dataPath, target, stat) {
      if (gameData[dataPath][stat]) {
        target[stat] = (0, _decimal.DEC)(gameData[dataPath][stat]);
      } else {
        console.error("load error-data does not exist for:", stat);
      }
    }

    // Helper to load heap data
  }, {
    key: "loadAutobuyHeapData",
    value: function loadAutobuyHeapData(gameData, heapName) {
      if (gameData[heapName]) {
        var _iterator = _createForOfIteratorHelper(gameData[heapName]),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;
            var feature = this.gameManager.findObjectById(item.id);
            this.gameManager.automationManager[heapName].add(feature);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  }, {
    key: "getOrUpdateFeatureData",
    value: function getOrUpdateFeatureData(feature, gameData, featureType) {
      // Access the correct array in gameData directly using featureType
      var featureDataArray = gameData[featureType];

      // If the array doesn't exist yet, create it
      if (!featureDataArray) {
        featureDataArray = [];
        gameData[featureType] = featureDataArray;
      }

      // Find the existing data in the gameData object, if it exists
      var featureData = featureDataArray.find(function (t) {
        return t.id === feature.id;
      });

      // If the data doesn't exist yet, create it
      if (!featureData) {
        featureData = {
          id: feature.id
        };
        featureDataArray.push(featureData);
      }
      return featureData;
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/StateManagement/Rebirth1StateHandler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Rebirth1StateHandler = exports.default = /*#__PURE__*/function () {
  function Rebirth1StateHandler(gameManager, stateManager) {
    _classCallCheck(this, Rebirth1StateHandler);
    this.gameManager = gameManager;
    this.stateManager = stateManager;
  }
  return _createClass(Rebirth1StateHandler, [{
    key: "saveState",
    value: function saveState(state, gameData) {
      this.populateSaveDataBase(gameData);
      switch (state) {
        case 0:
          this.populateSaveDataFull(gameData);
          break;
        case 1:
          this.populateSaveDataRebirth1(gameData);
          break;
        case 2:
          this.populateSaveDataRebirth2(gameData);
          break;
        case 3:
          this.populateSaveDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state, gameData) {
      this.applyLoadDataBase(gameData);
      switch (state) {
        case 0:
          this.applyLoadDataFull(gameData);
          break;
        case 1:
          this.applyLoadDataRebirth1(gameData);
          break;
        case 2:
          this.applyLoadDataRebirth2(gameData);
          break;
        case 3:
          this.applyLoadDataRebirth3(gameData);
          break;
      }
    }
  }, {
    key: "populateSaveDataBase",
    value: function populateSaveDataBase(gameData) {}
  }, {
    key: "populateSaveDataFull",
    value: function populateSaveDataFull(gameData) {
      gameData.rebirth1PseudoObject = {};
      var rebirth1PseudoObject = this.gameManager.findObjectById(60000);
      gameData.rebirth1PseudoObject = {
        id: rebirth1PseudoObject.id,
        level: rebirth1PseudoObject.level.toString(),
        active: rebirth1PseudoObject.active
      };
    }
  }, {
    key: "populateSaveDataRebirth1",
    value: function populateSaveDataRebirth1(gameData) {
      this.isRebirthing = true;
      gameData.rebirth1PseudoObject = {};

      // save rebirth pseudo object for essence multiplier
      var rebirth1PseudoObject = this.gameManager.findObjectById(60000);

      // apply the new essence gain multiplier to rebirth 1 pseudoobject, so that it's mod will see the higher level source and multiply based upon that
      rebirth1PseudoObject.level = rebirth1PseudoObject.level.plus(this.gameManager.gameContent.essenceGainOnNextRebirth1);
      gameData.rebirth1PseudoObject = {
        id: rebirth1PseudoObject.id,
        level: rebirth1PseudoObject.level.toString(),
        active: rebirth1PseudoObject.active
      };
    }
  }, {
    key: "populateSaveDataRebirth2gameData",
    value: function populateSaveDataRebirth2gameData() {}
  }, {
    key: "populateSaveDataRebirth3",
    value: function populateSaveDataRebirth3(gameData) {}
  }, {
    key: "applyLoadDataBase",
    value: function applyLoadDataBase(gameData) {}
  }, {
    key: "applyLoadDataFull",
    value: function applyLoadDataFull(gameData) {
      var rebirth1PseudoObject = this.gameManager.findObjectById(60000);
      var _gameData$rebirth1Pse = gameData.rebirth1PseudoObject,
        id = _gameData$rebirth1Pse.id,
        level = _gameData$rebirth1Pse.level,
        active = _gameData$rebirth1Pse.active;
      rebirth1PseudoObject.level = (0, _decimal.DEC)(level);
      rebirth1PseudoObject.setActive();
      rebirth1PseudoObject.updateObservers();
    }
  }, {
    key: "applyLoadDataRebirth1",
    value: function applyLoadDataRebirth1(gameData) {
      // load rebirth pseudo object for essence multiplier
      var rebirth1PseudoObject = this.gameManager.findObjectById(60000);
      var _gameData$rebirth1Pse2 = gameData.rebirth1PseudoObject,
        id = _gameData$rebirth1Pse2.id,
        level = _gameData$rebirth1Pse2.level,
        active = _gameData$rebirth1Pse2.active;
      rebirth1PseudoObject.level = (0, _decimal.DEC)(level);
      rebirth1PseudoObject.setActive();
      rebirth1PseudoObject.updateObservers();

      //apply upgrades that increase base level of features
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.trainings.concat(this.gameManager.gameContent.generators)),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var feature = _step.value;
          if (feature.baseLevel.gt(0)) {
            feature.levelUp("manual", feature.baseLevel);
            this.gameManager.updateFeatureValues(feature, false);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "applyLoadDataRebirth2",
    value: function applyLoadDataRebirth2(gameData) {}
  }, {
    key: "applyLoadDataRebirth3",
    value: function applyLoadDataRebirth3(gameData) {}
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/StateManagement/_StateManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _config = require("../Utilities/config.js");
var _decimal = require("../Utilities/decimal.js");
var _break_eternityMin = _interopRequireDefault(require("../Utilities/break_eternity.min.js"));
var _RealmState = _interopRequireDefault(require("./RealmState.js"));
var _TrainingState = _interopRequireDefault(require("./TrainingState.js"));
var _RealmUpgradeState = _interopRequireDefault(require("./RealmUpgradeState.js"));
var _GeneratorState = _interopRequireDefault(require("./GeneratorState.js"));
var _AchievementState = _interopRequireDefault(require("./AchievementState.js"));
var _ForgeUpgradeState = _interopRequireDefault(require("./ForgeUpgradeState.js"));
var _SkillsState = _interopRequireDefault(require("./SkillsState.js"));
var _EssenceUpgradesState = _interopRequireDefault(require("./EssenceUpgradesState.js"));
var _RadianceUpgradeState = _interopRequireDefault(require("./RadianceUpgradeState.js"));
var _ArtifactState = _interopRequireDefault(require("./ArtifactState.js"));
var _UnlockState = _interopRequireDefault(require("./UnlockState.js"));
var _ZoneState = _interopRequireDefault(require("./ZoneState.js"));
var _RegionState = _interopRequireDefault(require("./RegionState.js"));
var _WorldState = _interopRequireDefault(require("./WorldState.js"));
var _ModState = _interopRequireDefault(require("./ModState.js"));
var _TournamentState = _interopRequireDefault(require("./TournamentState.js"));
var _FighterTierState = _interopRequireDefault(require("./FighterTierState.js"));
var _FighterState = _interopRequireDefault(require("./FighterState.js"));
var _DisplayState = _interopRequireDefault(require("./_DisplayState.js"));
var _GameContentState = _interopRequireDefault(require("./GameContentState.js"));
var _Rebirth1StateHandler = _interopRequireDefault(require("./Rebirth1StateHandler.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// large number library
var LZString = require('lz-string'); // save file string optimization library
var StateManager = exports.default = /*#__PURE__*/function () {
  function StateManager(eventManager, gameManager) {
    _classCallCheck(this, StateManager);
    this.eventManager = eventManager;
    this.gameManager = gameManager;
    this.gameContent = gameManager.gameContent;
    this.ui = null;
    this.lastSaveTime = null;
    this.gameData;
    this.versionMismatch = false;
    this.localStorageRetrieved;
    this.stateModules = [];
    this.initStateModules();
  }
  return _createClass(StateManager, [{
    key: "initStateModules",
    value: function initStateModules() {
      this.RealmState = new _RealmState.default(this.gameManager, this);
      this.trainingState = new _TrainingState.default(this.gameManager, this);
      this.realmUpgradeState = new _RealmUpgradeState.default(this.gameManager, this);
      this.generatorState = new _GeneratorState.default(this.gameManager, this);
      this.achievementState = new _AchievementState.default(this.gameManager, this);
      this.forgeUpgradeState = new _ForgeUpgradeState.default(this.gameManager, this);
      this.skillsState = new _SkillsState.default(this.gameManager, this);
      this.essenceUpgradesState = new _EssenceUpgradesState.default(this.gameManager, this);
      this.radianceUpgradeState = new _RadianceUpgradeState.default(this.gameManager, this);
      this.artifactState = new _ArtifactState.default(this.gameManager, this);
      this.unlockState = new _UnlockState.default(this.gameManager, this);
      this.zoneState = new _ZoneState.default(this.gameManager, this);
      this.regionState = new _RegionState.default(this.gameManager, this);
      this.worldState = new _WorldState.default(this.gameManager, this);
      this.modState = new _ModState.default(this.gameManager, this);
      this.fighterTierState = new _FighterTierState.default(this.gameManager, this);
      this.fighterState = new _FighterState.default(this.gameManager, this);
      this.tournamentState = new _TournamentState.default(this.gameManager, this);
      this.gameContentState = new _GameContentState.default(this.gameManager, this);
      this.rebirth1StateHandler = new _Rebirth1StateHandler.default(this.gameManager, this);
      this.displayState = new _DisplayState.default(this.gameManager, this.eventManager, this);

      //order of declaration here no longer matters afer adding propogateObserverUpdates function
      this.stateModules = [this.gameContentState, this.RealmState, this.trainingState, this.realmUpgradeState, this.forgeUpgradeState, this.generatorState, this.skillsState, this.artifactState, this.zoneState, this.regionState, this.worldState, this.fighterTierState, this.fighterState, this.tournamentState, this.essenceUpgradesState, this.radianceUpgradeState, this.rebirth1StateHandler, this.modState, this.unlockState, this.achievementState, this.displayState];
    }
  }, {
    key: "initializeGameDataObject",
    value: function initializeGameDataObject(saveTime) {
      this.gameData = {
        version: _config.GAME_VERSION,
        gameContentData: {},
        saveTimeStamp: saveTime
      };
    }
  }, {
    key: "saveState",
    value: function saveState(state) {
      this.lastSaveTime = Date.now();
      this.initializeGameDataObject(this.lastSaveTime);
      var _iterator = _createForOfIteratorHelper(this.stateModules),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var stateModule = _step.value;
          stateModule.saveState(state, this.gameData);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this.setLocalStorageGameData();
      this.clearGameDataObject();

      //if rebirth (state > 0), immediately restart game and load rebirth state
      if (state > 0) {
        this.eventManager.dispatchEvent('restart', state);
      }
    }
  }, {
    key: "loadState",
    value: function loadState(state) {
      if (state === -1) {
        return;
      }
      this.retrieveLocalStorageGameData();
      if (this.localStorageRetrieved) {
        if (this.gameData.version) {
          this.validateVersion(this.gameData.version);
          if (this.versionMismatch) {
            return;
          }
        }
      } else {
        return;
      }
      this.lastSaveTime = new Date(this.gameData.saveTimeStamp);
      var _iterator2 = _createForOfIteratorHelper(this.stateModules),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var stateModule = _step2.value;
          stateModule.loadState(state, this.gameData);
        }

        //had to add this in so mod trees will be sure to recalculate
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this.propogateObserverUpdates();
    }
  }, {
    key: "exportGameState",
    value: function exportGameState() {
      this.saveState(0);
      var gameDataJson = localStorage.getItem('saveGame');
      var compressed = LZString.compressToEncodedURIComponent(gameDataJson);
      var blob = new Blob([compressed], {
        type: 'text/plain;charset=utf-8'
      });
      var url = URL.createObjectURL(blob);
      var a = document.createElement('a');
      a.href = url;
      a.download = 'gameSave.txt';
      a.click();
      URL.revokeObjectURL(url);
    }
  }, {
    key: "importGameState",
    value: function importGameState(importedData) {
      var decompressed = LZString.decompressFromEncodedURIComponent(importedData);
      if (importedData.length < 1000) {
        return;
      }
      localStorage.setItem('saveGame', decompressed);
      this.loadState(0);
    }
  }, {
    key: "propogateObserverUpdates",
    value: function propogateObserverUpdates() {
      // orupdating observers of all upgrades that would propagate mods
      var _iterator3 = _createForOfIteratorHelper(this.gameContent.realmUpgrades.concat(this.gameContent.essenceUpgrades).concat(this.gameContent.forgeUpgrades).concat(this.gameContent.artifacts)),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var upgrade = _step3.value;
          if (upgrade.active) {
            upgrade.updateObservers();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "populateSaveData",
    value: function populateSaveData(featureType, properties) {
      // Ensure the feature type exists in the game content
      if (!this.gameManager.gameContent[featureType]) {
        console.error("".concat(featureType, " is not a valid feature type in gameContent."));
        return;
      }

      // Map each item in the feature type to its saved data format
      var featureData = this.gameManager.gameContent[featureType].map(function (item) {
        var data = {
          id: item.id
        };

        // Iterate over the properties and handle Decimal conversion
        properties.forEach(function (property) {
          if (_typeof(item[property]) === 'object' && item[property] instanceof _break_eternityMin.default) {
            // Convert Decimal properties to strings
            data[property] = item[property].toString();
          } else {
            // Directly copy other property types
            data[property] = item[property];
          }
        });
        return data;
      });

      // Assign the mapped data to the corresponding key in gameData
      this.gameData[featureType] = featureData;
    }

    // General purpose loadign data function
  }, {
    key: "applyLoadData",
    value: function applyLoadData(featureType, properties) {
      var _this = this;
      if (!this.gameData[featureType]) {
        console.error("".concat(featureType, " data is missing in gameData."));
        return;
      }
      this.gameData[featureType].forEach(function (data) {
        var item = _this.gameManager.gameContent[featureType].find(function (t) {
          return t.id === data.id;
        });
        if (!item) {
          console.error("".concat(featureType, " data does not exist for ID:"), data.id);
          return;
        }
        properties.forEach(function (property) {
          if (!data.hasOwnProperty(property)) return;

          // Check if the item property currently is a Decimal instance
          var isDecimal = item[property] && typeof item[property].mag !== 'undefined';

          // Apply the logic to handle Decimal, number, or direct assignment
          if (typeof data[property] === 'string') {
            if (!isNaN(data[property])) {
              // Numeric string, convert to number or Decimal
              item[property] = isDecimal ? (0, _decimal.DEC)(data[property]) : Number(data[property]);
            } else {
              // Non-numeric string, assign directly
              item[property] = data[property];
            }
          } else {
            // Direct assignment for non-string types
            item[property] = data[property];
          }
        });
      });
    }
  }, {
    key: "autosave",
    value: function autosave() {
      this.saveState(0);
    }
  }, {
    key: "clearGameDataObject",
    value: function clearGameDataObject() {
      this.gameData = {};
    }
  }, {
    key: "setLocalStorageGameData",
    value: function setLocalStorageGameData() {
      var gameDataJson = JSON.stringify(this.gameData);
      localStorage.setItem('saveGame', gameDataJson);
    }
  }, {
    key: "retrieveLocalStorageGameData",
    value: function retrieveLocalStorageGameData() {
      var gameDataJson = localStorage.getItem('saveGame');
      if (!gameDataJson) {
        console.error("No save game file located");
        this.localStorageRetrieved = false;
        return;
      }
      this.localStorageRetrieved = true;
      this.gameData = JSON.parse(gameDataJson);
    }
  }, {
    key: "validateVersion",
    value: function validateVersion(savedVersion) {
      if (savedVersion === _config.GAME_VERSION) {
        // The version matches the current one, no action needed
        return;
      }
      // if (!COMPATIBLE_VERSIONS.includes(savedVersion)){
      console.error("Save version mismatch. Resetting game state");
      this.versionMismatch = true;
      // }
      // If want to perform additional actions for compatible but outdated versions, add them here.
    }

    // takes a collection of items and maps each item to a new object containing only its ID
  }, {
    key: "mapAndSaveIds",
    value: function mapAndSaveIds(collection) {
      var _this2 = this;
      return collection.map(function (item) {
        return _this2.createIdObject(item);
      });
    }
  }, {
    key: "createIdObject",
    value: function createIdObject(item) {
      return {
        id: item.id
      };
    }
  }, {
    key: "stringifyObjectArrays",
    value: function stringifyObjectArrays(objOrMap) {
      var result = {};
      if (objOrMap instanceof Map) {
        var _iterator4 = _createForOfIteratorHelper(objOrMap),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _step4$value = _slicedToArray(_step4.value, 2),
              key = _step4$value[0],
              value = _step4$value[1];
            result[key] = value.toString();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else {
        for (var _i = 0, _Object$entries = Object.entries(objOrMap); _i < _Object$entries.length; _i++) {
          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
            _key = _Object$entries$_i[0],
            _value = _Object$entries$_i[1];
          result[_key] = _value.toString();
        }
      }
      return result;
    }
  }]);
}();
},{"../Utilities/config.js":"components/Utilities/config.js","../Utilities/decimal.js":"components/Utilities/decimal.js","../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js","lz-string":"node_modules/lz-string/libs/lz-string.js","./RealmState.js":"components/StateManagement/RealmState.js","./TrainingState.js":"components/StateManagement/TrainingState.js","./RealmUpgradeState.js":"components/StateManagement/RealmUpgradeState.js","./GeneratorState.js":"components/StateManagement/GeneratorState.js","./AchievementState.js":"components/StateManagement/AchievementState.js","./ForgeUpgradeState.js":"components/StateManagement/ForgeUpgradeState.js","./SkillsState.js":"components/StateManagement/SkillsState.js","./EssenceUpgradesState.js":"components/StateManagement/EssenceUpgradesState.js","./RadianceUpgradeState.js":"components/StateManagement/RadianceUpgradeState.js","./ArtifactState.js":"components/StateManagement/ArtifactState.js","./UnlockState.js":"components/StateManagement/UnlockState.js","./ZoneState.js":"components/StateManagement/ZoneState.js","./RegionState.js":"components/StateManagement/RegionState.js","./WorldState.js":"components/StateManagement/WorldState.js","./ModState.js":"components/StateManagement/ModState.js","./TournamentState.js":"components/StateManagement/TournamentState.js","./FighterTierState.js":"components/StateManagement/FighterTierState.js","./FighterState.js":"components/StateManagement/FighterState.js","./_DisplayState.js":"components/StateManagement/_DisplayState.js","./GameContentState.js":"components/StateManagement/GameContentState.js","./Rebirth1StateHandler.js":"components/StateManagement/Rebirth1StateHandler.js"}],"components/Core/RewardManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _decimal = require("../Utilities/decimal.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var RewardManager = exports.default = /*#__PURE__*/function () {
  function RewardManager(eventManager, gameManager) {
    _classCallCheck(this, RewardManager);
    this.eventManager = eventManager;
    this.gameManager = gameManager;

    // Initialize last reward times to current time
    this.lastHourlyRewardTime = new Date().getTime();
    this.lastDailyRewardTime = new Date().getTime();
    this.oneHourInMilliseconds = 3600 * 1000;
    this.oneDayInMilliseconds = 24 * this.oneHourInMilliseconds;
    this.baseDailyRewardValue = (0, _decimal.DEC)(100);
    this.dailyRewardValue = this.baseDailyRewardValue;
    this.dailyRewardType = "radiance";
    this.dailyRewardClaimable = false;
    this.hourlyRewardClaimable = false;
    this.baseHourlyRewardValue = (0, _decimal.DEC)(10);
    this.hourlyRewardValue = this.baseHourlyRewardValue;
    this.hourlyRewardType = "radiance";
    this.currentHourlyRewardsClaimable = (0, _decimal.DEC)(0);
    this.baseHourlyRewardCap = (0, _decimal.DEC)(4);
    this.hourlyRewardCap = this.baseHourlyRewardCap;
  }
  return _createClass(RewardManager, [{
    key: "processBoost",
    value: function processBoost() {
      console.error("boost");
    }
  }, {
    key: "checkRewards",
    value: function checkRewards() {
      var currentTime = Date.now();

      //check hourly reward
      if (currentTime - this.lastHourlyRewardTime >= this.oneHourInMilliseconds && this.currentHourlyRewardsClaimable.lt(this.hourlyRewardCap)) {
        this.currentHourlyRewardsClaimable = this.currentHourlyRewardsClaimable.plus(1);
        this.hourlyRewardClaimable = true;

        // Update last hourly reward time
        this.lastHourlyRewardTime = currentTime;
      }

      //check daily reward
      if (currentTime - this.lastDailyRewardTime >= this.oneDayInMilliseconds) {
        this.dailyRewardClaimable = true;

        // Update last daily reward time
        this.lastDailyRewardTime = currentTime;
      }
    }
  }, {
    key: "giveHourlyReward",
    value: function giveHourlyReward() {
      //reset time if rewards were capped
      if (this.currentHourlyRewardsClaimable.eq(this.hourlyRewardCap)) {
        this.lastHourlyRewardTime = Date.now();
      }
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: this.hourlyRewardType,
        value: this.hourlyRewardValue,
        operation: 'add'
      });
      this.currentHourlyRewardsClaimable = this.currentHourlyRewardsClaimable.minus(1);
      if (this.currentHourlyRewardsClaimable.eq(0)) {
        this.hourlyRewardClaimable = false;
      }
    }
  }, {
    key: "giveDailyReward",
    value: function giveDailyReward() {
      this.lastDailyRewardTime = Date.now();
      this.eventManager.dispatchEvent('updatePropertyValue', {
        property: this.dailyRewardType,
        value: this.dailyRewardValue,
        operation: 'add'
      });
      this.dailyRewardClaimable = false;
    }
  }, {
    key: "checkHourlyReward",
    value: function checkHourlyReward() {
      //do not increment time if capped claimable
      if (this.currentHourlyRewardsClaimable.eq(this.hourlyRewardCap)) {
        return this.oneHourInMilliseconds;
      }
      var currentTime = Date.now();
      var timeSinceLastReward = currentTime - this.lastHourlyRewardTime;
      if (timeSinceLastReward >= this.oneHourInMilliseconds) {
        return 0; // The reward is ready to claim
      } else {
        return this.oneHourInMilliseconds - timeSinceLastReward; // Return time left until next reward
      }
    }
  }, {
    key: "checkDailyReward",
    value: function checkDailyReward() {
      //do not increment time if claimable
      if (this.dailyRewardClaimable === true) {
        return this.oneDayInMilliseconds;
      }
      var currentTime = Date.now();
      var timeSinceLastReward = currentTime - this.lastDailyRewardTime;
      if (timeSinceLastReward >= this.oneDayInMilliseconds) {
        return 0; // The reward is ready to claim
      } else {
        return this.oneDayInMilliseconds - timeSinceLastReward; // Return time left until next reward
      }
    }
  }]);
}();
},{"../Utilities/decimal.js":"components/Utilities/decimal.js"}],"components/Core/OfflineManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _break_eternityMin = _interopRequireDefault(require("../Utilities/break_eternity.min.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// large number library
var OfflineManager = exports.default = /*#__PURE__*/function () {
  function OfflineManager(eventManager, gameManager) {
    _classCallCheck(this, OfflineManager);
    this.eventManager = eventManager;
    this.gameManager = gameManager;
    this.gameContent = gameManager.gameContent;
    this.beforeOfflineData = null;
    this.offlineProcessingStepInterval = 100000; // ms

    // Create and insert the modal HTML right after the root element
    this.createOfflineModal();
  }
  return _createClass(OfflineManager, [{
    key: "createOfflineGainsComparisonObject",
    value: function createOfflineGainsComparisonObject() {
      var comparisonObject = {
        powerLevel: this.gameContent.powerLevel,
        forceIncome: this.gameContent.forceIncome,
        wisdomIncome: this.gameContent.wisdomIncome,
        trainingLevels: {},
        generatorLevels: {}
      };
      this.gameManager.gameContent.trainings.forEach(function (training) {
        comparisonObject.trainingLevels[training.id] = {
          level: training.level,
          name: training.name
        };
      });
      this.gameManager.gameContent.generators.forEach(function (generator) {
        comparisonObject.generatorLevels[generator.id] = {
          level: generator.level,
          name: generator.name
        };
      });
      return comparisonObject;
    }
  }, {
    key: "createOfflineModal",
    value: function createOfflineModal() {
      var rootElement = document.getElementById('root');
      var modal = document.createElement('div');
      modal.setAttribute('id', 'myModal');
      modal.setAttribute('class', 'modal');
      var modalContent = document.createElement('div');
      modalContent.setAttribute('class', 'modal-content');
      var spanClose = document.createElement('span');
      spanClose.setAttribute('class', 'close');
      spanClose.innerHTML = '&times;';
      modalContent.appendChild(spanClose);
      var spanMessage = document.createElement('span');
      spanMessage.setAttribute('id', 'modal-message');
      modalContent.appendChild(spanMessage);
      modal.appendChild(modalContent);

      // Inserting the modal right after the root element
      rootElement.insertAdjacentElement('afterend', modal);

      // Add event listener for closing the modal when clicking on the close button
      var spanCloseClickHandler = function spanCloseClickHandler() {
        modal.remove(); // Remove the modal from the DOM
      };
      this.eventManager.addDomListener(spanClose, 'click', spanCloseClickHandler);

      // Store a reference to the modal click handler
      this.modalClickHandler = function (event) {
        var modalContent = document.querySelector('.modal-content');
        if (!modalContent.contains(event.target)) {
          modal.style.display = "none";
        }
      };

      // Add event listener for closing the modal when clicking outside of it
      window.addEventListener('click', this.modalClickHandler);
    }
  }, {
    key: "processOffline",
    value: function processOffline(elapsedTime) {
      var timeDifference = elapsedTime / 1000; // in seconds
      var stepInterval = this.offlineProcessingStepInterval / 1000; // in seconds

      if (timeDifference > stepInterval) {
        this.beforeOfflineData = this.createOfflineGainsComparisonObject();
        var totalTime = timeDifference * this.gameManager.gameContent.timeModifierUpgrade;
        var remainder = totalTime % stepInterval;
        var processCount = 0;
        while (totalTime >= stepInterval) {
          this.gameManager.processGamePropertyUpdates(stepInterval);
          totalTime -= stepInterval;
          processCount++;
        }
        if (remainder > 0) {
          this.gameManager.processGamePropertyUpdates(remainder);
          processCount++;
        }
        var gains = this.calculateOfflineGains();
        if (this.hasOfflineGains(gains)) {
          this.displayOfflineGainsModal(true);
          this.displayOfflineGainsModal(false, timeDifference, processCount);
        }
      }
    }
  }, {
    key: "hasOfflineGains",
    value: function hasOfflineGains(gains) {
      if (!gains) return false;
      for (var key in gains) {
        if (key !== 'trainingLevels' && key !== 'generatorLevels') {
          if (gains[key].gt(0)) return true;
        } else if (key === 'trainingLevels' || key === 'generatorLevels') {
          for (var subKey in gains[key]) {
            if (gains[key][subKey].level.gt(0)) return true;
          }
        }
      }
      return false;
    }
  }, {
    key: "displayOfflineGainsModal",
    value: function displayOfflineGainsModal() {
      var isLoading = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var timeDifference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var processCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var span = document.getElementsByClassName("close")[0];
      var modal = document.getElementById("myModal");
      span.onclick = function () {
        modal.style.display = "none";
      };
      modal.style.display = "block";
      var modalContent = document.getElementById("modal-message");
      if (isLoading) {
        modalContent.textContent = "Processing offline gains...";
      } else {
        var gains = this.calculateOfflineGains();
        var textContent = '';
        textContent += "".concat(timeDifference, "s since the last game update.\n");
        textContent += "Processing offline gains...\n\n";
        for (var key in gains) {
          if (key !== 'trainingLevels' && key !== 'generatorLevels') {
            textContent += "".concat(key, " gained: ").concat(gains[key].toFixed(2), "\n");
          } else if (key === 'trainingLevels') {
            for (var trainingId in gains.trainingLevels) {
              var trainingName = gains.trainingLevels[trainingId].name;
              var trainingGain = gains.trainingLevels[trainingId].level;
              textContent += "".concat(trainingName, " gained: ").concat(this.formatNumber(trainingGain), "\n");
            }
          } else if (key === 'generatorLevels') {
            for (var generatorId in gains.generatorLevels) {
              var generatorName = gains.generatorLevels[generatorId].name;
              var generatorGain = gains.generatorLevels[generatorId].level;
              textContent += "".concat(generatorName, " gained: ").concat(this.formatNumber(generatorGain), "\n");
            }
          }
        }
        textContent += "\n\n".concat(processCount, " income and autobuy intervals completed.");
        modalContent.textContent = textContent;
      }
    }
  }, {
    key: "calculateOfflineGains",
    value: function calculateOfflineGains() {
      if (!this.beforeOfflineData) return null;
      var beforeOfflineData = this.beforeOfflineData;
      var afterOfflineData = this.createOfflineGainsComparisonObject();
      var gains = {
        powerLevel: _break_eternityMin.default.sub(afterOfflineData.powerLevel, beforeOfflineData.powerLevel),
        forceIncome: _break_eternityMin.default.sub(afterOfflineData.forceIncome, beforeOfflineData.forceIncome),
        wisdomIncome: _break_eternityMin.default.sub(afterOfflineData.wisdomIncome, beforeOfflineData.wisdomIncome),
        trainingLevels: {},
        generatorLevels: {}
      };
      for (var trainingId in beforeOfflineData.trainingLevels) {
        var beforeTrainingLevel = beforeOfflineData.trainingLevels[trainingId].level;
        var afterTrainingLevel = afterOfflineData.trainingLevels[trainingId].level;
        var dif = _break_eternityMin.default.sub(afterTrainingLevel, beforeTrainingLevel);
        if (dif.gt(0)) {
          gains.trainingLevels[trainingId] = {
            level: dif,
            name: afterOfflineData.trainingLevels[trainingId].name
          };
        }
      }
      for (var generatorId in beforeOfflineData.generatorLevels) {
        var beforeGeneratorLevel = beforeOfflineData.generatorLevels[generatorId].level;
        var afterGeneratorLevel = afterOfflineData.generatorLevels[generatorId].level;
        var _dif = _break_eternityMin.default.sub(afterGeneratorLevel, beforeGeneratorLevel);
        if (_dif.gt(0)) {
          gains.generatorLevels[generatorId] = {
            level: _dif,
            name: afterOfflineData.generatorLevels[generatorId].name
          };
        }
      }
      return gains;
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(number) {
      if (number.lessThan(1000)) {
        return number.toFixed(2);
      } else {
        return number.toExponential(2);
      }
    }
  }]);
}();
},{"../Utilities/break_eternity.min.js":"components/Utilities/break_eternity.min.js"}],"components/Core/_Game.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Builder = _interopRequireDefault(require("../Builder/Builder.js"));
var _EventManager = _interopRequireDefault(require("./_EventManager.js"));
var _GameSettings = _interopRequireDefault(require("./GameSettings.js"));
var _GameManager = _interopRequireDefault(require("./_GameManager.js"));
var _GameUI = _interopRequireDefault(require("../UI/Core/_GameUI.js"));
var _StateManager = _interopRequireDefault(require("../StateManagement/_StateManager.js"));
var _RewardManager = _interopRequireDefault(require("./RewardManager.js"));
var _OfflineManager = _interopRequireDefault(require("./OfflineManager.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var Game = exports.default = /*#__PURE__*/function () {
  function Game() {
    var _this = this;
    _classCallCheck(this, Game);
    this.eventManager = new _EventManager.default();
    // this.settings = new GameSettings();

    this.incomeUpdateInterval = 100; // ms
    this.uiUpdateInterval = 100; // ms
    this.unlockCheckInterval = 200;
    this.gameStartTime = new Date().getTime();
    this.totalSessionTime = 0;
    this.lastSaveTime = null;
    this.autosaveFrequency = 10000;
    this.lastAutosaveTime = null;
    this.lastAutosaveTimeConverted = null;
    this.lastProcessTime = Date.now();
    this.offlineProcessingThreshold = 10000; // ms

    this.running = false;
    this.autosaveEnabled = true;
    this.offlineGainsEnabled = true;
    this.init(0);

    // process game when tab loses and regains focus
    // Define a named function for the visibility change event
    var visibilityChangeHandler = function visibilityChangeHandler() {
      var currentTime = Date.now();
      var timeSinceLastProcess = currentTime - _this.lastProcessTime;
      if (_this.offlineGainsEnabled && timeSinceLastProcess >= _this.offlineProcessingThreshold) {
        var elapsedTime = currentTime - _this.timeSinceLastProcess;
        _this.offlineManager.processOffline(elapsedTime);
      }
    };
    document.addEventListener('visibilitychange', visibilityChangeHandler);
  }
  return _createClass(Game, [{
    key: "init",
    value: function init(state) {
      var _this2 = this;
      this.running = false;
      this.gameManager = new _GameManager.default(this.eventManager);
      this.builder = new _Builder.default(this.eventManager, this.gameManager);
      this.rewardManager = new _RewardManager.default(this.eventManager, this.gameManager);

      //state must be declared before UI
      // hmm, fix that at some point
      this.stateManager = new _StateManager.default(this.eventManager, this.gameManager);
      this.ui = new _GameUI.default(this.eventManager, this.gameManager, this.stateManager, this.rewardManager);
      //because ui must be declared second, i apply these references afterwards for use in state management
      this.stateManager.ui = this.ui;
      this.stateManager.displayState.tabs = this.stateManager.ui.tabManager.tabs;
      this.offlineManager = new _OfflineManager.default(this.eventManager, this.gameManager);
      this.eventManager.addListener('restart', function (state) {
        return _this2.restart(state);
      });

      // load game data based on state value
      this.stateManager.loadState(state);

      // only run offline gains if no save version mismatch
      if (!this.stateManager.versionMismatch && this.offlineGainsEnabled) {
        //if game loaded naturally, and a save file exists, process offline income
        if (state === 0 && this.stateManager.localStorageRetrieved) {
          this.lastSaveTime = this.stateManager.lastSaveTime;
          var currentTime = Date.now();
          var elapsedTime = currentTime - this.stateManager.lastSaveTime;
          if (elapsedTime >= this.offlineProcessingThreshold) {
            this.offlineManager.processOffline(elapsedTime);
          }
        }
      }
      this.builder = null;
      this.lastIncomeUpdate = performance.now();
      this.lastUnlockCheck = performance.now();
      this.running = true;

      // restart intervals if regular game load
      if (state === 0) {
        this.restartRunningIntervals();
      }
      this.gameLoop();
    }
  }, {
    key: "restart",
    value: function restart(state) {
      this.running = false;
      this.clearRunningIntervals();
      this.eventManager.clearAllListeners();
      this.ui.hotkeyManager.detachKeyDownListener();
      this.clearGameObjects();
      this.init(state);
    }
  }, {
    key: "clearGameObjects",
    value: function clearGameObjects() {
      var visitedObjects = new WeakSet();
      var nullifyObject = function nullifyObject(obj) {
        if (visitedObjects.has(obj)) {
          return;
        }
        visitedObjects.add(obj);
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop)) {
            if (_typeof(obj[prop]) === 'object' && obj[prop] !== null) {
              nullifyObject(obj[prop]);
            }
            obj[prop] = null;
          }
        }
      };

      // Clear event listeners
      this.eventManager.clearAllListeners();
      this.clearUI();
      this.gameManager.gameContent.idToObjectMap.clear();
      // Clear game manager
      this.gameManager.gameContent = null;
      this.gameManager.unlockManager = null;
      this.gameManager.automationManager = null;
      this.gameManager.eventManager = null;
      this.gameManager = null;

      // Clear state manager
      this.stateManager = null;

      // Clear reward manager
      this.rewardManager = null;

      // Clear offline manager
      this.offlineManager.eventManager = null;
      this.offlineManager.gameManager = null;
      this.offlineManager = null;

      // console.error({...this});
    }
  }, {
    key: "clearRunningIntervals",
    value: function clearRunningIntervals() {
      var _iterator = _createForOfIteratorHelper(this.gameManager.gameContent.zones),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var zone = _step.value;
          if (zone.isConquesting) {
            zone.stopConquest();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (this.ui.tabManager.explorationTab.odysseySubTab.renderIntervalId) {
        clearInterval(this.ui.tabManager.explorationTab.odysseySubTab.renderIntervalId);
        this.ui.tabManager.explorationTab.odysseySubTab.renderIntervalId = null;
        clearInterval(this.ui.tabManager.explorationTab.odysseySubTab.zoneDisplayManager.renderIntervalId);
        this.ui.tabManager.explorationTab.odysseySubTab.zoneDisplayManager.renderIntervalId = null;
      }
    }
  }, {
    key: "restartRunningIntervals",
    value: function restartRunningIntervals() {
      var _iterator2 = _createForOfIteratorHelper(this.gameManager.gameContent.zones),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var zone = _step2.value;
          // if (zone.active && zone.isDefeated && zone.autoUnlocked){
          if (zone.isConquesting && !zone.isDefeated) {
            zone.startConquest(zone.progress);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "clearUI",
    value: function clearUI() {
      var _this3 = this;
      var rootElement = document.getElementById('root');
      while (rootElement.firstChild) {
        rootElement.removeChild(rootElement.firstChild);
      }

      // Clear the UI references
      this.ui.uiElementsMap.forEach(function (element, key) {
        _this3.ui[key] = null; // Clear the reference in GameUI
        _this3.ui.uiElementsMap.delete(key); // Remove from the Map
      });
      this.ui.uiElementsMap.clear(); // Optional, but ensures the Map is truly empty
    }
  }, {
    key: "gameLoop",
    value: function gameLoop() {
      var _this4 = this;
      if (!this.running) {
        return;
      }
      this.lastProcessTime = Date.now();
      this.checkUnlocks();
      this.updateUI();
      this.updateIncome();
      if (this.autosaveEnabled) {
        this.manageAutosave();
      }
      this.updatePlayTimeProperties();
      this.rewardManager.checkRewards();
      requestAnimationFrame(function () {
        return _this4.gameLoop();
      });
    }
  }, {
    key: "manageAutosave",
    value: function manageAutosave() {
      var now = Date.now();
      if (!this.lastAutosaveTime || now - this.lastAutosaveTime >= this.autosaveFrequency) {
        // milliseconds
        this.stateManager.autosave();
        this.lastAutosaveTime = now;
      }
    }
  }, {
    key: "updatePlayTimeProperties",
    value: function updatePlayTimeProperties() {
      // If lastTickTime doesn't exist yet, set it to the current time.
      // This should only happen on the first tick.
      if (!this.lastTickTime) {
        this.lastTickTime = Date.now();
      }
      var currentTime = Date.now();
      var deltaPlaytime = currentTime - this.lastTickTime;
      this.gameManager.gameContent.totalPlaytime = this.gameManager.gameContent.totalPlaytime.plus(deltaPlaytime);

      // Update lastTickTime to the current time for the next tick.
      this.lastTickTime = currentTime;
    }
  }, {
    key: "updateIncome",
    value: function updateIncome() {
      var currentTime = performance.now();
      if (currentTime - this.lastIncomeUpdate >= this.incomeUpdateInterval) {
        // Calculate deltaTimeSeconds in seconds
        var deltaTimeSeconds = (currentTime - this.lastIncomeUpdate) / 1000;

        //increase deltatime by timeModifierUpgrade
        deltaTimeSeconds *= this.gameManager.gameContent.timeModifierUpgrade;
        this.gameManager.processGamePropertyUpdates(deltaTimeSeconds);
        this.lastIncomeUpdate = currentTime;
      }
    }
  }, {
    key: "checkUnlocks",
    value: function checkUnlocks() {
      var currentTime = performance.now();
      // Check unlocks every 100 ms
      if (currentTime - this.lastUnlockCheck >= this.unlockCheckInterval) {
        this.gameManager.unlockManager.checkUnlocks();
        this.lastUnlockCheck = currentTime;
      }
    }
  }, {
    key: "updateUI",
    value: function updateUI() {
      var _this5 = this;
      // Throttle the UI updates to every 100ms
      var throttledUpdateUI = this.throttle(function () {
        return _this5.ui.updateUI();
      }, this.uiUpdateInterval);
      throttledUpdateUI();
    }
  }, {
    key: "throttle",
    value: function throttle(func, wait) {
      var context, args, prevArgs, argsChanged, result;
      var previous = 0;
      return function () {
        var now, remaining;
        if (wait) {
          now = Date.now();
          remaining = wait - (now - previous);
        }
        context = this;
        args = arguments;
        argsChanged = JSON.stringify(args) !== JSON.stringify(prevArgs);
        prevArgs = Object.assign({}, args);
        if (argsChanged || wait && (remaining <= 0 || remaining > wait)) {
          if (wait) {
            previous = now;
          }
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
    }
  }]);
}();
},{"../Builder/Builder.js":"components/Builder/Builder.js","./_EventManager.js":"components/Core/_EventManager.js","./GameSettings.js":"components/Core/GameSettings.js","./_GameManager.js":"components/Core/_GameManager.js","../UI/Core/_GameUI.js":"components/UI/Core/_GameUI.js","../StateManagement/_StateManager.js":"components/StateManagement/_StateManager.js","./RewardManager.js":"components/Core/RewardManager.js","./OfflineManager.js":"components/Core/OfflineManager.js"}],"main.js":[function(require,module,exports) {
"use strict";

var _Tester = _interopRequireDefault(require("./components/Core/_Tester.js"));
var _Game = _interopRequireDefault(require("./components/Core/_Game.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function initializeTester() {
  var game = window.game;
  window.tester = new _Tester.default(game);
}
document.addEventListener('DOMContentLoaded', function () {
  window.game = new _Game.default();

  // Wait for the next event loop tick to ensure the game is fully initialized
  // setTimeout(initializeTester, 0);
});
},{"./components/Core/_Tester.js":"components/Core/_Tester.js","./components/Core/_Game.js":"components/Core/_Game.js"}],"C:/Users/Jatora/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "58209" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}]},{},["C:/Users/Jatora/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","main.js"], null)
//# sourceMappingURL=/main.1f19ae8e.js.map